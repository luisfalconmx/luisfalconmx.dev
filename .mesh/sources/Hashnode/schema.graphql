schema {
  query: Query
  mutation: Mutation
}

directive @requireAuth(scopes: [hn_Scope!]) on OBJECT | FIELD_DEFINITION

directive @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, contains: String, notContains: String, pattern: String, format: String, min: Float, max: Float, exclusiveMin: Float, exclusiveMax: Float, multipleOf: Float, minItems: Int, maxItems: Int, uniqueTypeName: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @hidden on OBJECT | FIELD_DEFINITION

directive @private on OBJECT | FIELD_DEFINITION

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms with the standard mongodb object Id as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar hn_ObjectId

"""
Enum of all the scopes that can be used with the @requireAuth directive.
"""
enum hn_Scope {
  write_post
  write_series
  create_pro
  assign_pro_publications
  active_pro_user
  change_pro_subscription
  signup
  import_subscribers_to_publication
  acknowledge_email_import
  recommend_publications
  publication_admin
  webhook_admin
  update_post
  publish_draft
  publish_post
  publish_comment
  update_comment
  remove_comment
  publish_reply
  update_reply
  remove_reply
}

"""SortOrder is a common enum for all types that can be sorted."""
enum hn_SortOrder {
  asc
  dsc
}

"""
Node is a common interface for all types example User, Post, Comment, etc.
"""
interface hn_Node {
  """The ID of the node."""
  id: ID!
}

"""
Connection to get list of items.
Returns a list of edges which contains the items and cursor to the last item of the previous page.
This is a common interface for all connections.
"""
interface hn_Connection {
  """A list of edges of items connection."""
  edges: [hn_Edge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
}

"""
An edge that contains a node and cursor to the node.
This is a common interface for all edges.
"""
interface hn_Edge {
  """A node in the connection."""
  node: hn_Node!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
A Connection for page based pagination to get a list of items.
Returns a list of nodes which contains the items.
This is a common interface for all page connections.
"""
interface hn_PageConnection {
  """A list of edges of items connection."""
  nodes: [hn_Node!]!
  """Information to aid in pagination."""
  pageInfo: hn_OffsetPageInfo!
}

"""Common fields that describe a feature."""
interface hn_Feature {
  """Whether the feature is enabled or not."""
  isEnabled: Boolean!
}

"""Contains information to help in pagination."""
type hn_PageInfo {
  """Indicates if there are more pages."""
  hasNextPage: Boolean
  """
  The cursor of the last item in the current page.
  Use it as the after input to query the next page.
  """
  endCursor: String
}

"""Contains information to help in pagination for page based pagination."""
type hn_OffsetPageInfo {
  """Indicates if there are more pages."""
  hasNextPage: Boolean
  """Indicates if there are previous pages"""
  hasPreviousPage: Boolean
  """
  The page before the current page.
  Use it to build page navigation
  """
  previousPage: Int
  """
  The page after the current page.
  Use it to build page navigation
  """
  nextPage: Int
}

type hn_Content {
  """The Markdown version of the content."""
  markdown: String!
  """The HTML version of the content."""
  html: String!
  """
  The text version from sanitized html content. HTML tags are stripped and only text is returned.
  """
  text: String!
}

"""Information to help in seo related meta tags."""
type hn_SEO {
  """The title used in og:title tag for SEO purposes."""
  title: String
  """The description used in og:description tag for SEO purposes."""
  description: String
}

"""Information to help in open graph related meta tags."""
type hn_OpenGraphMetaData {
  """The image used in og:image tag for SEO purposes."""
  image: String
}

type Query {
  Hashnode: HashnodeQuery!
}

type Mutation {
  Hashnode: HashnodeMutation!
}

"""
Connection for users to another user. Contains a list of nodes.
Each node is a user.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_UserConnection implements hn_PageConnection {
  """A list of users"""
  nodes: [hn_User!]!
  """Information for page based pagination in users connection."""
  pageInfo: hn_OffsetPageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""Basic information about a user on Hashnode."""
interface hn_IUser {
  """The ID of the user. It can be used to identify the user."""
  id: ID!
  """
  The username of the user. It is unique and tied with user's profile URL. Example - https://hashnode.com/@username
  """
  username: String!
  """The name of the user."""
  name: String!
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bio: hn_Content
  """The URL to the profile picture of the user."""
  profilePicture: String
  """The social media links of the user. Shown on the user's profile."""
  socialMediaLinks: hn_SocialMediaLinks
  """
  Returns a list of badges that the user has earned. Shown on blogs /badges page. Example - https://iamshadmirza.com/badges
  """
  badges: [hn_Badge!]!
  """
  Publications associated with the user. Includes personal and team publications.
  """
  publications(
    """The maximum number of publications to return in a batch."""
    first: Int!
    """The cursor to start the query from."""
    after: String
    """Filter to apply to the publications."""
    filter: hn_UserPublicationsConnectionFilter
  ): hn_UserPublicationsConnection!
  """Returns the list of posts the user has published."""
  posts(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
    """The sort direction for the posts."""
    sortBy: hn_UserPostsSort = DATE_PUBLISHED_DESC
    """The filters to be applied to the post list."""
    filter: hn_UserPostConnectionFilter
  ): hn_UserPostConnection!
  """
  The number of users that follow the requested user. Visible in the user's profile.
  """
  followersCount: Int!
  """
  The number of users that this user is following. Visible in the user's profile.
  """
  followingsCount: Int!
  """The tagline of the user. Shown on the user's profile below the name."""
  tagline: String
  """The date the user joined Hashnode."""
  dateJoined: DateTime
  """The location of the user."""
  location: String
  """
  The availability of the user based on tech stack and interests. Shown on the "I am available for" section in user's profile.
  """
  availableFor: String
  """Returns a list of tags that the user follows."""
  tagsFollowing: [hn_Tag!]!
  """Whether or not the user is an ambassador."""
  ambassador: Boolean!
  """Whether or not the user is deactivated."""
  deactivated: Boolean!
  """The users who are following this user"""
  followers(
    """The number of users to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
  """The users which this user is following"""
  follows(
    """The number of users to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
}

"""Basic information about a user on Hashnode."""
type hn_User implements hn_IUser & hn_Node {
  """The ID of the user. It can be used to identify the user."""
  id: ID!
  """
  The username of the user. It is unique and tied with user's profile URL. Example - https://hashnode.com/@username
  """
  username: String!
  """The name of the user."""
  name: String!
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bio: hn_Content
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bioV2: hn_Content @deprecated(reason: "Will be removed on 26/10/2023. Use bio instead of bioV2")
  """The URL to the profile picture of the user."""
  profilePicture: String
  """The social media links of the user. Shown on the user's profile."""
  socialMediaLinks: hn_SocialMediaLinks
  """
  Returns a list of badges that the user has earned. Shown on blogs /badges page. Example - https://iamshadmirza.com/badges
  """
  badges: [hn_Badge!]!
  """
  Publications associated with the user. Includes personal and team publications.
  """
  publications(
    """The maximum number of publications to return in a batch."""
    first: Int!
    """The cursor to start the query from."""
    after: String
    """Filter to apply to the publications."""
    filter: hn_UserPublicationsConnectionFilter
  ): hn_UserPublicationsConnection!
  """Returns the list of posts the user has published."""
  posts(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
    """The sort direction for the posts based on the publish dates."""
    sortBy: hn_UserPostsSort = DATE_PUBLISHED_DESC
    """The filters to be applied to the post list."""
    filter: hn_UserPostConnectionFilter
  ): hn_UserPostConnection!
  """
  The number of users that follow the requested user. Visible in the user's profile.
  """
  followersCount: Int!
  """
  The number of users that this user is following. Visible in the user's profile.
  """
  followingsCount: Int!
  """The tagline of the user. Shown on the user's profile below the name."""
  tagline: String
  """The date the user joined Hashnode."""
  dateJoined: DateTime
  """The location of the user."""
  location: String
  """
  The availability of the user based on tech stack and interests. Shown on the "I am available for" section in user's profile.
  """
  availableFor: String
  """Returns a list of tags that the user follows."""
  tagsFollowing: [hn_Tag!]!
  """Whether or not the user is an ambassador."""
  ambassador: Boolean! @deprecated(reason: "Ambassadors program no longer active. Will be removed after 02/01/2024")
  """Whether or not the user is deactivated."""
  deactivated: Boolean!
  """
  Wether or not the authenticated user follows this user.
  Returns false if the authenticated user this user.
  """
  following: Boolean!
  """
  Wether or not this user follows the authenticated user.
  Returns false if the authenticated user this user.
  """
  followsBack: Boolean!
  """Wether or not this is a pro user."""
  isPro: Boolean!
  """The users who are following this user"""
  followers(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
  """The users which this user is following"""
  follows(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
}

"""
Basic information about the authenticated user.
User must be authenticated to use this type.
"""
type hn_MyUser implements hn_IUser & hn_Node {
  """The ID of the user. It can be used to identify the user."""
  id: ID!
  """
  The username of the user. It is unique and tied with user's profile URL. Example - https://hashnode.com/@username
  """
  username: String!
  """The name of the user."""
  name: String!
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bio: hn_Content
  """The URL to the profile picture of the user."""
  profilePicture: String
  """The social media links of the user. Shown on the user's profile."""
  socialMediaLinks: hn_SocialMediaLinks
  """
  Returns a list of badges that the user has earned. Shown on blogs /badges page. Example - https://iamshadmirza.com/badges
  """
  badges: [hn_Badge!]!
  """
  Publications associated with the user. Includes personal and team publications.
  """
  publications(
    """The maximum number of publications to return in a batch."""
    first: Int!
    """The cursor to start the query from."""
    after: String
    """Filter to apply to the publications."""
    filter: hn_UserPublicationsConnectionFilter
  ): hn_UserPublicationsConnection!
  """Returns the list of posts the user has published."""
  posts(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
    """The sort direction for the posts based on the publish dates."""
    sortBy: hn_UserPostsSort = DATE_PUBLISHED_DESC
    """The filters to be applied to the post list."""
    filter: hn_UserPostConnectionFilter
  ): hn_UserPostConnection!
  """
  The number of users that follow the requested user. Visible in the user's profile.
  """
  followersCount: Int!
  """
  The number of users that this user is following. Visible in the user's profile.
  """
  followingsCount: Int!
  """The tagline of the user. Shown on the user's profile below the name."""
  tagline: String
  """The date the user joined Hashnode."""
  dateJoined: DateTime
  """The location of the user."""
  location: String
  """
  The availability of the user based on tech stack and interests. Shown on the "I am available for" section in user's profile.
  """
  availableFor: String
  """Returns a list of tags that the user follows."""
  tagsFollowing: [hn_Tag!]!
  """Whether or not the user is an ambassador."""
  ambassador: Boolean! @deprecated(reason: "Ambassadors program no longer active. Will be removed after 02/01/2024")
  provider: String
  """Whether or not the user is deactivated."""
  deactivated: Boolean!
  """
  A list of beta features that the user has access to. Only available to the authenticated user.
  """
  betaFeatures: [hn_BetaFeature!]!
  """
  Hashnode users are subscribed to a newsletter by default. This field can be used to unsubscribe from the newsletter. Only available to the authenticated user.
  """
  unsubscribeCode: String
  """Email address of the user. Only available to the authenticated user."""
  email: String
  """The users who are following this user"""
  followers(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
  """The users which this user is following"""
  follows(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
}

"""
Connection to get list of publications.
Returns a list of edges which contains the publications and cursor to the last item of the previous page.
"""
type hn_UserPublicationsConnection implements hn_Connection {
  """A list of edges of publications connection."""
  edges: [hn_UserPublicationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total amount of publications taking into account the filter."""
  totalDocuments: Int!
}

"""
An edge that contains a node of type publication and cursor to the node.
"""
type hn_UserPublicationsEdge implements hn_Edge {
  """Node containing the publication."""
  node: hn_Publication!
  """The cursor to the node."""
  cursor: String!
  """The role of the user in the publication."""
  role: hn_UserPublicationRole!
}

"""The role of the user in the publication."""
enum hn_UserPublicationRole {
  """
  The owner is the creator of the publication and can do all things, including delete publication.
  """
  OWNER
  """
  The editor has access to the publication dashboard to customize the blog and approve/reject posts.
  They also have access to the member panel to add/modify/remove members. Editors cannot remove other editors or update their roles.
  """
  EDITOR
  """
  Contributors can join the publication and contribute an article. They cannot directly publish a new article.
  """
  CONTRIBUTOR
}

"""Available social media links."""
type hn_SocialMediaLinks {
  """The user's website."""
  website: String
  """The user's GitHub profile."""
  github: String
  """The user's Twitter profile."""
  twitter: String
  """The user's Instagram profile."""
  instagram: String
  """The user's Facebook profile."""
  facebook: String
  """The user's StackOverflow profile."""
  stackoverflow: String
  """The user's LinkedIn profile."""
  linkedin: String
  """The user's YouTube profile."""
  youtube: String
}

"""A badge that the user has earned."""
type hn_Badge implements hn_Node {
  """The ID of the badge."""
  id: ID!
  """The name of the badge."""
  name: String!
  """The description of the badge."""
  description: String
  """The image of the badge."""
  image: String!
  """The date the badge was earned."""
  dateAssigned: DateTime
  """Link to badge page on Hashnode."""
  infoURL: String
  """A flag to determine if the badge is hidden."""
  suppressed: Boolean
}

"""Filter to apply to the publications."""
input hn_UserPublicationsConnectionFilter {
  """
  Only include publication in which the user has one of the provided roles.
  """
  roles: [hn_UserPublicationRole!]
  """Only return pro publications."""
  isPro: Boolean
}

"""Payload for the toggleFollowingUser mutation."""
type hn_ToggleFollowUserPayload {
  """The user that was followed/unfollowed."""
  user: hn_User
}

"""
Connection to get list of top commenters. Contains a list of edges containing nodes.
Each node is a user who commented recently.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_CommenterUserConnection implements hn_Connection {
  """A list of edges of commenters."""
  edges: [hn_UserEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
}

"""Contains a node of type user and cursor for pagination."""
type hn_UserEdge implements hn_Edge {
  """The node containing User information"""
  node: hn_User!
  """The cursor for use in pagination."""
  cursor: String!
}

"""Filter for the posts of a user."""
enum hn_UserPostsAuthorTypeFilter {
  """Only posts that are authored by the user."""
  AUTHOR_ONLY
  """Only posts that are co-authored by the user."""
  CO_AUTHOR_ONLY
}

"""Sorting for the posts of a user."""
enum hn_UserPostsSort {
  """Newest posts first."""
  DATE_PUBLISHED_DESC
  """Oldest posts first."""
  DATE_PUBLISHED_ASC
}

"""Filter for the posts of a user."""
input hn_UserPostConnectionFilter {
  """
  Only include posts that reference the provided tag IDs.
  
  
  Filtering by `tags` and `tagSlugs` will filter posts that match either of those two filters.
  """
  tags: [ID!]
  """
  Only include posts that reference the provided tag slugs.
  
  Filtering by `tags` and `tagSlugs` will filter posts that match either of those two filters.
  """
  tagSlugs: [String!]
  """
  Filtering by publication IDs will return posts from the author within the publication.
  """
  publications: [ID!]
  """
  Filtering by author status. Either all posts the user has authored or co-authored are returned or the authored posts only.
  """
  authorType: hn_UserPostsAuthorTypeFilter
}

"""
Contains basic information about the tag.
A tag is a label that categorizes posts with similar topics.
"""
interface hn_ITag {
  """The ID of the tag."""
  id: ID!
  """The name of the tag. Shown in tag page."""
  name: String!
  """
  The slug of the tag. Used to access tags feed.  Example https://hashnode.com/n/graphql
  """
  slug: String!
  """The logo of the tag. Shown in tag page."""
  logo: String
  """The tagline of the tag."""
  tagline: String
  """
  Information about the tag. Contains markdown html and text version of the tag's info.
  """
  info: hn_Content
  """Total number of users following this tag."""
  followersCount: Int!
  """Alltime usage count of this tag in posts."""
  postsCount: Int!
}

type hn_Tag implements hn_ITag & hn_Node {
  """The ID of the tag."""
  id: ID!
  """The name of the tag. Shown in tag page."""
  name: String!
  """
  The slug of the tag. Used to access tags feed.  Example https://hashnode.com/n/graphql
  """
  slug: String!
  """The logo of the tag. Shown in tag page."""
  logo: String
  """The tagline of the tag."""
  tagline: String
  """
  Information about the tag. Contains markdown html and text version of the tag's info.
  """
  info: hn_Content
  """Total number of users following this tag."""
  followersCount: Int!
  """Alltime usage count of this tag in posts."""
  postsCount: Int!
  """Paginated list of posts published under this tag"""
  posts(
    """The number of posts in particular tag to return per page."""
    first: Int!
    """The cursor after which the posts are to be returned."""
    after: String
    """The cursor before which the posts are to be returned."""
    filter: hn_TagPostConnectionFilter!
  ): hn_FeedPostConnection!
}

"""
Contains basic information about the tag returned by popularTags query.
"""
type hn_PopularTag implements hn_ITag & hn_Node {
  """The ID of the tag."""
  id: ID!
  """The name of the tag. Shown in tag page."""
  name: String!
  """
  The slug of the tag. Used to access tags feed.  Example https://hashnode.com/n/graphql
  """
  slug: String!
  """The logo of the tag. Shown in tag page."""
  logo: String
  """The tagline of the tag."""
  tagline: String
  """
  Information about the tag. Contains markdown html and text version of the tag's info.
  """
  info: hn_Content
  """Total number of users following this tag."""
  followersCount: Int!
  """Alltime usage count of this tag in posts."""
  postsCount: Int!
  """The number of posts published in the given period that use this tag."""
  postsCountInPeriod: Int!
}

"""The field by which to sort the tag feed."""
enum hn_TagPostsSort {
  """
  Determinate how to sort the results. Defaults to recents, used in New tag feed.
  """
  recent
  """Sorts by popularity, used in Hot tag feed."""
  popular
  """
  Trending is particular used to fetch top posts trending within a week time under a tag
  """
  trending
}

input hn_TagPostConnectionFilter {
  """Sort tag feed by recents, popular, or trending. Defaults to recents."""
  sortBy: hn_TagPostsSort
}

"""Contains a tag and a cursor for pagination."""
type hn_PopularTagEdge implements hn_Edge {
  """The node holding the Tag information"""
  node: hn_PopularTag!
  """A cursor for use in pagination."""
  cursor: String!
}

"""Contains a tag and a cursor for pagination."""
type hn_TagEdge implements hn_Edge {
  """The node holding the Tag information"""
  node: hn_Tag!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
Contains basic information about the publication.
A publication is a blog that can be created for a user or a team.
"""
type hn_Publication implements hn_Node {
  """The ID of the publication."""
  id: ID!
  """
  The title of the publication.
  Title is used as logo if logo is not provided.
  """
  title: String!
  """The title of the publication. Shown in blog home page."""
  displayTitle: String
  """
  The description of the publication, used in og:description meta tag. Fall backs to Publication.about.text if no SEO description is provided.
  """
  descriptionSEO: String
  """The about section of the publication."""
  about: hn_Content
  """
  The domain of the publication. Used to access publication. Example https://johndoe.com
  """
  url: String!
  """The canonical URL of the publication."""
  canonicalURL: String!
  """The author who owns the publication."""
  author: hn_User!
  """The favicon of the publication. Used in browser tab."""
  favicon: String
  """
  Color code of the header color of the publication. Used to style header of blog.
  """
  headerColor: String
  """The meta tags associated with the publication."""
  metaTags: String
  """The integrations connected to the publication."""
  integrations: hn_PublicationIntegrations
  """
  The publication preferences around layout, theme and other personalisations.
  """
  preferences: hn_Preferences!
  """Total number of followers of the publication."""
  followersCount: Int
  """
  Summary of the contact information and information related to copyrights, usually used in German-speaking countries.
  """
  imprint: String @deprecated(reason: "Use `imprintV2` instead. Will be removed after 16/12/2023.")
  """
  Summary of the contact information and information related to copyrights, usually used in German-speaking countries.
  """
  imprintV2: hn_Content
  """True if the publication is a team publication and false otherwise."""
  isTeam: Boolean!
  """Links to the publication's social media profiles."""
  links: hn_PublicationLinks
  """Domain information of the publication."""
  domainInfo: hn_DomainInfo!
  """
  A flag to indicate if the publication is using Headless CMS. This can be used to check if the post redirect needs authentication.
  """
  isHeadless: Boolean!
  """Returns series by slug in the publication."""
  series(slug: String!): hn_Series
  """Returns the list of series in the publication."""
  seriesList(
    """The number of series to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
  ): hn_SeriesConnection!
  """Returns the list of posts in the publication."""
  posts(
    """The number of posts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the post list."""
    filter: hn_PublicationPostConnectionFilter
  ): hn_PublicationPostConnection!
  """Returns the pinned post of the publication."""
  pinnedPost: hn_Post
  """Returns the post with the given slug."""
  post(slug: String!): hn_Post
  """Information about the publication's Open Graph metadata i.e. image."""
  ogMetaData: hn_OpenGraphMetaData!
  """
  Object containing information about beta features enabled for the publication.
  """
  features: hn_PublicationFeatures!
  """Returns the list of drafts in the publication."""
  drafts(
    """The number of drafts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the draft list."""
    filter: hn_PublicationDraftConnectionFilter
  ): hn_DraftConnection!
  """Returns the scheduled drafts of the publication."""
  scheduledDrafts(
    """The number of scheduled drafts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the draft list."""
    filter: hn_PublicationDraftConnectionFilter
  ): hn_DraftConnection!
  """Returns the static page with the given slug."""
  staticPage(
    """The slug of the static page to retrieve."""
    slug: String!
  ): hn_StaticPage
  """Returns a list of static pages in the publication."""
  staticPages(
    """The number of static pages to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
  ): hn_StaticPageConnection!
  """Returns the list of submitted drafts in the publication."""
  submittedDrafts(
    """The number of submitted drafts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the draft list."""
    filter: hn_PublicationDraftConnectionFilter
  ): hn_DraftConnection!
  """
  Returns true if GitHub backup is configured and active and false otherwise.
  """
  isGitHubBackupEnabled: Boolean!
  """Determines the structure of the post URLs."""
  urlPattern: hn_UrlPattern!
  """Returns the publication's email imports, used with newsletter feature."""
  emailImport: hn_EmailImport
  """Configured redirection rules for the publication."""
  redirectionRules: [hn_RedirectionRule!]!
  """Whether the publication has earned any badges or not."""
  hasBadges: Boolean!
  """Contains the publication's sponsorships information."""
  sponsorship: hn_PublicationSponsorship
  """Publications that are recommended by this publication."""
  recommendedPublications: [hn_UserRecommendedPublicationEdge!]!
  """The total amount of recommended publications by this publication."""
  totalRecommendedPublications: Int!
  """Publications that are recommending this publication."""
  recommendingPublications(
    """Size of the page."""
    pageSize: Int!
    """Page number."""
    page: Int!
  ): hn_PublicationUserRecommendingPublicationConnection!
}

type hn_UserRecommendedPublicationEdge {
  """
  The publication that is recommended by the publication this connection originates from.
  """
  node: hn_Publication!
  """
  The amount of followers the publication referenced in `node` has gained by recommendations from the publication.
  """
  totalFollowersGained: Int!
}

type hn_PublicationUserRecommendingPublicationConnection implements hn_PageConnection {
  """A list of edges containing Post information"""
  edges: [hn_UserRecommendingPublicationEdge!]!
  """Publications recommending this publication."""
  nodes: [hn_Publication!]!
  """Information for page based pagination in Post connection."""
  pageInfo: hn_OffsetPageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

type hn_UserRecommendingPublicationEdge {
  """
  The publication that is recommending the publication this connection originates from.
  """
  node: hn_Publication!
  """
  The amount of followers the publication has gained by recommendations from the publication referenced in `node`.
  """
  totalFollowersGained: Int!
}

type hn_RSSImport implements hn_Node {
  id: ID!
  """The URL pointing to the RSS feed."""
  rssURL: String!
}

"""
Contains the publication's Sponsorship information.
User can sponsor their favorite publications and pay them directly using Stripe.
"""
type hn_PublicationSponsorship {
  """
  The content shared by author of the publication to their sponsors.
  This is used as note to inform that author is open for sponsorship.
  """
  content: hn_Content
  """The Stripe configuration of the publication's Sponsorship."""
  stripe: hn_StripeConfiguration
}

"""Contains the publication's Stripe configuration."""
type hn_StripeConfiguration {
  """A flag indicating if the publication is connected to Stripe."""
  connected: Boolean!
  """The Stripe account ID of the publication."""
  accountId: String
  """The country of origin of the publication."""
  country: String
}

type hn_RedirectionRule {
  """The type of the redirection rule."""
  type: hn_HttpRedirectionType!
  """The source URL of the redirection rule."""
  source: String!
  """The destination URL of the redirection rule."""
  destination: String!
}

enum hn_HttpRedirectionType {
  """A temporary redirect that corresponds to the 307 HTTP status code."""
  TEMPORARY
  """A permanent redirect that corresponds to the 308 HTTP status code."""
  PERMANENT
}

"""
Connection to get list of posts in publications.
Returns a list of edges which contains the posts in publication and cursor to the last item of the previous page.
"""
input hn_PublicationPostConnectionFilter {
  """
  Filtering by tag slugs and tag IDs will return posts that match either of the filters.
  
  It is an "OR" filter and not an "AND" filter.
  """
  tags: [hn_ObjectId!]
  """
  Filtering by tag slugs and tag IDs will return posts that match either of the filters.
  
  It is an "OR" filter and not an "AND" filter.
  """
  tagSlugs: [String!]
  """Remove pinned post from the result set."""
  excludePinnedPost: Boolean
}

"""
Connection to get list of drafts in publications.
Returns a list of edges which contains the drafts in publication and cursor to the last item of the previous page.
"""
input hn_PublicationDraftConnectionFilter {
  """Search filter will be applied to the title of a draft"""
  search: String
}

"""Contains the publication's beta features."""
type hn_PublicationFeatures {
  """
  Newsletter feature for the publication which adds a `/newsletter` route for collecting subscribers and allows sending out newsletters.
  """
  newsletter: hn_NewsletterFeature!
  """Show the view count for blog posts."""
  viewCount: hn_ViewCountFeature!
  """Show the read time for blog posts."""
  readTime: hn_ReadTimeFeature!
  """Audio player for blog posts."""
  audioBlog: hn_AudioBlogFeature!
  """
  Widget that shows up if a text on a blog post is selected. Allows for easy sharing or copying of the selected text.
  """
  textSelectionSharer: hn_TextSelectionSharerFeature!
  """Individual styling for the publication."""
  customCSS: hn_CustomCSSFeature!
}

"""
Contains the flag indicating if the newsletter feature is enabled or not.
User can enable or disable the newsletter feature from the publication settings.
Shows a newsletter prompt on blog if enabled.
"""
type hn_NewsletterFeature implements hn_Feature {
  """A flag indicating if the newsletter feature is enabled or not."""
  isEnabled: Boolean!
  frequency: hn_NewsletterFrequency
}

enum hn_NewsletterFrequency {
  asap
  weekly
}

"""
Contains the flag indicating if the view count feature is enabled or not.
User can enable or disable the view count feature from the publication settings.
Shows total views on blogs if enabled.
"""
type hn_ViewCountFeature implements hn_Feature {
  """A flag indicating if the view count feature is enabled or not."""
  isEnabled: Boolean!
}

"""
Contains the flag indicating if the read time feature is enabled or not.
User can enable or disable the read time feature from the publication settings.
Shows read time on blogs if enabled.
"""
type hn_ReadTimeFeature implements hn_Feature {
  """A flag indicating if the read time feature is enabled or not."""
  isEnabled: Boolean!
}

"""
Contains the flag indicating if the audio blog feature is enabled or not.
User can enable or disable the audio blog feature from the publication settings.
Shows audio player on blogs if enabled.
"""
type hn_AudioBlogFeature implements hn_Feature {
  """A flag indicating if the audio blog feature is enabled or not."""
  isEnabled: Boolean!
  """The voice type for the audio blog."""
  voiceType: hn_AudioBlogVoiceType!
}

"""
Contains the flag indicating if the text selection sharer feature is enabled or not.
User can enable or disable the text selection sharer feature from the publication settings.
Shows a widget if a text on a blog post is selected. Allows for easy sharing or copying of the selected text.
"""
type hn_TextSelectionSharerFeature implements hn_Feature {
  """
  A flag indicating if the text selection sharer feature is enabled or not.
  """
  isEnabled: Boolean!
}

type hn_CustomCSSFeature implements hn_Feature {
  """A flag indicating if the custom CSS feature is enabled or not."""
  isEnabled: Boolean!
  """CSS that is live."""
  published: hn_CustomCSS
  """CSS that is not published yet."""
  draft: hn_CustomCSS
}

type hn_CustomCSS {
  """Custom CSS that will be applied on the publication homepage."""
  home: String
  """Custom CSS that will be applied on all posts of the publication."""
  post: String
  """
  Custom CSS that will be applied on all static pages of the publication.
  """
  static: String
  """The same as `home` but minified."""
  homeMinified: String
  """The same as `post` but minified."""
  postMinified: String
  """The same as `static` but minified."""
  staticMinified: String
}

enum hn_UrlPattern {
  """
  Post URLs contain the slug (for example `my slug`) and a random id (like `1234`) , e.g. "/my-slug-1234".
  """
  DEFAULT
  """Post URLs only contain the slug, e.g. "/my-slug"."""
  SIMPLE
}

"""Contains publication's layout choices."""
enum hn_PublicationLayout {
  """Changes the layout of blog into stacked list of posts."""
  stacked
  """Changes the layout of blog into grid 3 post cards per row."""
  grid
  """
  Changes the layout of blog into magazine style.
  This is the newest layout.
  """
  magazine
}

"""Contains the publication's domain information."""
type hn_DomainInfo {
  """
  The subdomain of the publication on hashnode.dev.
  
  It will redirect to you custom domain if it is present and ready.
  """
  hashnodeSubdomain: String
  """The domain of the publication."""
  domain: hn_DomainStatus
  """
  The www prefixed domain of the publication. Says if redirect to www domain is configured.
  """
  wwwPrefixedDomain: hn_DomainStatus
}

"""Contains the publication's domain status."""
type hn_DomainStatus {
  """The host of the publication domain."""
  host: String!
  """A flag indicating if the publication domain is ready."""
  ready: Boolean!
}

"""
Contains the publication's preferences for layout, theme and other personalisations.
"""
type hn_Preferences {
  """The publication's logo url."""
  logo: String
  """
  The publication's darkmode preferences. Can be used to load blog in dark mode by default and add a custom dark mode logo.
  """
  darkMode: hn_DarkModePreferences
  """An object containing pages enabled for the publication."""
  enabledPages: hn_PagesPreferences
  """The items in the publication's navigation bar."""
  navbarItems: [hn_PublicationNavbarItem!]!
  """The selected publication's layout, can be stacked, grid or magazine."""
  layout: hn_PublicationLayout
  """
  A flag indicating if the hashnode's footer branding is disabled for the publication.
  """
  disableFooterBranding: Boolean
  """
  A flag indicating if subscription popup needs to be shown to be shown for the publication
  """
  isSubscriptionModalDisabled: Boolean
}

"""Contains the publication's navbar items."""
type hn_PublicationNavbarItem {
  """The unique identifier of the navbar item."""
  id: ID!
  """The label of the navbar item."""
  label: String
  """The URL of the navbar item."""
  url: String
  """The order of the navbar item."""
  priority: Int
  """The type of the navbar item, can be series, link or page."""
  type: hn_PublicationNavigationType!
  """The series added to the navbar item."""
  series: hn_Series
  """The static page added to the navbar item."""
  page: hn_StaticPage
}

"""The type of the navbar item, can be series, link or page."""
enum hn_PublicationNavigationType {
  """The navbar item is a series."""
  series
  """The navbar item is a link."""
  link
  """The navbar item is a static page."""
  page
}

"""
Contains the preferences publication's autogenerated pages.
Used to enable or disable pages like badge, newsletter and members.
"""
type hn_PagesPreferences {
  """A flag indicating if the publication's badge page is enabled."""
  badges: Boolean
  """A flag indicating if the publication's newsletter page is enabled."""
  newsletter: Boolean
  """A flag indicating if the publication's member page is enabled."""
  members: Boolean
}

"""Contains the publication's dark mode preferences."""
type hn_DarkModePreferences {
  """A flag indicating if the dark mode is enabled for the publication."""
  enabled: Boolean
  """The custom dark mode logo of the publication."""
  logo: String
}

"""
Contains the publication's integrations.
Used to connect the publication with third party services like Google Analytics, Facebook Pixel, etc.
"""
type hn_PublicationIntegrations {
  """FB Pixel ID for integration with Facebook Pixel."""
  fbPixelID: String
  """Fathom Analytics Site ID for integration with Fathom Analytics."""
  fathomSiteID: String
  """
  A flag indicating if the custom domain is enabled for integration with Fathom Analytics.
  """
  fathomCustomDomainEnabled: Boolean
  """Custom domain for integration with Fathom Analytics."""
  fathomCustomDomain: String
  """Hotjar Site ID for integration with Hotjar."""
  hotjarSiteID: String
  """Matomo Site ID for integration with Matomo Analytics."""
  matomoSiteID: String
  """Matomo URL for integration with Matomo Analytics."""
  matomoURL: String
  """Google Analytics Tracking ID for integration with Google Analytics."""
  gaTrackingID: String
  """
  A flag indicating if the custom domain is enabled for integration with Plausible Analytics.
  """
  plausibleAnalyticsEnabled: Boolean
  """
  Web Monetization Payment Pointer for integration with Web Monetization.
  """
  wmPaymentPointer: String
  """The ID for the Hashnode-provided Umami analytics instance."""
  umamiWebsiteUUID: String
}

"""Contains the publication's social media links."""
type hn_PublicationLinks {
  """Twitter URL of the publication."""
  twitter: String
  """Instagram URL of the publication."""
  instagram: String
  """GitHub URL of the publication."""
  github: String
  """Website URL of the publication."""
  website: String
  """Hashnode profile of author of the publication."""
  hashnode: String
  """YouTube URL of the publication."""
  youtube: String
  """Daily.dev URL of the publication."""
  dailydev: String
  """LinkedIn URL of the publication."""
  linkedin: String
  """Mastodon URL of the publication."""
  mastodon: String
}

"""The voice type for the audio blog."""
enum hn_AudioBlogVoiceType {
  """Enum for the female voice type of the audio blog."""
  FEMALE
  """Enum for the male voice type of the audio blog."""
  MALE
}

"""The status of the email import."""
enum hn_EmailImportStatus {
  """Import has been initialized but is not yet in progress."""
  INITIALIZED
  """Import is in progress."""
  IN_PROGRESS
  """Import has to be reviewed by Hashnode. It is not yet reviewed."""
  IN_REVIEW
  """Import was successful. New emails have been imported."""
  SUCCESS
  """There was an error during the import."""
  FAILED
  """The has been rejected. Nothing has been imported."""
  REJECTED
  """The import has been acknowledged by the user."""
  FINISHED
}

"""Contains information about the email import."""
type hn_EmailImport {
  """
  Contains information about the current import example if it is in progress or has finished, date started, etc
  """
  currentImport: hn_EmailCurrentImport
}

"""The input for the email import acknowledgement mutation."""
type hn_EmailCurrentImport {
  """The status of the import"""
  status: hn_EmailImportStatus!
  """The date the import started"""
  importStartedAt: DateTime!
  """The number of subscribers that have been successfully imported"""
  successfullyImported: Int
  """The number of subscribers that have attempted to import"""
  attemptedToImport: Int
  """The filename of the csv file containing emails"""
  filename: String
}

"""Contains a publication and a cursor for pagination."""
type hn_RecommendedPublicationEdge implements hn_Edge {
  """The node holding the Publication information"""
  node: hn_Publication!
  """A cursor for use in pagination."""
  cursor: String!
}

input hn_SubscribeToNewsletterInput {
  """The ID of the publication to subscribe to."""
  publicationId: hn_ObjectId!
  """The email of the subscriber."""
  email: String!
}

input hn_UnsubscribeFromNewsletterInput {
  """The ID of the publication to unsubscribe from."""
  publicationId: hn_ObjectId!
  """The email that is currently subscribed."""
  email: String!
}

enum hn_NewsletterSubscribeStatus {
  PENDING
}

type hn_SubscribeToNewsletterPayload {
  status: hn_NewsletterSubscribeStatus
}

enum hn_NewsletterUnsubscribeStatus {
  UNSUBSCRIBED
}

type hn_UnsubscribeFromNewsletterPayload {
  status: hn_NewsletterUnsubscribeStatus
}

"""
Contains basic information about the post.
A post is a published article on Hashnode.
"""
type hn_Post implements hn_Node {
  """The ID of the post. Used to uniquely identify the post."""
  id: ID!
  """
  The slug of the post. Used as address of the post on blog. Example - https://johndoe.com/my-post-slug
  """
  slug: String!
  """The title of the post."""
  title: String!
  """
  The subtitle of the post. Subtitle is a short description of the post which is also used in SEO if meta tags are not provided.
  """
  subtitle: String
  """Returns the user details of the author of the post."""
  author: hn_User!
  """
  Returns the user details of the co-authors of the post.
  Hashnode users can add up to 4 co-authors as collaborators to their posts.
  This functionality is limited to teams publication.
  """
  coAuthors: [hn_User!]
  """
  Returns list of tags added to the post. Contains tag id, name, slug, etc.
  """
  tags: [hn_Tag!]
  """
  Complete URL of the post including the domain name. Example - https://johndoe.com/my-post-slug
  """
  url: String!
  """Canonical URL set by author in case of republished posts."""
  canonicalUrl: String
  """The publication the post belongs to."""
  publication: hn_Publication
  """Unique ID to identify post, used internally by hashnode."""
  cuid: String
  """
  The cover image preference of the post. Contains cover image URL and other details.
  """
  coverImage: hn_PostCoverImage
  """
  Brief is a short description of the post extracted from the content of the post. It's 250 characters long sanitized string.
  """
  brief: String!
  """The estimated time to read the post in minutes."""
  readTimeInMinutes: Int!
  """
  The number of views on the post. Can be used to show the popularity of the post.
  """
  views: Int!
  """Information of the series the post belongs to."""
  series: hn_Series
  """The number of hearts on the post. Shows how many users liked the post."""
  reactionCount: Int!
  """The number of replies on the post."""
  replyCount: Int!
  """The number of comments on the post."""
  responseCount: Int!
  """Flag to indicate if the post is featured on Hashnode feed."""
  featured: Boolean!
  """
  A list of contributors of the post. Contributors are users who have commented or replied to the post.
  """
  contributors: [hn_User!]! @deprecated(reason: "Will be removed on 10th Oct 2023. Use `commenters` instead.")
  """List of users who have commented on the post."""
  commenters(
    """The number of users to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """
    The sorting option for commenters. Used to sort commenters by popularity or recency.
    """
    sortBy: hn_PostCommenterSortBy
  ): hn_PostCommenterConnection!
  """A list of comments on the post."""
  comments(
    """The number of comments to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """
    The sorting option for comments. Used to sort comments by top or recent.
    """
    sortBy: hn_PostCommentSortBy
  ): hn_PostCommentConnection!
  """
  Flag to indicate if the post is bookmarked by the requesting user.
  
  Returns `false` if the user is not authenticated.
  """
  bookmarked: Boolean!
  """
  Content of the post. Contains HTML and Markdown version of the post content.
  """
  content: hn_Content!
  """A list of users who liked the post."""
  likedBy(
    """The number of users to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    filter: hn_PostLikerFilter
  ): hn_PostLikerConnection!
  """
  The date and time the post was featured. Used along with featured flag to determine if the post is featured.
  """
  featuredAt: DateTime
  """The date and time the post was published."""
  publishedAt: DateTime!
  """The date and time the post was last updated."""
  updatedAt: DateTime
  """
  Preference settings for the post. Contains information about if the post is pinned to blog, comments are disabled, etc.
  """
  preferences: hn_PostPreferences!
  """
  Returns male and female audio url of the post. Available in case the Audioblog is enabled.
  """
  audioUrls: hn_AudioUrls
  """
  SEO information of the post. Contains title and description used in meta tags.
  """
  seo: hn_SEO
  """
  OG meta-data of the post. Contains image url used in open graph meta tags.
  """
  ogMetaData: hn_OpenGraphMetaData
  """
  A flag to indicate if the post contains LaTeX. Latex is used to write mathematical equations.
  """
  hasLatexInPost: Boolean!
  """
  Wether or not the authenticated user is following this post.
  
  Returns `null` if the user is not authenticated.
  """
  isFollowed: Boolean
  """Wether or not the post has automatically been published via RSS feed."""
  isAutoPublishedFromRSS: Boolean!
  """Post feature-related fields."""
  features: hn_PostFeatures!
}

type hn_PostFeatures {
  tableOfContents: hn_TableOfContentsFeature!
  badges: hn_PostBadgesFeature!
}

type hn_TableOfContentsFeature implements hn_Feature {
  """Wether or not ser has chosen to show a table of contents on the post."""
  isEnabled: Boolean!
  """The content of the table of contents."""
  items: [hn_TableOfContentsItem!]!
}

type hn_PostBadgesFeature implements hn_Feature {
  """Wether or not the user has chosen to show badges on the post."""
  isEnabled: Boolean!
  items: [hn_PostBadge!]!
}

type hn_TableOfContentsItem implements hn_Node {
  """Unique identifier."""
  id: ID!
  """The level of nesting. Refers to the heading level in the post."""
  level: Int!
  """The slug of the referenced headline."""
  slug: String!
  """The title of the referenced headline."""
  title: String!
  """
  ID of the `TableOfContentsItem` that is one level higher in the hierarchy. `null` if this is a top level item.
  """
  parentId: ID
}

type hn_PostBadge implements hn_Node {
  """Unique identifier."""
  id: ID!
  """The type of the badge."""
  type: hn_PostBadgeType!
}

enum hn_PostBadgeType {
  FEATURED_HASHNODE
  FEATURED_DAILY_DOT_DEV
}

input hn_PostLikerFilter {
  """Only return likes from users with the given user IDs."""
  userIds: [ID!]
}

"""
Used when Audioblog feature is enabled. Contains URLs to the audioblog of the post.
"""
type hn_AudioUrls {
  """Male version of audio url of the post."""
  male: String
  """Female version of audio url of the post."""
  female: String
}

"""
Contains Post preferences. Used to determine if the post is pinned to blog, comments are disabled, or cover image is sticked to bottom.
"""
type hn_PostPreferences {
  """
  A flag to indicate if the post is pinned to blog. Pinned post is shown on top of the blog.
  """
  pinnedToBlog: Boolean!
  """A flag to indicate if the comments are disabled for the post."""
  disableComments: Boolean!
  """
  A flag to indicate if the cover image is shown below title of the post. Default position of cover is top of title.
  """
  stickCoverToBottom: Boolean!
  """Wether or not the post is hidden from the Hashnode community."""
  isDelisted: Boolean!
}

"""
Sorting options for commenters. Used to sort commenters by popularity or recency.
"""
enum hn_PostCommenterSortBy {
  """Sorts commenters by popularity."""
  POPULAR
  """Sorts commenters by recency."""
  RECENT
}

"""
Connection for commenters (users). Contains a list of edges containing nodes.
Each node holds commenter.
Page info contains information about pagination like hasNextPage and endCursor.
Total documents contains the total number of commenters.
"""
type hn_PostCommenterConnection implements hn_Connection {
  """A list of edges containing commenters as nodes."""
  edges: [hn_PostCommenterEdge!]!
  """Information about pagination in a connection."""
  pageInfo: hn_PageInfo!
  """Total number of nodes available i.e. number of commenters."""
  totalDocuments: Int!
}

"""
A commenter on the post. Contains information about the user who commented.
"""
type hn_PostCommenterEdge implements hn_Edge {
  """The commenter on the post."""
  node: hn_User!
  """The cursor for this node used for pagination."""
  cursor: String!
}

"""Sorting options for comments. Used to sort comments by top or recent."""
enum hn_PostCommentSortBy {
  """Sorts comments by popularity."""
  TOP
  """Sorts comments by recency."""
  RECENT
}

"""
Connection for comments. Contains a list of edges containing nodes.
Each node holds a comment.
Page info contains information about pagination like hasNextPage and endCursor.
Total documents contains the total number of comments.
"""
type hn_PostCommentConnection implements hn_Connection {
  """A list of edges containing comments as nodes."""
  edges: [hn_PostCommentEdge!]!
  """Information about pagination in a connection."""
  pageInfo: hn_PageInfo!
  """Total number of nodes available i.e. number of comments."""
  totalDocuments: Int!
}

"""
A comment on the post. Contains information about the content of the comment, user who commented, etc.
"""
type hn_PostCommentEdge implements hn_Edge {
  """The comment on the post."""
  node: hn_Comment!
  """The cursor for this node used for pagination."""
  cursor: String!
}

"""
A user who liked the post. Contains information about the user and number of reactions added by the user.
"""
type hn_PostLikerEdge implements hn_Edge {
  """The user who liked the post."""
  node: hn_User!
  """The cursor for this node used for pagination."""
  cursor: String!
  """The number of reaction added by the user."""
  reactionCount: Int!
}

"""
Connection for users who liked the post. Contains a list of edges containing nodes.
Each node is a user who liked the post.
Page info contains information about pagination like hasNextPage and endCursor.
Total documents contains the total number of users who liked the post.
"""
type hn_PostLikerConnection implements hn_Connection {
  """A list of edges containing users as nodes"""
  edges: [hn_PostLikerEdge!]!
  """Information about pagination in a connection."""
  pageInfo: hn_PageInfo!
  """
  Total number of nodes available i.e. number of users who liked the post.
  """
  totalDocuments: Int!
}

"""Contains information about the cover image of the post."""
type hn_PostCoverImage {
  """The URL of the cover image."""
  url: String!
  """Indicates whether the cover image is in portrait orientation."""
  isPortrait: Boolean!
  """Provides attribution information for the cover image, if available."""
  attribution: String
  """The name of the photographer who captured the cover image."""
  photographer: String
  """True if the image attribution should be hidden."""
  isAttributionHidden: Boolean!
}

"""Contains a post and a cursor for pagination."""
type hn_PostEdge implements hn_Edge {
  """The node holding the Post information"""
  node: hn_Post!
  """A cursor for use in pagination."""
  cursor: String!
}

"""The author type of a post from a user's perspective"""
enum hn_PostAuthorType {
  """The user has authored the post."""
  AUTHOR
  """The user is a co-author of post."""
  CO_AUTHOR
}

"""Contains a post and the author status."""
type hn_UserPostEdge {
  """The node holding the Post information."""
  node: hn_Post!
  """Indicates weather the user is the author or co-author of the post."""
  authorType: hn_PostAuthorType!
}

"""
Connection for posts within a feed. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_FeedPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
}

"""
Connection for posts within a publication search. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_SearchPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
}

"""
Connection for posts within a series. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_SeriesPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
Connection for posts within a publication. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_PublicationPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
Connection for posts written by a single user. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_UserPostConnection implements hn_PageConnection {
  """A list of edges containing Post information"""
  edges: [hn_UserPostEdge!]!
  """A list of posts"""
  nodes: [hn_Post!]!
  """Information for page based pagination in Post connection."""
  pageInfo: hn_OffsetPageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

type hn_PublishPostPayload {
  post: hn_Post
}

type hn_UpdatePostPayload {
  post: hn_Post
}

"""
Contains information about cover image options of the post. Like URL of the cover image, attribution, etc.
"""
input hn_CoverImageOptionsInput {
  """The URL of the cover image."""
  coverImageURL: String
  """
  A flag to indicate if the cover attribution is hidden, used when cover was chosen from unsplash.
  """
  isCoverAttributionHidden: Boolean
  """Information about the cover image attribution."""
  coverImageAttribution: String
  """
  The name of the cover image photographer, used when cover was chosen from unsplash.
  """
  coverImagePhotographer: String
  """A flag to indicate if the cover image is sticked to bottom."""
  stickCoverToBottom: Boolean
}

"""
Contains information about meta tags of the post. Used for SEO purpose.
"""
input hn_MetaTagsInput {
  """The title of the post used in og:title for SEO."""
  title: String
  """The description of the post used in og:description for SEO."""
  description: String
  """The image URL of the post used in og:image for SEO."""
  image: String
}

input hn_PublishPostTagInput {
  """
  A tag id that is referencing an existing tag.
  
  Either this or name and slug should be provided. If both are provided, the id will be used.
  """
  id: hn_ObjectId
  """
  A slug of a new tag to create.
  
  Either this and name or id should be provided. If both are provided, the id will be used.
  """
  slug: String
  """
  A name of a new tag to create.
  
  Either this and slug or id should be provided. If both are provided, the id will be used.
  """
  name: String
}

input hn_UpdatePostSettingsInput {
  """A flag to indicate if the post contains table of content"""
  isTableOfContentEnabled: Boolean
  """
  A flag to indicate if the post is delisted, used to hide the post from public feed.
  """
  delisted: Boolean
  """Whether or not comments should be disabled."""
  disableComments: Boolean
  """Pin the post to the blog homepage."""
  pinToBlog: Boolean
}

input hn_PublishPostSettingsInput {
  """A flag to indicate if the post is scheduled."""
  scheduled: Boolean
  """A flag to indicate if the post contains table of content"""
  enableTableOfContent: Boolean
  """Flag to indicate if the slug is overridden by the user."""
  slugOverridden: Boolean
  """Wether to send a newsletter for this post."""
  isNewsletterActivated: Boolean
  """
  A flag to indicate if the post is delisted, used to hide the post from public feed.
  """
  delisted: Boolean
}

"""Contains information about the post to be published."""
input hn_PublishPostInput {
  """The title of the post."""
  title: String!
  """The subtitle of the post."""
  subtitle: String
  """The ID of publication the post belongs to."""
  publicationId: hn_ObjectId!
  """Content of the post in markdown format."""
  contentMarkdown: String!
  """Date when the post is published."""
  publishedAt: DateTime
  """Options for the cover image of the post."""
  coverImageOptions: hn_CoverImageOptionsInput
  """Slug of the post."""
  slug: String
  """
  The URL of the original article if the post is imported from an external source.
  """
  originalArticleURL: String
  """A list of tags added to the post."""
  tags: [hn_PublishPostTagInput!]!
  """A flag to indicate if the comments are disabled for the post."""
  disableComments: Boolean
  """
  Information about the meta tags added to the post, used for SEO purpose.
  """
  metaTags: hn_MetaTagsInput
  """
  Publish the post on behalf of another user who is a member of the publication.
  
  Only applicable for team publications.
  """
  publishAs: hn_ObjectId
  """Providing a seriesId will add the post to that series."""
  seriesId: hn_ObjectId
  """
  Settings for the post like table of contents and newsletter activation.
  """
  settings: hn_PublishPostSettingsInput
  """Ids of the co-authors of the post."""
  coAuthors: [hn_ObjectId!]
}

input hn_UpdatePostInput {
  """The id of the post to update."""
  id: ID!
  """The new title of the post"""
  title: String
  """The subtitle of the post"""
  subtitle: String
  """The publication the post is published to."""
  contentMarkdown: String
  """Backdated publish date."""
  publishedAt: DateTime
  """Options for the cover image of the post."""
  coverImageOptions: hn_CoverImageOptionsInput
  """
  Slug of the post. Only if you want to override the slug that will be generated based on the title.
  """
  slug: String
  """Canonical URL of the original article."""
  originalArticleURL: String
  """
  Tags to add to the post. New tags will be created if they don't exist. It overrides the existing tags.
  """
  tags: [hn_PublishPostTagInput!]
  """
  Information about the meta tags added to the post, used for SEO purpose.
  """
  metaTags: hn_MetaTagsInput
  """
  Set a different author for the post than the requesting user.
  Must be a member of the publication.
  """
  publishAs: hn_ObjectId
  """
  Update co-authors of the post.
  Must be a member of the publication.
  """
  coAuthors: [hn_ObjectId!]
  """
  Providing a seriesId will add the post to that series.
  Must be a series of the publication.
  """
  seriesId: hn_ObjectId
  """Whether or not to enable the table of content."""
  settings: hn_UpdatePostSettingsInput
  """If the publication should be changed this is the new Publication ID"""
  publicationId: hn_ObjectId
}

input hn_AddPostToSeriesInput {
  """The ID of the post to be added to the series."""
  postId: hn_ObjectId!
  """The ID of the series to which the post is to be added."""
  seriesId: hn_ObjectId!
}

type hn_AddPostToSeriesPayload {
  """The series to which the post was added."""
  series: hn_Series
}

"""Contains information about type of feed to be returned."""
enum hn_FeedType {
  """
  Returns only posts of the users you follow or publications you have subscribed to.
  
  Note: You have to be authenticated to use this feed type.
  """
  FOLLOWING
  """
  Returns only posts based on users following and interactions.
  
  Personalised feed is curated per requesting user basis.
  """
  PERSONALIZED
  """Returns posts which were published recently, sorted based on recency."""
  RECENT
  """Returns posts based on old personalization algorithm."""
  RELEVANT
  """Returns posts which were featured, sorted based on recency."""
  FEATURED
  """
  Returns posts which were bookmarked by the user, sorted based on recency.
  """
  BOOKMARKS
  """Returns posts which were viewed by the user, sorted based on recency."""
  READING_HISTORY
}

input hn_FeedFilter {
  """The type of feed to be returned."""
  type: hn_FeedType
  """
  Adds a filter to return posts with minimum number of minutes required to read the post.
  """
  minReadTime: Int
  """
  Adds a filter to return posts with maximum number of minutes required to read the post.
  """
  maxReadTime: Int
  """Adds a filter to return posts with tagged with provided tags only."""
  tags: [hn_ObjectId!]
}

input hn_SearchPostsOfPublicationFilter {
  """The query to be searched in post."""
  query: String!
  """The ID of publications to search from."""
  publicationId: hn_ObjectId!
}

"""
Contains basic information about the comment.
A comment is a response to a post.
"""
type hn_Comment implements hn_Node {
  """The ID of the comment."""
  id: ID!
  """The content of the comment in markdown and html format."""
  content: hn_Content!
  """The author of the comment."""
  author: hn_User!
  """Returns a list of replies to the comment."""
  replies(
    """The number of replies to return. Max is 50."""
    first: Int!
    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): hn_CommentReplyConnection!
  """The date the comment was created."""
  dateAdded: DateTime!
  """
  A unique string identifying the comment. Used as element id in the DOM on hashnode blogs.
  """
  stamp: String
  """
  Total number of reactions on the comment. Reactions are hearts added to any comment.
  """
  totalReactions: Int!
  """
  Total number of reactions on the comment by the authenticated user. User must be authenticated to use this field.
  """
  myTotalReactions: Int!
}

"""
Connection to get list of replies to a comment.
Returns a list of edges which contains the posts in publication and cursor to the last item of the previous page.
"""
type hn_CommentReplyConnection implements hn_Connection {
  """
  A list of edges containing nodes in the connection.
  A node contains a reply to a comment.
  """
  edges: [hn_CommentReplyEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""An edge that contains a node of type reply and cursor to the node."""
type hn_CommentReplyEdge implements hn_Edge {
  """The node containing a reply to a comment."""
  node: hn_Reply!
  """A cursor to the last item of the previous page."""
  cursor: String!
}

"""
Contains basic information about the reply.
A reply is a response to a comment.
"""
type hn_Reply implements hn_Node {
  """The ID of the reply."""
  id: ID!
  """The content of the reply in markdown and html format."""
  content: hn_Content!
  """The author of the reply."""
  author: hn_User!
  """The date the reply was created."""
  dateAdded: DateTime!
  """
  A unique string identifying the reply. Used as element id in the DOM on hashnode blogs.
  It can be used to scroll to the reply in browser.
  """
  stamp: String
  """
  Total number of reactions on the reply. Reactions are hearts added to any reply.
  """
  totalReactions: Int!
  """
  Total number of reactions on the reply by the authenticated user. User must be authenticated to use this field.
  """
  myTotalReactions: Int!
}

"""
Contains basic information about the series.
A series is a collection of posts that are related to each other.
"""
type hn_Series implements hn_Node {
  """The ID of the series."""
  id: ID!
  """The name of the series. Shown in series page."""
  name: String!
  """The date and time the series was created."""
  createdAt: DateTime!
  """
  The description of the series. Contains markdown and html version of the series's description.
  """
  description: hn_Content
  """The cover image of the series."""
  coverImage: String
  """Returns the user who is author of the series."""
  author: hn_User!
  """Unique identifier for the series."""
  cuid: ID
  """
  The slug of the series. Used to access series page.  Example https://johndoe.com/series/series-slug
  """
  slug: String!
  """
  The sort order of the series, determines if the latest posts should appear first or last in series.
  """
  sortOrder: hn_SortOrder!
  """Returns a list of posts in the series."""
  posts(
    """The number of posts to return."""
    first: Int!
    """The cursor after which the posts are to be returned."""
    after: String
  ): hn_SeriesPostConnection!
}

"""Contains a Series and a cursor for pagination."""
type hn_SeriesEdge implements hn_Edge {
  """The node holding the Series information"""
  node: hn_Series!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
Connection for Series. Contains a list of edges containing nodes.
Each node is a Series.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_SeriesConnection implements hn_Connection {
  """A list of edges containing Series information"""
  edges: [hn_SeriesEdge!]!
  """Information for pagination in SeriesList connection."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
Contains basic information about the draft.
A draft is a post that is not published yet.
"""
type hn_Draft implements hn_Node {
  """The ID of the draft."""
  id: ID!
  slug: String!
  """
  The title of the draft. It would become the title of the post when published.
  """
  title: String
  """
  The subtitle of the draft. It would become the subtitle of the post when published.
  """
  subtitle: String
  """The author of the draft."""
  author: hn_User!
  """
  Returns the user details of the co-authors of the post.
  Hashnode users can add up to 4 co-authors as collaborators to their posts.
  This functionality is limited to teams publication.
  """
  coAuthors: [hn_User!]
  """
  Returns list of tags added to the draft. Contains tag id, name, slug, etc.
  """
  tags: [hn_Tag!]!
  canonicalUrl: String
  """
  The cover image preference of the draft. Contains cover image URL and other details.
  """
  coverImage: hn_DraftCoverImage
  readTimeInMinutes: Int!
  """Information of the series the draft belongs to."""
  series: hn_Series
  """Content of the draft in HTML and markdown"""
  content: hn_Content
  """The date the draft was updated."""
  dateUpdated: DateTime! @deprecated(reason: "Use updatedAt instead. Will be removed on 26/12/2023.")
  updatedAt: DateTime!
  settings: hn_DraftSettings!
  """
  SEO information of the draft. Contains title and description used in meta tags.
  """
  seo: hn_SEO
  """
  OG meta-data of the draft. Contains image url used in open graph meta tags.
  """
  ogMetaData: hn_OpenGraphMetaData
  """Draft feature-related fields."""
  features: hn_DraftFeatures!
  """Information about the last backup of the draft."""
  lastBackup: hn_DraftBackup
  """The date the draft was last successfully backed up."""
  lastSuccessfulBackupAt: DateTime
  """The date the draft last failed to back up."""
  lastFailedBackupAt: DateTime
}

type hn_DraftSettings {
  """A flag to indicate if the comments are disabled for the post."""
  disableComments: Boolean!
  """
  A flag to indicate if the cover image is shown below title of the post. Default position of cover is top of title.
  """
  stickCoverToBottom: Boolean!
  """Wether or not the post is hidden from the Hashnode community."""
  isDelisted: Boolean!
}

type hn_DraftFeatures {
  tableOfContents: hn_TableOfContentsFeature!
}

type hn_DraftBackup {
  """The status of the backup i.e., success or failure."""
  status: hn_BackupStatus
  """The date the backup was created."""
  at: DateTime
}

"""The status of the backup i.e., success or failure."""
enum hn_BackupStatus {
  """The backup was successful."""
  success
  """The backup failed."""
  failed
}

"""
Connection to get list of drafts.
Returns a list of edges which contains the draft and cursor to the last item of the previous page.
"""
type hn_DraftConnection implements hn_Connection {
  """A list of edges of drafts connection."""
  edges: [hn_DraftEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""Contains information about the cover image of the draft."""
type hn_DraftCoverImage {
  """The URL of the cover image."""
  url: String!
  """Provides attribution information for the cover image, if available."""
  attribution: String
  """The name of the photographer who captured the cover image."""
  photographer: String
  """True if the image attribution should be hidden."""
  isAttributionHidden: Boolean!
}

"""An edge that contains a node of type draft and cursor to the node."""
type hn_DraftEdge implements hn_Edge {
  """A node in the connection containing a draft."""
  node: hn_Draft!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
Contains basic information about the beta feature.
A beta feature is a feature that is not yet released to all users.
"""
type hn_BetaFeature implements hn_Node {
  """The ID of the beta feature."""
  id: ID!
  """The key of the beta feature."""
  key: String!
  """The title of the beta feature."""
  title: String
  """The description of the beta feature."""
  description: String
  """The url of the beta feature."""
  url: String
  """The date the beta feature was created."""
  enabled: Boolean!
}

"""
Contains basic information about the scheduled post.
A scheduled post is a post that is scheduled to be published in the future.
"""
type hn_ScheduledPost implements hn_Node {
  """The ID of the scheduled post."""
  id: ID!
  """The date the scheduled post was created."""
  author: hn_User!
  """Returns the draft associated with the scheduled post."""
  draft: hn_Draft
  """
  The scheduled date for the post to be published. This is the date the post will be published.
  """
  scheduledDate: DateTime!
  """
  Returns user who scheduled the post. This is usually the author of the post.
  """
  scheduledBy: hn_User
  """Returns the publication the post is scheduled for."""
  publication: hn_Publication!
}

input hn_ReschedulePostInput {
  """The Draft ID of the scheduled post."""
  draftId: hn_ObjectId!
  """New scheduled date for the post to be rescheduled."""
  scheduledDate: DateTime!
}

type hn_ScheduledPostPayload {
  """Payload returned in response of reschedulePost mutation."""
  payload: hn_ScheduledPost!
}

"""
Contains basic information about the static page.
Static pages are pages that are written in markdown and can be added to blog.
"""
type hn_StaticPage implements hn_Node {
  """The ID of the static page."""
  id: ID!
  """The title of the static page. Shown in nav bar."""
  title: String!
  """
  The slug of the static page. Used to access static page.  Example https://johndoe.com/my-page
  """
  slug: String!
  """
  Content of the static page. Contains markdown and html version of the static page's content.
  """
  content: hn_Content!
  """
  A flag to determine if the static page is hidden from public or not, this is used to hide the page instead of deleting it.
  """
  hidden: Boolean!
  """Information about the static page's Open Graph metadata i.e. image."""
  ogMetaData: hn_OpenGraphMetaData
  """
  Information about the static page's SEO metadata i.e. title and description.
  """
  seo: hn_SEO
}

"""
Connection to get list of static pages.
Returns a list of edges which contains the static page and cursor to the last item of the previous page.
"""
type hn_StaticPageConnection implements hn_Connection {
  """A list of edges containing nodes in the connection."""
  edges: [hn_StaticPageEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
An edge that contains a node of type static page and cursor to the node.
"""
type hn_StaticPageEdge implements hn_Edge {
  """The node containing a static page."""
  node: hn_StaticPage!
  """A cursor to the last item of the previous page."""
  cursor: String!
}

type hn_Webhook implements hn_Node {
  """The ID of the post. Used to uniquely identify the post."""
  id: ID!
  publication: hn_Publication!
  url: String!
  events: [hn_WebhookEvent!]!
  secret: String!
  createdAt: DateTime!
  updatedAt: DateTime
  """
  Messages that has been sent via this webhook.
  Messages include the request and eventual response.
  """
  messages(
    """The number of items to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
  ): hn_WebhookMessageConnection!
}

enum hn_WebhookEvent {
  POST_PUBLISHED
  POST_UPDATED
  POST_DELETED
  STATIC_PAGE_PUBLISHED
  STATIC_PAGE_EDITED
  STATIC_PAGE_DELETED
}

type hn_WebhookMessageConnection implements hn_Connection {
  edges: [hn_WebhookMessageEdge!]!
  pageInfo: hn_PageInfo!
}

type hn_WebhookMessageEdge implements hn_Edge {
  node: hn_WebhookMessage!
  cursor: String!
}

type hn_WebhookMessage implements hn_Node {
  id: ID!
  url: String!
  event: hn_WebhookEvent!
  """
  True if either the request failed or the response status code was not 2xx.
  """
  isError: Boolean!
  """True if the message was sent as a test."""
  isTest: Boolean!
  """True if the message was resent."""
  isResent: Boolean!
  request: hn_WebhookMessageRequest!
  response: hn_WebhookMessageResponse
  createdAt: DateTime!
}

type hn_WebhookMessageRequest {
  """Unique identifier of the request. Can be used to deduplicate requests."""
  uuid: String!
  headers: String!
  body: String!
  error: hn_WebhookMessageRequestError
}

type hn_WebhookMessageRequestError {
  code: String!
  message: String!
}

type hn_WebhookMessageResponse {
  httpStatus: Int!
  headers: String
  body: String
  """
  The time it took from the moment the request has been send until the first byte of the response has been received.
  """
  timeToFirstByteMilliseconds: Int
}

type HashnodeQuery {
  """Returns the user with the username."""
  hn_user(
    """The username of the user to retrieve."""
    username: String!
  ): hn_User
  """
  Returns users who have most actively participated in discussions by commenting in the last 7 days.
  """
  hn_topCommenters(
    """The maximum number of users to return."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
  ): hn_CommenterUserConnection!
  """
  Returns the current authenticated user. Only available to the authenticated user.
  """
  hn_me: hn_MyUser!
  """Returns tag details by its slug."""
  hn_tag(
    """The slug of the tag to retrieve."""
    slug: String!
  ): hn_Tag
  """
  Returns the publication with the given ID or host.
  User can pass anyone of them.
  """
  hn_publication(
    """The ID of the publication."""
    id: hn_ObjectId
    """The host of the publication."""
    host: String
  ): hn_Publication
  """
  Returns a paginated list of posts based on the provided filter.
  Used in Hashnode home feed.
  """
  hn_feed(
    """The number of items to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """Filters to be applied to the feed."""
    filter: hn_FeedFilter
  ): hn_FeedPostConnection!
  """
  Returns a paginated list of posts based on search query for a particular publication id.
  """
  hn_searchPostsOfPublication(
    """The number of items to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """The filter to be applied to the search."""
    filter: hn_SearchPostsOfPublicationFilter!
  ): hn_SearchPostConnection!
  """
  Returns a draft by ID.
  Draft is a post that is not published yet.
  """
  hn_draft(
    """The ID of the draft to retrieve."""
    id: hn_ObjectId!
  ): hn_Draft
  """Get a scheduled post by ID."""
  hn_scheduledPost(
    """The ID of the scheduled post to get."""
    id: hn_ObjectId
  ): hn_ScheduledPost
}

type HashnodeMutation {
  """
  Update the follow state for the user that is provided via id or username.
  If the authenticated user does not follow the user, the mutation will follow the user.
  If the authenticated user already follows the user, the mutation will un-follow the user.
  Only available to the authenticated user.
  """
  hn_toggleFollowUser(id: ID, username: String): hn_ToggleFollowUserPayload!
  hn_subscribeToNewsletter(input: hn_SubscribeToNewsletterInput!): hn_SubscribeToNewsletterPayload!
  hn_unsubscribeFromNewsletter(input: hn_UnsubscribeFromNewsletterInput!): hn_UnsubscribeFromNewsletterPayload!
  """Creates a new post."""
  hn_publishPost(
    """Information about the post to be published."""
    input: hn_PublishPostInput!
  ): hn_PublishPostPayload!
  """Adds a post to a series."""
  hn_addPostToSeries(input: hn_AddPostToSeriesInput!): hn_AddPostToSeriesPayload!
  hn_updatePost(input: hn_UpdatePostInput!): hn_UpdatePostPayload!
  """Reschedule a post."""
  hn_reschedulePost(input: hn_ReschedulePostInput!): hn_ScheduledPostPayload
}