schema {
  query: Query
  mutation: Mutation
}

directive @requiredCapabilities(requiredCapabilities: [String!]) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Marks an element of a GraphQL schema as only available via a preview header
"""
directive @preview(
  """The identifier of the API preview that toggles this field."""
  toggledBy: String!
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(
  """Abstract type of accepted global ID"""
  abstractType: String
  """Accepted types of global IDs."""
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

directive @requireAuth(scopes: [hn_Scope!]) on OBJECT | FIELD_DEFINITION

directive @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, contains: String, notContains: String, pattern: String, format: String, min: Float, max: Float, exclusiveMin: Float, exclusiveMax: Float, multipleOf: Float, minItems: Int, maxItems: Int, uniqueTypeName: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @hidden on OBJECT | FIELD_DEFINITION

directive @private on OBJECT | FIELD_DEFINITION

"""The query root of GitHub's GraphQL interface."""
type Query {
  Github: GithubQuery!
  Hashnode: HashnodeQuery!
}

"""The root query for implementing GraphQL mutations."""
type Mutation {
  Github: GithubMutation!
  Hashnode: HashnodeMutation!
}

"""Autogenerated input type of AbortQueuedMigrations"""
input gh_AbortQueuedMigrationsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the organization that is running the migrations."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of AbortQueuedMigrations"""
type gh_AbortQueuedMigrationsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Did the operation succeed?"""
  success: Boolean
}

"""Autogenerated input type of AbortRepositoryMigration"""
input gh_AbortRepositoryMigrationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the migration to be aborted."""
  migrationId: ID! @possibleTypes(concreteTypes: ["RepositoryMigration"])
}

"""Autogenerated return type of AbortRepositoryMigration"""
type gh_AbortRepositoryMigrationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Did the operation succeed?"""
  success: Boolean
}

"""Autogenerated input type of AcceptEnterpriseAdministratorInvitation"""
input gh_AcceptEnterpriseAdministratorInvitationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the invitation being accepted"""
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""Autogenerated return type of AcceptEnterpriseAdministratorInvitation"""
type gh_AcceptEnterpriseAdministratorInvitationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The invitation that was accepted."""
  invitation: gh_EnterpriseAdministratorInvitation
  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""Autogenerated input type of AcceptTopicSuggestion"""
input gh_AcceptTopicSuggestionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The name of the suggested topic.
  
  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String
  """
  The Node ID of the repository.
  
  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of AcceptTopicSuggestion"""
type gh_AcceptTopicSuggestionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The accepted topic."""
  topic: gh_Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface gh_Actor {
  """A URL pointing to the actor's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """The username of the actor."""
  login: String!
  """The HTTP path for this actor."""
  resourcePath: gh_URI!
  """The HTTP URL for this actor."""
  url: gh_URI!
}

"""Location information for an actor"""
type gh_ActorLocation {
  """City"""
  city: String
  """Country name"""
  country: String
  """Country code"""
  countryCode: String
  """Region name"""
  region: String
  """Region or state code"""
  regionCode: String
}

"""The actor's type."""
enum gh_ActorType {
  """Indicates a team actor."""
  TEAM
  """Indicates a user actor."""
  USER
}

"""Autogenerated input type of AddAssigneesToAssignable"""
input gh_AddAssigneesToAssignableInput {
  """The id of the assignable object to add assignees to."""
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")
  """The id of users to add as assignees."""
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddAssigneesToAssignable"""
type gh_AddAssigneesToAssignablePayload {
  """The item that was assigned."""
  assignable: gh_Assignable
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of AddComment"""
input gh_AddCommentInput {
  """The contents of the comment."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""Autogenerated return type of AddComment"""
type gh_AddCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The edge from the subject's comment connection."""
  commentEdge: gh_IssueCommentEdge
  """The subject"""
  subject: gh_Node
  """The edge from the subject's timeline connection."""
  timelineEdge: gh_IssueTimelineItemEdge
}

"""Autogenerated input type of AddDiscussionComment"""
input gh_AddDiscussionCommentInput {
  """The contents of the comment."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion to comment on."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""Autogenerated return type of AddDiscussionComment"""
type gh_AddDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created discussion comment."""
  comment: gh_DiscussionComment
}

"""Autogenerated input type of AddDiscussionPollVote"""
input gh_AddDiscussionPollVoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion poll option to vote for."""
  pollOptionId: ID! @possibleTypes(concreteTypes: ["DiscussionPollOption"])
}

"""Autogenerated return type of AddDiscussionPollVote"""
type gh_AddDiscussionPollVotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The poll option that a vote was added to."""
  pollOption: gh_DiscussionPollOption
}

"""Autogenerated input type of AddEnterpriseOrganizationMember"""
input gh_AddEnterpriseOrganizationMemberInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise which owns the organization."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The ID of the organization the users will be added to."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  """The role to assign the users in the organization"""
  role: gh_OrganizationMemberRole
  """The IDs of the enterprise members to add."""
  userIds: [ID!]!
}

"""Autogenerated return type of AddEnterpriseOrganizationMember"""
type gh_AddEnterpriseOrganizationMemberPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The users who were added to the organization."""
  users: [gh_User!]
}

"""Autogenerated input type of AddEnterpriseSupportEntitlement"""
input gh_AddEnterpriseSupportEntitlementInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of a member who will receive the support entitlement."""
  login: String!
}

"""Autogenerated return type of AddEnterpriseSupportEntitlement"""
type gh_AddEnterpriseSupportEntitlementPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A message confirming the result of adding the support entitlement."""
  message: String
}

"""Autogenerated input type of AddLabelsToLabelable"""
input gh_AddLabelsToLabelableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ids of the labels to add."""
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])
  """The id of the labelable object to add labels to."""
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""Autogenerated return type of AddLabelsToLabelable"""
type gh_AddLabelsToLabelablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item that was labeled."""
  labelable: gh_Labelable
}

"""Autogenerated input type of AddProjectCard"""
input gh_AddProjectCardInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The content of the card. Must be a member of the ProjectCardItem union"""
  contentId: ID @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectCardItem")
  """The note on the card."""
  note: String
  """The Node ID of the ProjectColumn."""
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""Autogenerated return type of AddProjectCard"""
type gh_AddProjectCardPayload {
  """The edge from the ProjectColumn's card connection."""
  cardEdge: gh_ProjectCardEdge
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ProjectColumn"""
  projectColumn: gh_ProjectColumn
}

"""Autogenerated input type of AddProjectColumn"""
input gh_AddProjectColumnInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of the column."""
  name: String!
  """The Node ID of the project."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""Autogenerated return type of AddProjectColumn"""
type gh_AddProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The edge from the project's column connection."""
  columnEdge: gh_ProjectColumnEdge
  """The project"""
  project: gh_Project
}

"""Autogenerated input type of AddProjectV2DraftIssue"""
input gh_AddProjectV2DraftIssueInput {
  """The IDs of the assignees of the draft issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  """The body of the draft issue."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Project to add the draft issue to."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """
  The title of the draft issue. A project item can also be created by providing
  the URL of an Issue or Pull Request if you have access.
  """
  title: String!
}

"""Autogenerated return type of AddProjectV2DraftIssue"""
type gh_AddProjectV2DraftIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The draft issue added to the project."""
  projectItem: gh_ProjectV2Item
}

"""Autogenerated input type of AddProjectV2ItemById"""
input gh_AddProjectV2ItemByIdInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the Issue or Pull Request to add."""
  contentId: ID! @possibleTypes(concreteTypes: ["DraftIssue", "Issue", "PullRequest"], abstractType: "ProjectV2ItemContent")
  """The ID of the Project to add the item to."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of AddProjectV2ItemById"""
type gh_AddProjectV2ItemByIdPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item added to the project."""
  item: gh_ProjectV2Item
}

"""Autogenerated input type of AddPullRequestReviewComment"""
input gh_AddPullRequestReviewCommentInput {
  """
  The text of the comment. This field is required
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The SHA of the commit to comment on.
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  commitOID: gh_GitObjectID
  """
  The comment id to reply to.
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
  """
  The relative path of the file to comment on.
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  path: String
  """
  The line index in the diff to comment on.
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  position: Int
  """
  The node ID of the pull request reviewing
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])
  """
  The Node ID of the review to modify.
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestReviewId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""Autogenerated return type of AddPullRequestReviewComment"""
type gh_AddPullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created comment."""
  comment: gh_PullRequestReviewComment
  """The edge from the review's comment connection."""
  commentEdge: gh_PullRequestReviewCommentEdge
}

"""Autogenerated input type of AddPullRequestReview"""
input gh_AddPullRequestReviewInput {
  """The contents of the review body comment."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The review line comments.
  
  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `comments` will be removed. use the `threads` argument instead
  **Reason:** We are deprecating comment fields that use diff-relative positioning
  """
  comments: [gh_DraftPullRequestReviewComment]
  """The commit OID the review pertains to."""
  commitOID: gh_GitObjectID
  """The event to perform on the pull request review."""
  event: gh_PullRequestReviewEvent
  """The Node ID of the pull request to modify."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  """The review line comment threads."""
  threads: [gh_DraftPullRequestReviewThread]
}

"""Autogenerated return type of AddPullRequestReview"""
type gh_AddPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created pull request review."""
  pullRequestReview: gh_PullRequestReview
  """The edge from the pull request's review connection."""
  reviewEdge: gh_PullRequestReviewEdge
}

"""Autogenerated input type of AddPullRequestReviewThread"""
input gh_AddPullRequestReviewThreadInput {
  """Body of the thread's first comment."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The line of the blob to which the thread refers, required for line-level
  threads. The end of the line range for multi-line comments.
  """
  line: Int
  """Path to the file being commented on."""
  path: String!
  """The node ID of the pull request reviewing"""
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])
  """The Node ID of the review to modify."""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: gh_DiffSide = RIGHT
  """The first line of the range to which the comment refers."""
  startLine: Int
  """The side of the diff on which the start line resides."""
  startSide: gh_DiffSide = RIGHT
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: gh_PullRequestReviewThreadSubjectType = LINE
}

"""Autogenerated return type of AddPullRequestReviewThread"""
type gh_AddPullRequestReviewThreadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created thread."""
  thread: gh_PullRequestReviewThread
}

"""Autogenerated input type of AddPullRequestReviewThreadReply"""
input gh_AddPullRequestReviewThreadReplyInput {
  """The text of the reply."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the pending review to which the reply will belong."""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
  """The Node ID of the thread to which this reply is being written."""
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""Autogenerated return type of AddPullRequestReviewThreadReply"""
type gh_AddPullRequestReviewThreadReplyPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created reply."""
  comment: gh_PullRequestReviewComment
}

"""Autogenerated input type of AddReaction"""
input gh_AddReactionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of the emoji to react with."""
  content: gh_ReactionContent!
  """The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: ["CommitComment", "Discussion", "DiscussionComment", "Issue", "IssueComment", "PullRequest", "PullRequestReview", "PullRequestReviewComment", "Release", "TeamDiscussion", "TeamDiscussionComment"], abstractType: "Reactable")
}

"""Autogenerated return type of AddReaction"""
type gh_AddReactionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The reaction object."""
  reaction: gh_Reaction
  """The reaction groups for the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """The reactable subject."""
  subject: gh_Reactable
}

"""Autogenerated input type of AddStar"""
input gh_AddStarInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Starrable ID to star."""
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""Autogenerated return type of AddStar"""
type gh_AddStarPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The starrable."""
  starrable: gh_Starrable
}

"""Autogenerated input type of AddUpvote"""
input gh_AddUpvoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion or comment to upvote."""
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""Autogenerated return type of AddUpvote"""
type gh_AddUpvotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The votable subject."""
  subject: gh_Votable
}

"""Autogenerated input type of AddVerifiableDomain"""
input gh_AddVerifiableDomainInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The URL of the domain"""
  domain: gh_URI!
  """The ID of the owner to add the domain to"""
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
}

"""Autogenerated return type of AddVerifiableDomain"""
type gh_AddVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The verifiable domain that was added."""
  domain: gh_VerifiableDomain
}

"""Represents an 'added_to_merge_queue' event on a given pull request."""
type gh_AddedToMergeQueueEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who added this Pull Request to the merge queue"""
  enqueuer: gh_User
  """The Node ID of the AddedToMergeQueueEvent object"""
  id: ID!
  """The merge queue where this pull request was added to."""
  mergeQueue: gh_MergeQueue
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type gh_AddedToProjectEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the AddedToProjectEvent object"""
  id: ID!
  """Project referenced by event."""
  project: gh_Project @preview(toggledBy: "starfox-preview")
  """Project card referenced by this project event."""
  projectCard: gh_ProjectCard @preview(toggledBy: "starfox-preview")
  """Column name referenced by this project event."""
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""Represents an announcement banner."""
interface gh_AnnouncementBanner {
  """The text of the announcement"""
  announcement: String
  """The expiration date of the announcement, if any"""
  announcementExpiresAt: DateTime
  """Whether the announcement can be dismissed by the user"""
  announcementUserDismissible: Boolean
}

"""A GitHub App."""
type gh_App implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The description of the app."""
  description: String
  """The Node ID of the App object"""
  id: ID!
  """The IP addresses of the app."""
  ipAllowListEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for IP allow list entries returned."""
    orderBy: gh_IpAllowListEntryOrder = {direction: ASC, field: ALLOW_LIST_VALUE}
  ): gh_IpAllowListEntryConnection!
  """The hex color code, without the leading '#', for the logo background."""
  logoBackgroundColor: String!
  """A URL pointing to the app's logo."""
  logoUrl(
    """The size of the resulting image."""
    size: Int
  ): gh_URI!
  """The name of the app."""
  name: String!
  """A slug based on the name of the app for use in URLs."""
  slug: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The URL to the app's homepage."""
  url: gh_URI!
}

"""Autogenerated input type of ApproveDeployments"""
input gh_ApproveDeploymentsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Optional comment for approving deployments"""
  comment: String = ""
  """The ids of environments to reject deployments"""
  environmentIds: [ID!]!
  """The node ID of the workflow run containing the pending deployments."""
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""Autogenerated return type of ApproveDeployments"""
type gh_ApproveDeploymentsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The affected deployments."""
  deployments: [gh_Deployment!]
}

"""Autogenerated input type of ApproveVerifiableDomain"""
input gh_ApproveVerifiableDomainInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the verifiable domain to approve."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""Autogenerated return type of ApproveVerifiableDomain"""
type gh_ApproveVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The verifiable domain that was approved."""
  domain: gh_VerifiableDomain
}

"""Autogenerated input type of ArchiveProjectV2Item"""
input gh_ArchiveProjectV2ItemInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the ProjectV2Item to archive."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """The ID of the Project to archive the item from."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of ArchiveProjectV2Item"""
type gh_ArchiveProjectV2ItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item archived from the project."""
  item: gh_ProjectV2Item
}

"""Autogenerated input type of ArchiveRepository"""
input gh_ArchiveRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the repository to mark as archived."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of ArchiveRepository"""
type gh_ArchiveRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository that was marked as archived."""
  repository: gh_Repository
}

"""An object that can have users assigned to it."""
interface gh_Assignable {
  """A list of Users assigned to this object."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
}

"""Represents an 'assigned' event on any assignable object."""
type gh_AssignedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the assignable associated with the event."""
  assignable: gh_Assignable!
  """Identifies the user or mannequin that was assigned."""
  assignee: gh_Assignee
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the AssignedEvent object"""
  id: ID!
  """Identifies the user who was assigned."""
  user: gh_User @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""Types that can be assigned to issues."""
union gh_Assignee = gh_Bot | gh_Mannequin | gh_Organization | gh_User

"""An entry in the audit log."""
interface gh_AuditEntry {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Types that can initiate an audit log event."""
union gh_AuditEntryActor = gh_Bot | gh_Organization | gh_User

"""Ordering options for Audit Log connections."""
input gh_AuditLogOrder {
  """The ordering direction."""
  direction: gh_OrderDirection
  """The field to order Audit Logs by."""
  field: gh_AuditLogOrderField
}

"""Properties by which Audit Log connections can be ordered."""
enum gh_AuditLogOrderField {
  """Order audit log entries by timestamp"""
  CREATED_AT
}

"""Represents a 'auto_merge_disabled' event on a given pull request."""
type gh_AutoMergeDisabledEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who disabled auto-merge for this Pull Request"""
  disabler: gh_User
  """The Node ID of the AutoMergeDisabledEvent object"""
  id: ID!
  """PullRequest referenced by event"""
  pullRequest: gh_PullRequest
  """The reason auto-merge was disabled"""
  reason: String
  """The reason_code relating to why auto-merge was disabled"""
  reasonCode: String
}

"""Represents a 'auto_merge_enabled' event on a given pull request."""
type gh_AutoMergeEnabledEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who enabled auto-merge for this Pull Request"""
  enabler: gh_User
  """The Node ID of the AutoMergeEnabledEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest
}

"""Represents an auto-merge request for a pull request"""
type gh_AutoMergeRequest {
  """The email address of the author of this auto-merge request."""
  authorEmail: String
  """
  The commit message of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  commitBody: String
  """
  The commit title of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging
  """
  commitHeadline: String
  """When was this auto-merge request was enabled."""
  enabledAt: DateTime
  """The actor who created the auto-merge request."""
  enabledBy: gh_Actor
  """
  The merge method of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  mergeMethod: gh_PullRequestMergeMethod!
  """The pull request that this auto-merge request is set against."""
  pullRequest: gh_PullRequest!
}

"""Represents a 'auto_rebase_enabled' event on a given pull request."""
type gh_AutoRebaseEnabledEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who enabled auto-merge (rebase) for this Pull Request"""
  enabler: gh_User
  """The Node ID of the AutoRebaseEnabledEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest
}

"""Represents a 'auto_squash_enabled' event on a given pull request."""
type gh_AutoSquashEnabledEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who enabled auto-merge (squash) for this Pull Request"""
  enabler: gh_User
  """The Node ID of the AutoSquashEnabledEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type gh_AutomaticBaseChangeFailedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the AutomaticBaseChangeFailedEvent object"""
  id: ID!
  """The new base for this PR"""
  newBase: String!
  """The old base for this PR"""
  oldBase: String!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type gh_AutomaticBaseChangeSucceededEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the AutomaticBaseChangeSucceededEvent object"""
  id: ID!
  """The new base for this PR"""
  newBase: String!
  """The old base for this PR"""
  oldBase: String!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
}

"""A (potentially binary) string encoded using base64."""
scalar gh_Base64String

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type gh_BaseRefChangedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the BaseRefChangedEvent object"""
  id: ID!
  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
}

"""Represents a 'base_ref_deleted' event on a given pull request."""
type gh_BaseRefDeletedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the BaseRefDeletedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest
}

"""Represents a 'base_ref_force_pushed' event on a given pull request."""
type gh_BaseRefForcePushedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the after commit SHA for the 'base_ref_force_pushed' event."""
  afterCommit: gh_Commit
  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: gh_Commit
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the BaseRefForcePushedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: gh_Ref
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""Represents a Git blame."""
type gh_Blame {
  """The list of ranges from a Git blame."""
  ranges: [gh_BlameRange!]!
}

"""Represents a range of information from a Git blame."""
type gh_BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!
  """Identifies the line author"""
  commit: gh_Commit!
  """The ending line for the range"""
  endingLine: Int!
  """The starting line for the range"""
  startingLine: Int!
}

"""Represents a Git blob."""
type gh_Blob implements gh_GitObject & gh_Node {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!
  """Byte size of Blob object"""
  byteSize: Int!
  """The HTTP path for this Git object"""
  commitResourcePath: gh_URI!
  """The HTTP URL for this Git object"""
  commitUrl: gh_URI!
  """The Node ID of the Blob object"""
  id: ID!
  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean
  """Indicates whether the contents is truncated"""
  isTruncated: Boolean!
  """The Git object ID"""
  oid: gh_GitObjectID!
  """The Repository the Git object belongs to"""
  repository: gh_Repository!
  """UTF8 text data or null if the Blob is binary"""
  text: String
}

"""A special type of user which takes actions on behalf of GitHub Apps."""
type gh_Bot implements gh_Actor & gh_Node & gh_UniformResourceLocatable {
  """A URL pointing to the GitHub App's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the Bot object"""
  id: ID!
  """The username of the actor."""
  login: String!
  """The HTTP path for this bot"""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this bot"""
  url: gh_URI!
}

"""Types which can be actors for `BranchActorAllowance` objects."""
union gh_BranchActorAllowanceActor = gh_App | gh_Team | gh_User

"""Parameters to be used for the branch_name_pattern rule"""
type gh_BranchNamePatternParameters {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean!
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Parameters to be used for the branch_name_pattern rule"""
input gh_BranchNamePatternParametersInput {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""A branch protection rule."""
type gh_BranchProtectionRule implements gh_Node {
  """Can this branch be deleted."""
  allowsDeletions: Boolean!
  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean!
  """Is branch creation a protected operation."""
  blocksCreations: Boolean!
  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_BranchProtectionRuleConflictConnection!
  """A list of actors able to force push for this branch protection rule."""
  bypassForcePushAllowances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_BypassForcePushAllowanceConnection!
  """A list of actors able to bypass PRs for this branch protection rule."""
  bypassPullRequestAllowances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_BypassPullRequestAllowanceConnection!
  """The actor who created this branch protection rule."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!
  """The Node ID of the BranchProtectionRule object"""
  id: ID!
  """Can admins override branch protection."""
  isAdminEnforced: Boolean!
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean!
  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean!
  """Repository refs that are protected by this rule"""
  matchingRefs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filters refs with query on name"""
    query: String
  ): gh_RefConnection!
  """Identifies the protection rule pattern."""
  pattern: String!
  """A list push allowances for this branch protection rule."""
  pushAllowances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PushAllowanceConnection!
  """The repository associated with this branch protection rule."""
  repository: gh_Repository
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean!
  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int
  """
  List of required deployment environments that must be deployed successfully to update matching branches
  """
  requiredDeploymentEnvironments: [String]
  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]
  """
  List of required status checks that must pass for commits to be accepted to matching branches.
  """
  requiredStatusChecks: [gh_RequiredStatusCheckDescription!]
  """Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean!
  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean!
  """Are commits required to be signed."""
  requiresCommitSignatures: Boolean!
  """Are conversations required to be resolved before merging."""
  requiresConversationResolution: Boolean!
  """
  Does this branch require deployment to specific environments before merging
  """
  requiresDeployments: Boolean!
  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean!
  """Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean!
  """Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean!
  """Is pushing to matching branches restricted."""
  restrictsPushes: Boolean!
  """Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean!
  """A list review dismissal allowances for this branch protection rule."""
  reviewDismissalAllowances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ReviewDismissalAllowanceConnection!
}

"""A conflict between two branch protection rules."""
type gh_BranchProtectionRuleConflict {
  """Identifies the branch protection rule."""
  branchProtectionRule: gh_BranchProtectionRule
  """Identifies the conflicting branch protection rule."""
  conflictingBranchProtectionRule: gh_BranchProtectionRule
  """Identifies the branch ref that has conflicting rules"""
  ref: gh_Ref
}

"""The connection type for BranchProtectionRuleConflict."""
type gh_BranchProtectionRuleConflictConnection {
  """A list of edges."""
  edges: [gh_BranchProtectionRuleConflictEdge]
  """A list of nodes."""
  nodes: [gh_BranchProtectionRuleConflict]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_BranchProtectionRuleConflictEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_BranchProtectionRuleConflict
}

"""The connection type for BranchProtectionRule."""
type gh_BranchProtectionRuleConnection {
  """A list of edges."""
  edges: [gh_BranchProtectionRuleEdge]
  """A list of nodes."""
  nodes: [gh_BranchProtectionRule]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_BranchProtectionRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_BranchProtectionRule
}

"""
Information about a sponsorship to make for a user or organization with a GitHub
Sponsors profile, as part of sponsoring many users or organizations at once.
"""
input gh_BulkSponsorship {
  """
  The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
  """
  amount: Int!
  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")
  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""Types that can represent a repository ruleset bypass actor."""
union gh_BypassActor = gh_App | gh_Team

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
type gh_BypassForcePushAllowance implements gh_Node {
  """The actor that can force push."""
  actor: gh_BranchActorAllowanceActor
  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: gh_BranchProtectionRule
  """The Node ID of the BypassForcePushAllowance object"""
  id: ID!
}

"""The connection type for BypassForcePushAllowance."""
type gh_BypassForcePushAllowanceConnection {
  """A list of edges."""
  edges: [gh_BypassForcePushAllowanceEdge]
  """A list of nodes."""
  nodes: [gh_BypassForcePushAllowance]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_BypassForcePushAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_BypassForcePushAllowance
}

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
type gh_BypassPullRequestAllowance implements gh_Node {
  """The actor that can bypass."""
  actor: gh_BranchActorAllowanceActor
  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: gh_BranchProtectionRule
  """The Node ID of the BypassPullRequestAllowance object"""
  id: ID!
}

"""The connection type for BypassPullRequestAllowance."""
type gh_BypassPullRequestAllowanceConnection {
  """A list of edges."""
  edges: [gh_BypassPullRequestAllowanceEdge]
  """A list of nodes."""
  nodes: [gh_BypassPullRequestAllowance]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_BypassPullRequestAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_BypassPullRequestAllowance
}

"""The Common Vulnerability Scoring System"""
type gh_CVSS {
  """The CVSS score associated with this advisory"""
  score: Float!
  """The CVSS vector string associated with this advisory"""
  vectorString: String
}

"""A common weakness enumeration"""
type gh_CWE implements gh_Node {
  """The id of the CWE"""
  cweId: String!
  """A detailed description of this CWE"""
  description: String!
  """The Node ID of the CWE object"""
  id: ID!
  """The name of this CWE"""
  name: String!
}

"""The connection type for CWE."""
type gh_CWEConnection {
  """A list of edges."""
  edges: [gh_CWEEdge]
  """A list of nodes."""
  nodes: [gh_CWE]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CWEEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CWE
}

"""Autogenerated input type of CancelEnterpriseAdminInvitation"""
input gh_CancelEnterpriseAdminInvitationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the pending enterprise administrator invitation."""
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""Autogenerated return type of CancelEnterpriseAdminInvitation"""
type gh_CancelEnterpriseAdminInvitationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The invitation that was canceled."""
  invitation: gh_EnterpriseAdministratorInvitation
  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""Autogenerated input type of CancelSponsorship"""
input gh_CancelSponsorshipInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")
  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String
  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")
  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""Autogenerated return type of CancelSponsorship"""
type gh_CancelSponsorshipPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The tier that was being used at the time of cancellation."""
  sponsorsTier: gh_SponsorsTier
}

"""Autogenerated input type of ChangeUserStatus"""
input gh_ChangeUserStatusInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String
  """If set, the user status will not be shown after this date."""
  expiresAt: DateTime
  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false
  """A short description of your current status."""
  message: String
  """
  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible.
  """
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of ChangeUserStatus"""
type gh_ChangeUserStatusPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Your updated status."""
  status: gh_UserStatus
}

"""A single check annotation."""
type gh_CheckAnnotation {
  """The annotation's severity level."""
  annotationLevel: gh_CheckAnnotationLevel
  """The path to the file that this annotation was made on."""
  blobUrl: gh_URI!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The position of this annotation."""
  location: gh_CheckAnnotationSpan!
  """The annotation's message."""
  message: String!
  """The path that this annotation was made on."""
  path: String!
  """Additional information about the annotation."""
  rawDetails: String
  """The annotation's title"""
  title: String
}

"""The connection type for CheckAnnotation."""
type gh_CheckAnnotationConnection {
  """A list of edges."""
  edges: [gh_CheckAnnotationEdge]
  """A list of nodes."""
  nodes: [gh_CheckAnnotation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Information from a check run analysis to specific lines of code."""
input gh_CheckAnnotationData {
  """Represents an annotation's information level"""
  annotationLevel: gh_CheckAnnotationLevel!
  """The location of the annotation"""
  location: gh_CheckAnnotationRange!
  """A short description of the feedback for these lines of code."""
  message: String!
  """The path of the file to add an annotation to."""
  path: String!
  """Details about this annotation."""
  rawDetails: String
  """The title that represents the annotation."""
  title: String
}

"""An edge in a connection."""
type gh_CheckAnnotationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CheckAnnotation
}

"""Represents an annotation's information level."""
enum gh_CheckAnnotationLevel {
  """An annotation indicating an inescapable error."""
  FAILURE
  """An annotation indicating some information."""
  NOTICE
  """An annotation indicating an ignorable error."""
  WARNING
}

"""A character position in a check annotation."""
type gh_CheckAnnotationPosition {
  """Column number (1 indexed)."""
  column: Int
  """Line number (1 indexed)."""
  line: Int!
}

"""Information from a check run analysis to specific lines of code."""
input gh_CheckAnnotationRange {
  """The ending column of the range."""
  endColumn: Int
  """The ending line of the range."""
  endLine: Int!
  """The starting column of the range."""
  startColumn: Int
  """The starting line of the range."""
  startLine: Int!
}

"""An inclusive pair of positions for a check annotation."""
type gh_CheckAnnotationSpan {
  """End position (inclusive)."""
  end: gh_CheckAnnotationPosition!
  """Start position (inclusive)."""
  start: gh_CheckAnnotationPosition!
}

"""The possible states for a check suite or run conclusion."""
enum gh_CheckConclusionState {
  """The check suite or run requires action."""
  ACTION_REQUIRED
  """The check suite or run has been cancelled."""
  CANCELLED
  """The check suite or run has failed."""
  FAILURE
  """The check suite or run was neutral."""
  NEUTRAL
  """The check suite or run was skipped."""
  SKIPPED
  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE
  """The check suite or run has failed at startup."""
  STARTUP_FAILURE
  """The check suite or run has succeeded."""
  SUCCESS
  """The check suite or run has timed out."""
  TIMED_OUT
}

"""A check run."""
type gh_CheckRun implements gh_Node & gh_RequirableByPullRequest & gh_UniformResourceLocatable {
  """The check run's annotations"""
  annotations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CheckAnnotationConnection
  """The check suite that this run is a part of."""
  checkSuite: gh_CheckSuite!
  """Identifies the date and time when the check run was completed."""
  completedAt: DateTime
  """The conclusion of the check run."""
  conclusion: gh_CheckConclusionState
  """Identifies the primary key from the database."""
  databaseId: Int
  """The corresponding deployment for this job, if any"""
  deployment: gh_Deployment
  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: gh_URI
  """A reference for the check run on the integrator's system."""
  externalId: String
  """The Node ID of the CheckRun object"""
  id: ID!
  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """The id of the pull request this is required for"""
    pullRequestId: ID
    """The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
  """The name of the check for this check run."""
  name: String!
  """Information about a pending deployment, if any, in this check run"""
  pendingDeploymentRequest: gh_DeploymentRequest
  """The permalink to the check run summary."""
  permalink: gh_URI!
  """The repository associated with this check run."""
  repository: gh_Repository!
  """The HTTP path for this check run."""
  resourcePath: gh_URI!
  """Identifies the date and time when the check run was started."""
  startedAt: DateTime
  """The current status of the check run."""
  status: gh_CheckStatusState!
  """The check run's steps"""
  steps(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Step number"""
    number: Int
  ): gh_CheckStepConnection
  """A string representing the check run's summary"""
  summary: String
  """A string representing the check run's text"""
  text: String
  """A string representing the check run"""
  title: String
  """The HTTP URL for this check run."""
  url: gh_URI!
}

"""Possible further actions the integrator can perform."""
input gh_CheckRunAction {
  """A short explanation of what this action would do."""
  description: String!
  """A reference for the action on the integrator's system."""
  identifier: String!
  """The text to be displayed on a button in the web UI."""
  label: String!
}

"""The connection type for CheckRun."""
type gh_CheckRunConnection {
  """A list of edges."""
  edges: [gh_CheckRunEdge]
  """A list of nodes."""
  nodes: [gh_CheckRun]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CheckRunEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CheckRun
}

"""The filters that are available when fetching check runs."""
input gh_CheckRunFilter {
  """Filters the check runs created by this application ID."""
  appId: Int
  """Filters the check runs by this name."""
  checkName: String
  """Filters the check runs by this type."""
  checkType: gh_CheckRunType
  """Filters the check runs by these conclusions."""
  conclusions: [gh_CheckConclusionState!]
  """Filters the check runs by this status. Superceded by statuses."""
  status: gh_CheckStatusState
  """Filters the check runs by this status. Overrides status."""
  statuses: [gh_CheckStatusState!]
}

"""Descriptive details about the check run."""
input gh_CheckRunOutput {
  """The annotations that are made as part of the check run."""
  annotations: [gh_CheckAnnotationData!]
  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [gh_CheckRunOutputImage!]
  """The summary of the check run (supports Commonmark)."""
  summary: String!
  """The details of the check run (supports Commonmark)."""
  text: String
  """A title to provide for this check run."""
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input gh_CheckRunOutputImage {
  """The alternative text for the image."""
  alt: String!
  """A short image description."""
  caption: String
  """The full URL of the image."""
  imageUrl: gh_URI!
}

"""The possible states of a check run in a status rollup."""
enum gh_CheckRunState {
  """The check run requires action."""
  ACTION_REQUIRED
  """The check run has been cancelled."""
  CANCELLED
  """The check run has been completed."""
  COMPLETED
  """The check run has failed."""
  FAILURE
  """The check run is in progress."""
  IN_PROGRESS
  """The check run was neutral."""
  NEUTRAL
  """The check run is in pending state."""
  PENDING
  """The check run has been queued."""
  QUEUED
  """The check run was skipped."""
  SKIPPED
  """
  The check run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE
  """The check run has failed at startup."""
  STARTUP_FAILURE
  """The check run has succeeded."""
  SUCCESS
  """The check run has timed out."""
  TIMED_OUT
  """The check run is in waiting state."""
  WAITING
}

"""Represents a count of the state of a check run."""
type gh_CheckRunStateCount {
  """The number of check runs with this state."""
  count: Int!
  """The state of a check run."""
  state: gh_CheckRunState!
}

"""The possible types of check runs."""
enum gh_CheckRunType {
  """Every check run available."""
  ALL
  """The latest check run."""
  LATEST
}

"""The possible states for a check suite or run status."""
enum gh_CheckStatusState {
  """The check suite or run has been completed."""
  COMPLETED
  """The check suite or run is in progress."""
  IN_PROGRESS
  """The check suite or run is in pending state."""
  PENDING
  """The check suite or run has been queued."""
  QUEUED
  """The check suite or run has been requested."""
  REQUESTED
  """The check suite or run is in waiting state."""
  WAITING
}

"""A single check step."""
type gh_CheckStep {
  """Identifies the date and time when the check step was completed."""
  completedAt: DateTime
  """The conclusion of the check step."""
  conclusion: gh_CheckConclusionState
  """A reference for the check step on the integrator's system."""
  externalId: String
  """The step's name."""
  name: String!
  """The index of the step in the list of steps of the parent check run."""
  number: Int!
  """Number of seconds to completion."""
  secondsToCompletion: Int
  """Identifies the date and time when the check step was started."""
  startedAt: DateTime
  """The current status of the check step."""
  status: gh_CheckStatusState!
}

"""The connection type for CheckStep."""
type gh_CheckStepConnection {
  """A list of edges."""
  edges: [gh_CheckStepEdge]
  """A list of nodes."""
  nodes: [gh_CheckStep]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CheckStepEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CheckStep
}

"""A check suite."""
type gh_CheckSuite implements gh_Node {
  """The GitHub App which created this check suite."""
  app: gh_App
  """The name of the branch for this check suite."""
  branch: gh_Ref
  """The check runs associated with a check suite."""
  checkRuns(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filters the check runs by this type."""
    filterBy: gh_CheckRunFilter
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CheckRunConnection
  """The commit for this check suite"""
  commit: gh_Commit!
  """The conclusion of this check suite."""
  conclusion: gh_CheckConclusionState
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who triggered the check suite."""
  creator: gh_User
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the CheckSuite object"""
  id: ID!
  """A list of open pull requests matching the check suite."""
  matchingPullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """The base ref name to filter the pull requests by."""
    baseRefName: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """The head ref name to filter the pull requests by."""
    headRefName: String
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the pull requests by."""
    states: [gh_PullRequestState!]
  ): gh_PullRequestConnection
  """The push that triggered this check suite."""
  push: gh_Push
  """The repository associated with this check suite."""
  repository: gh_Repository!
  """The HTTP path for this check suite"""
  resourcePath: gh_URI!
  """The status of this check suite."""
  status: gh_CheckStatusState!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this check suite"""
  url: gh_URI!
  """The workflow run associated with this check suite."""
  workflowRun: gh_WorkflowRun
}

"""The auto-trigger preferences that are available for check suites."""
input gh_CheckSuiteAutoTriggerPreference {
  """The node ID of the application that owns the check suite."""
  appId: ID!
  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""The connection type for CheckSuite."""
type gh_CheckSuiteConnection {
  """A list of edges."""
  edges: [gh_CheckSuiteEdge]
  """A list of nodes."""
  nodes: [gh_CheckSuite]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CheckSuiteEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CheckSuite
}

"""The filters that are available when fetching check suites."""
input gh_CheckSuiteFilter {
  """Filters the check suites created by this application ID."""
  appId: Int
  """Filters the check suites by this name."""
  checkName: String
}

"""An object which can have its data claimed or claim data from another."""
union gh_Claimable = gh_Mannequin | gh_User

"""Autogenerated input type of ClearLabelsFromLabelable"""
input gh_ClearLabelsFromLabelableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the labelable object to clear the labels from."""
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""Autogenerated return type of ClearLabelsFromLabelable"""
type gh_ClearLabelsFromLabelablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item that was unlabeled."""
  labelable: gh_Labelable
}

"""Autogenerated input type of ClearProjectV2ItemFieldValue"""
input gh_ClearProjectV2ItemFieldValueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the field to be cleared."""
  fieldId: ID! @possibleTypes(concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"], abstractType: "ProjectV2FieldConfiguration")
  """The ID of the item to be cleared."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """The ID of the Project."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of ClearProjectV2ItemFieldValue"""
type gh_ClearProjectV2ItemFieldValuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated item."""
  projectV2Item: gh_ProjectV2Item
}

"""Autogenerated input type of CloneProject"""
input gh_CloneProjectInput {
  """The description of the project."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not to clone the source project's workflows."""
  includeWorkflows: Boolean!
  """The name of the project."""
  name: String!
  """The visibility of the project, defaults to false (private)."""
  public: Boolean
  """The source project to clone."""
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])
  """The owner ID to create the project under."""
  targetOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
}

"""Autogenerated return type of CloneProject"""
type gh_CloneProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the JobStatus for populating cloned fields."""
  jobStatusId: String
  """The new cloned project."""
  project: gh_Project
}

"""Autogenerated input type of CloneTemplateRepository"""
input gh_CloneTemplateRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A short description of the new repository."""
  description: String
  """
  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false
  """The name of the new repository."""
  name: String!
  """The ID of the owner for the new repository."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")
  """The Node ID of the template repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """Indicates the repository's visibility level."""
  visibility: gh_RepositoryVisibility!
}

"""Autogenerated return type of CloneTemplateRepository"""
type gh_CloneTemplateRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new repository."""
  repository: gh_Repository
}

"""An object that can be closed"""
interface gh_Closable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
}

"""Autogenerated input type of CloseDiscussion"""
input gh_CloseDiscussionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the discussion to be closed."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
  """The reason why the discussion is being closed."""
  reason: gh_DiscussionCloseReason = RESOLVED
}

"""Autogenerated return type of CloseDiscussion"""
type gh_CloseDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion that was closed."""
  discussion: gh_Discussion
}

"""Autogenerated input type of CloseIssue"""
input gh_CloseIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the issue to be closed."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
  """The reason the issue is to be closed."""
  stateReason: gh_IssueClosedStateReason
}

"""Autogenerated return type of CloseIssue"""
type gh_CloseIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue that was closed."""
  issue: gh_Issue
}

"""Autogenerated input type of ClosePullRequest"""
input gh_ClosePullRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the pull request to be closed."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of ClosePullRequest"""
type gh_ClosePullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that was closed."""
  pullRequest: gh_PullRequest
}

"""Represents a 'closed' event on any `Closable`."""
type gh_ClosedEvent implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Object that was closed."""
  closable: gh_Closable!
  """Object which triggered the creation of this event."""
  closer: gh_Closer
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ClosedEvent object"""
  id: ID!
  """The HTTP path for this closed event."""
  resourcePath: gh_URI!
  """The reason the issue state was changed to closed."""
  stateReason: gh_IssueStateReason
  """The HTTP URL for this closed event."""
  url: gh_URI!
}

"""The object which triggered a `ClosedEvent`."""
union gh_Closer = gh_Commit | gh_PullRequest

"""The Code of Conduct for a repository"""
type gh_CodeOfConduct implements gh_Node {
  """The body of the Code of Conduct"""
  body: String
  """The Node ID of the CodeOfConduct object"""
  id: ID!
  """The key for the Code of Conduct"""
  key: String!
  """The formal name of the Code of Conduct"""
  name: String!
  """The HTTP path for this Code of Conduct"""
  resourcePath: gh_URI
  """The HTTP URL for this Code of Conduct"""
  url: gh_URI
}

"""Collaborators affiliation level with a subject."""
enum gh_CollaboratorAffiliation {
  """All collaborators the authenticated user can see."""
  ALL
  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT
  """All outside collaborators of an organization-owned subject."""
  OUTSIDE
}

"""Represents a comment."""
interface gh_Comment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """The body as Markdown."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the Comment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""A comment author association with repository."""
enum gh_CommentAuthorAssociation {
  """Author has been invited to collaborate on the repository."""
  COLLABORATOR
  """Author has previously committed to the repository."""
  CONTRIBUTOR
  """Author has not previously committed to GitHub."""
  FIRST_TIMER
  """Author has not previously committed to the repository."""
  FIRST_TIME_CONTRIBUTOR
  """Author is a placeholder for an unclaimed user."""
  MANNEQUIN
  """Author is a member of the organization that owns the repository."""
  MEMBER
  """Author has no association with the repository."""
  NONE
  """Author is the owner of the repository."""
  OWNER
}

"""The possible errors that will prevent a user from updating a comment."""
enum gh_CommentCannotUpdateReason {
  """Unable to create comment because repository is archived."""
  ARCHIVED
  """You cannot update this comment"""
  DENIED
  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS
  """Unable to create comment because issue is locked."""
  LOCKED
  """You must be logged in to update this comment."""
  LOGIN_REQUIRED
  """Repository is under maintenance."""
  MAINTENANCE
  """At least one email address must be verified to update this comment."""
  VERIFIED_EMAIL_REQUIRED
}

"""Represents a 'comment_deleted' event on a given issue or pull request."""
type gh_CommentDeletedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The user who authored the deleted comment."""
  deletedCommentAuthor: gh_Actor
  """The Node ID of the CommentDeletedEvent object"""
  id: ID!
}

"""Represents a Git commit."""
type gh_Commit implements gh_GitObject & gh_Node & gh_Subscribable & gh_UniformResourceLocatable {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!
  """The number of additions in this commit."""
  additions: Int!
  """
  The merged Pull Request that introduced the commit to the repository. If the
  commit is not present in the default branch, additionally returns open Pull
  Requests associated with the commit
  """
  associatedPullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests."""
    orderBy: gh_PullRequestOrder = {direction: ASC, field: CREATED_AT}
  ): gh_PullRequestConnection
  """Authorship details of the commit."""
  author: gh_GitActor
  """Check if the committer and the author match."""
  authoredByCommitter: Boolean!
  """The datetime when this commit was authored."""
  authoredDate: DateTime!
  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  """
  authors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_GitActorConnection!
  """Fetches `git blame` information."""
  blame(
    """The file whose Git blame information you want."""
    path: String!
  ): gh_Blame!
  """
  We recommend using the `changedFilesIfAvailable` field instead of
  `changedFiles`, as `changedFiles` will cause your request to return an error
  if GitHub is unable to calculate the number of changed files.
  """
  changedFiles: Int! @deprecated(reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.")
  """
  The number of changed files in this commit. If GitHub is unable to calculate
  the number of changed files (for example due to a timeout), this will return
  `null`. We recommend using this field instead of `changedFiles`.
  """
  changedFilesIfAvailable: Int
  """The check suites associated with a commit."""
  checkSuites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filters the check suites by this type."""
    filterBy: gh_CheckSuiteFilter
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CheckSuiteConnection
  """Comments made on the commit."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CommitCommentConnection!
  """The HTTP path for this Git object"""
  commitResourcePath: gh_URI!
  """The HTTP URL for this Git object"""
  commitUrl: gh_URI!
  """The datetime when this commit was committed."""
  committedDate: DateTime!
  """Check if committed via GitHub web UI."""
  committedViaWeb: Boolean!
  """Committer details of the commit."""
  committer: gh_GitActor
  """The number of deletions in this commit."""
  deletions: Int!
  """The deployments associated with a commit."""
  deployments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Environments to list deployments for"""
    environments: [String!]
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for deployments returned from the connection."""
    orderBy: gh_DeploymentOrder = {direction: ASC, field: CREATED_AT}
  ): gh_DeploymentConnection
  """The tree entry representing the file located at the given path."""
  file(
    """The path for the file"""
    path: String!
  ): gh_TreeEntry
  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: gh_CommitAuthor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String
    """Allows specifying a beginning time or date for fetching commits."""
    since: gh_GitTimestamp
    """Allows specifying an ending time or date for fetching commits."""
    until: gh_GitTimestamp
  ): gh_CommitHistoryConnection!
  """The Node ID of the Commit object"""
  id: ID!
  """The Git commit message"""
  message: String!
  """The Git commit message body"""
  messageBody: String!
  """The commit message body rendered to HTML."""
  messageBodyHTML: gh_HTML!
  """The Git commit message headline"""
  messageHeadline: String!
  """The commit message headline rendered to HTML."""
  messageHeadlineHTML: gh_HTML!
  """The Git object ID"""
  oid: gh_GitObjectID!
  """The organization this commit was made on behalf of."""
  onBehalfOf: gh_Organization
  """The parents of a commit."""
  parents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CommitConnection!
  """The datetime when this commit was pushed."""
  pushedDate: DateTime @deprecated(reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")
  """The Repository this commit belongs to"""
  repository: gh_Repository!
  """The HTTP path for this commit"""
  resourcePath: gh_URI!
  """Commit signing information, if present."""
  signature: gh_GitSignature
  """Status information for this commit"""
  status: gh_Status
  """Check and Status rollup information for this commit."""
  statusCheckRollup: gh_StatusCheckRollup
  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_SubmoduleConnection!
  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: gh_URI!
  """Commit's root Tree"""
  tree: gh_Tree!
  """The HTTP path for the tree of this commit"""
  treeResourcePath: gh_URI!
  """The HTTP URL for the tree of this commit"""
  treeUrl: gh_URI!
  """The HTTP URL for this commit"""
  url: gh_URI!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: gh_URI!
}

"""Specifies an author for filtering Git commits."""
input gh_CommitAuthor {
  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]
  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"""Parameters to be used for the commit_author_email_pattern rule"""
type gh_CommitAuthorEmailPatternParameters {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean!
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Parameters to be used for the commit_author_email_pattern rule"""
input gh_CommitAuthorEmailPatternParametersInput {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Represents a comment on a given Commit."""
type gh_CommitComment implements gh_Comment & gh_Deletable & gh_Minimizable & gh_Node & gh_Reactable & gh_RepositoryNode & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """Identifies the comment body."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: gh_Commit
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the CommitComment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """Identifies the file path associated with the comment."""
  path: String
  """Identifies the line position associated with the comment."""
  position: Int
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The HTTP path permalink for this commit comment."""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL permalink for this commit comment."""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for CommitComment."""
type gh_CommitCommentConnection {
  """A list of edges."""
  edges: [gh_CommitCommentEdge]
  """A list of nodes."""
  nodes: [gh_CommitComment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CommitCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CommitComment
}

"""A thread of comments on a commit."""
type gh_CommitCommentThread implements gh_Node & gh_RepositoryNode {
  """The comments that exist in this thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CommitCommentConnection!
  """The commit the comments were made on."""
  commit: gh_Commit
  """The Node ID of the CommitCommentThread object"""
  id: ID!
  """The file the comments were made on."""
  path: String
  """The position in the diff for the commit that the comment was made on."""
  position: Int
  """The repository associated with this node."""
  repository: gh_Repository!
}

"""The connection type for Commit."""
type gh_CommitConnection {
  """A list of edges."""
  edges: [gh_CommitEdge]
  """A list of nodes."""
  nodes: [gh_Commit]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Ordering options for commit contribution connections."""
input gh_CommitContributionOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field by which to order commit contributions."""
  field: gh_CommitContributionOrderField!
}

"""Properties by which commit contribution connections can be ordered."""
enum gh_CommitContributionOrderField {
  """Order commit contributions by how many commits they represent."""
  COMMIT_COUNT
  """Order commit contributions by when they were made."""
  OCCURRED_AT
}

"""This aggregates commits made by a user within one repository."""
type gh_CommitContributionsByRepository {
  """The commit contributions, each representing a day."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: gh_CommitContributionOrder = {direction: DESC, field: OCCURRED_AT}
  ): gh_CreatedCommitContributionConnection!
  """The repository in which the commits were made."""
  repository: gh_Repository!
  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: gh_URI!
  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: gh_URI!
}

"""An edge in a connection."""
type gh_CommitEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Commit
}

"""The connection type for Commit."""
type gh_CommitHistoryConnection {
  """A list of edges."""
  edges: [gh_CommitEdge]
  """A list of nodes."""
  nodes: [gh_Commit]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A message to include with a new commit"""
input gh_CommitMessage {
  """The body of the message."""
  body: String
  """The headline of the message."""
  headline: String!
}

"""Parameters to be used for the commit_message_pattern rule"""
type gh_CommitMessagePatternParameters {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean!
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Parameters to be used for the commit_message_pattern rule"""
input gh_CommitMessagePatternParametersInput {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
input gh_CommittableBranch {
  """The unqualified name of the branch to append the commit to."""
  branchName: String
  """The Node ID of the Ref to be updated."""
  id: ID
  """The nameWithOwner of the repository to commit to."""
  repositoryNameWithOwner: String
}

"""Parameters to be used for the committer_email_pattern rule"""
type gh_CommitterEmailPatternParameters {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean!
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Parameters to be used for the committer_email_pattern rule"""
input gh_CommitterEmailPatternParametersInput {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Represents a comparison between two commit revisions."""
type gh_Comparison implements gh_Node {
  """The number of commits ahead of the base branch."""
  aheadBy: Int!
  """The base revision of this comparison."""
  baseTarget: gh_GitObject!
  """The number of commits behind the base branch."""
  behindBy: Int!
  """The commits which compose this comparison."""
  commits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ComparisonCommitConnection!
  """The head revision of this comparison."""
  headTarget: gh_GitObject!
  """The Node ID of the Comparison object"""
  id: ID!
  """The status of this comparison."""
  status: gh_ComparisonStatus!
}

"""The connection type for Commit."""
type gh_ComparisonCommitConnection {
  """The total count of authors and co-authors across all commits."""
  authorCount: Int!
  """A list of edges."""
  edges: [gh_CommitEdge]
  """A list of nodes."""
  nodes: [gh_Commit]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The status of a git comparison between two refs."""
enum gh_ComparisonStatus {
  """The head ref is ahead of the base ref."""
  AHEAD
  """The head ref is behind the base ref."""
  BEHIND
  """
  The head ref is both ahead and behind of the base ref, indicating git history has diverged.
  """
  DIVERGED
  """The head ref and base ref are identical."""
  IDENTICAL
}

"""Represents a 'connected' event on a given issue or pull request."""
type gh_ConnectedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ConnectedEvent object"""
  id: ID!
  """Reference originated in a different repository."""
  isCrossRepository: Boolean!
  """Issue or pull request that made the reference."""
  source: gh_ReferencedSubject!
  """Issue or pull request which was connected."""
  subject: gh_ReferencedSubject!
}

"""The Contributing Guidelines for a repository."""
type gh_ContributingGuidelines {
  """The body of the Contributing Guidelines."""
  body: String
  """The HTTP path for the Contributing Guidelines."""
  resourcePath: gh_URI
  """The HTTP URL for the Contributing Guidelines."""
  url: gh_URI
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""A calendar of contributions made on GitHub by a user."""
type gh_ContributionCalendar {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!
  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!
  """A list of the months of contributions in this calendar."""
  months: [gh_ContributionCalendarMonth!]!
  """The count of total contributions in the calendar."""
  totalContributions: Int!
  """A list of the weeks of contributions in this calendar."""
  weeks: [gh_ContributionCalendarWeek!]!
}

"""Represents a single day of contributions on GitHub by a user."""
type gh_ContributionCalendarDay {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!
  """How many contributions were made by the user on this day."""
  contributionCount: Int!
  """
  Indication of contributions, relative to other days. Can be used to indicate
  which color to represent this day on a calendar.
  """
  contributionLevel: gh_ContributionLevel!
  """The day this square represents."""
  date: Date!
  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""A month of contributions in a user's contribution graph."""
type gh_ContributionCalendarMonth {
  """The date of the first day of this month."""
  firstDay: Date!
  """The name of the month."""
  name: String!
  """How many weeks started in this month."""
  totalWeeks: Int!
  """The year the month occurred in."""
  year: Int!
}

"""A week of contributions in a user's contribution graph."""
type gh_ContributionCalendarWeek {
  """The days of contributions in this week."""
  contributionDays: [gh_ContributionCalendarDay!]!
  """The date of the earliest square in this week."""
  firstDay: Date!
}

"""Varying levels of contributions from none to many."""
enum gh_ContributionLevel {
  """Lowest 25% of days of contributions."""
  FIRST_QUARTILE
  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE
  """No contributions occurred."""
  NONE
  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE
  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE
}

"""Ordering options for contribution connections."""
input gh_ContributionOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type gh_ContributionsCollection {
  """Commit contributions made by the user, grouped by repository."""
  commitContributionsByRepository(
    """How many repositories should be included."""
    maxRepositories: Int = 25
  ): [gh_CommitContributionsByRepository!]!
  """A calendar of this user's contributions on GitHub."""
  contributionCalendar: gh_ContributionCalendar!
  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!
  """Determine if this collection's time span ends in the current month."""
  doesEndInCurrentMonth: Boolean!
  """
  The date of the first restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: Date
  """The ending date and time of this collection."""
  endedAt: DateTime!
  """
  The first issue the user opened on GitHub. This will be null if that issue was
  opened outside the collection's time range and ignoreTimeRange is false. If
  the issue is not visible but the user has opted to show private contributions,
  a RestrictedContribution will be returned.
  """
  firstIssueContribution: gh_CreatedIssueOrRestrictedContribution
  """
  The first pull request the user opened on GitHub. This will be null if that
  pull request was opened outside the collection's time range and
  ignoreTimeRange is not true. If the pull request is not visible but the user
  has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: gh_CreatedPullRequestOrRestrictedContribution
  """
  The first repository the user created on GitHub. This will be null if that
  first repository was created outside the collection's time range and
  ignoreTimeRange is false. If the repository is not visible, then a
  RestrictedContribution is returned.
  """
  firstRepositoryContribution: gh_CreatedRepositoryOrRestrictedContribution
  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!
  """Determine if there are any contributions in this collection."""
  hasAnyContributions: Boolean!
  """
  Determine if the user made any contributions in this time frame whose details
  are not visible because they were made in a private repository. Can only be
  true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!
  """Whether or not the collector's time span is all within the same day."""
  isSingleDay: Boolean!
  """A list of issues the user opened."""
  issueContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Should the user's first issue ever be excluded from the result."""
    excludeFirst: Boolean = false
    """Should the user's most commented issue be excluded from the result."""
    excludePopular: Boolean = false
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedIssueContributionConnection!
  """Issue contributions made by the user, grouped by repository."""
  issueContributionsByRepository(
    """Should the user's first issue ever be excluded from the result."""
    excludeFirst: Boolean = false
    """Should the user's most commented issue be excluded from the result."""
    excludePopular: Boolean = false
    """How many repositories should be included."""
    maxRepositories: Int = 25
  ): [gh_IssueContributionsByRepository!]!
  """
  When the user signed up for GitHub. This will be null if that sign up date
  falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: gh_JoinedGitHubContribution
  """
  The date of the most recent restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: Date
  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  """
  mostRecentCollectionWithActivity: gh_ContributionsCollection
  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  """
  mostRecentCollectionWithoutActivity: gh_ContributionsCollection
  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  """
  popularIssueContribution: gh_CreatedIssueContribution
  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  """
  popularPullRequestContribution: gh_CreatedPullRequestContribution
  """Pull request contributions made by the user."""
  pullRequestContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Should the user's first pull request ever be excluded from the result."""
    excludeFirst: Boolean = false
    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedPullRequestContributionConnection!
  """Pull request contributions made by the user, grouped by repository."""
  pullRequestContributionsByRepository(
    """Should the user's first pull request ever be excluded from the result."""
    excludeFirst: Boolean = false
    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false
    """How many repositories should be included."""
    maxRepositories: Int = 25
  ): [gh_PullRequestContributionsByRepository!]!
  """
  Pull request review contributions made by the user. Returns the most recently
  submitted review for each PR reviewed by the user.
  """
  pullRequestReviewContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedPullRequestReviewContributionConnection!
  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """How many repositories should be included."""
    maxRepositories: Int = 25
  ): [gh_PullRequestReviewContributionsByRepository!]!
  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Should the user's first repository ever be excluded from the result."""
    excludeFirst: Boolean = false
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedRepositoryContributionConnection!
  """
  A count of contributions made by the user that the viewer cannot access. Only
  non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!
  """The beginning date and time of this collection."""
  startedAt: DateTime!
  """How many commits were made by the user in this time span."""
  totalCommitContributions: Int!
  """How many issues the user opened."""
  totalIssueContributions(
    """Should the user's first issue ever be excluded from this count."""
    excludeFirst: Boolean = false
    """Should the user's most commented issue be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!
  """How many pull requests the user opened."""
  totalPullRequestContributions(
    """Should the user's first pull request ever be excluded from this count."""
    excludeFirst: Boolean = false
    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!
  """How many pull request reviews the user left."""
  totalPullRequestReviewContributions: Int!
  """How many different repositories the user committed to."""
  totalRepositoriesWithContributedCommits: Int!
  """How many different repositories the user opened issues in."""
  totalRepositoriesWithContributedIssues(
    """Should the user's first issue ever be excluded from this count."""
    excludeFirst: Boolean = false
    """Should the user's most commented issue be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!
  """How many different repositories the user left pull request reviews in."""
  totalRepositoriesWithContributedPullRequestReviews: Int!
  """How many different repositories the user opened pull requests in."""
  totalRepositoriesWithContributedPullRequests(
    """Should the user's first pull request ever be excluded from this count."""
    excludeFirst: Boolean = false
    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!
  """How many repositories the user created."""
  totalRepositoryContributions(
    """Should the user's first repository ever be excluded from this count."""
    excludeFirst: Boolean = false
  ): Int!
  """The user who made the contributions in this collection."""
  user: gh_User!
}

"""Autogenerated input type of ConvertProjectCardNoteToIssue"""
input gh_ConvertProjectCardNoteToIssueInput {
  """The body of the newly created issue."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ProjectCard ID to convert."""
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
  """The ID of the repository to create the issue in."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String
}

"""Autogenerated return type of ConvertProjectCardNoteToIssue"""
type gh_ConvertProjectCardNoteToIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated ProjectCard."""
  projectCard: gh_ProjectCard
}

"""Autogenerated input type of ConvertPullRequestToDraft"""
input gh_ConvertPullRequestToDraftInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the pull request to convert to draft"""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of ConvertPullRequestToDraft"""
type gh_ConvertPullRequestToDraftPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that is now a draft."""
  pullRequest: gh_PullRequest
}

"""Represents a 'convert_to_draft' event on a given pull request."""
type gh_ConvertToDraftEvent implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ConvertToDraftEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """The HTTP path for this convert to draft event."""
  resourcePath: gh_URI!
  """The HTTP URL for this convert to draft event."""
  url: gh_URI!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type gh_ConvertedNoteToIssueEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ConvertedNoteToIssueEvent object"""
  id: ID!
  """Project referenced by event."""
  project: gh_Project @preview(toggledBy: "starfox-preview")
  """Project card referenced by this project event."""
  projectCard: gh_ProjectCard @preview(toggledBy: "starfox-preview")
  """Column name referenced by this project event."""
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""Represents a 'converted_to_discussion' event on a given issue."""
type gh_ConvertedToDiscussionEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The discussion that the issue was converted into."""
  discussion: gh_Discussion
  """The Node ID of the ConvertedToDiscussionEvent object"""
  id: ID!
}

"""Autogenerated input type of CopyProjectV2"""
input gh_CopyProjectV2Input {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Include draft issues in the new project"""
  includeDraftIssues: Boolean = false
  """The owner ID of the new project."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")
  """The ID of the source Project to copy."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """The title of the project."""
  title: String!
}

"""Autogenerated return type of CopyProjectV2"""
type gh_CopyProjectV2Payload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The copied project."""
  projectV2: gh_ProjectV2
}

"""Autogenerated input type of CreateAttributionInvitation"""
input gh_CreateAttributionInvitationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the owner scoping the reattributable data."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"])
  """The Node ID of the account owning the data to reattribute."""
  sourceId: ID! @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"])
  """The Node ID of the account which may claim the data."""
  targetId: ID! @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"])
}

"""Autogenerated return type of CreateAttributionInvitation"""
type gh_CreateAttributionInvitationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The owner scoping the reattributable data."""
  owner: gh_Organization
  """The account owning the data to reattribute."""
  source: gh_Claimable
  """The account which may claim the data."""
  target: gh_Claimable
}

"""Autogenerated input type of CreateBranchProtectionRule"""
input gh_CreateBranchProtectionRuleInput {
  """Can this branch be deleted."""
  allowsDeletions: Boolean
  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean
  """Is branch creation a protected operation."""
  blocksCreations: Boolean
  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]
  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean
  """Can admins override branch protection."""
  isAdminEnforced: Boolean
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean
  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean
  """The glob-like pattern used to determine matching branches."""
  pattern: String!
  """A list of User, Team, or App IDs allowed to push to matching branches."""
  pushActorIds: [ID!]
  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean
  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int
  """The list of required deployment environments"""
  requiredDeploymentEnvironments: [String!]
  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]
  """The list of required status checks"""
  requiredStatusChecks: [gh_RequiredStatusCheckInput!]
  """Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean
  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean
  """Are commits required to be signed."""
  requiresCommitSignatures: Boolean
  """Are conversations required to be resolved before merging."""
  requiresConversationResolution: Boolean
  """Are successful deployments required before merging."""
  requiresDeployments: Boolean
  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean
  """Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean
  """Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean
  """Is pushing to matching branches restricted."""
  restrictsPushes: Boolean
  """Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean
  """
  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""Autogenerated return type of CreateBranchProtectionRule"""
type gh_CreateBranchProtectionRulePayload {
  """The newly created BranchProtectionRule."""
  branchProtectionRule: gh_BranchProtectionRule
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateCheckRun"""
input gh_CreateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [gh_CheckRunAction!]
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The time that the check run finished."""
  completedAt: DateTime
  """The final conclusion of the check."""
  conclusion: gh_CheckConclusionState
  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: gh_URI
  """A reference for the run on the integrator's system."""
  externalId: String
  """The SHA of the head commit."""
  headSha: gh_GitObjectID!
  """The name of the check."""
  name: String!
  """Descriptive details about the run."""
  output: gh_CheckRunOutput
  """The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """The time that the check run began."""
  startedAt: DateTime
  """The current status."""
  status: gh_RequestableCheckStatusState
}

"""Autogenerated return type of CreateCheckRun"""
type gh_CreateCheckRunPayload {
  """The newly created check run."""
  checkRun: gh_CheckRun
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateCheckSuite"""
input gh_CreateCheckSuiteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The SHA of the head commit."""
  headSha: gh_GitObjectID!
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of CreateCheckSuite"""
type gh_CreateCheckSuitePayload {
  """The newly created check suite."""
  checkSuite: gh_CheckSuite
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateCommitOnBranch"""
input gh_CreateCommitOnBranchInput {
  """The Ref to be updated.  Must be a branch."""
  branch: gh_CommittableBranch!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The git commit oid expected at the head of the branch prior to the commit
  """
  expectedHeadOid: gh_GitObjectID!
  """A description of changes to files in this commit."""
  fileChanges: gh_FileChanges
  """The commit message the be included with the commit."""
  message: gh_CommitMessage!
}

"""Autogenerated return type of CreateCommitOnBranch"""
type gh_CreateCommitOnBranchPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new commit."""
  commit: gh_Commit
  """The ref which has been updated to point to the new commit."""
  ref: gh_Ref
}

"""Autogenerated input type of CreateDeployment"""
input gh_CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  """
  Attempt to automatically merge the default branch into the requested ref, defaults to true.
  """
  autoMerge: Boolean = true
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Short description of the deployment."""
  description: String = ""
  """Name for the target deployment environment."""
  environment: String = "production"
  """JSON payload with extra information about the deployment."""
  payload: String = "{}"
  """The node ID of the ref to be deployed."""
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
  """The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """
  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts.
  """
  requiredContexts: [String!]
  """Specifies a task to execute."""
  task: String = "deploy"
}

"""Autogenerated return type of CreateDeployment"""
type gh_CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  """
  True if the default branch has been auto-merged into the deployment ref.
  """
  autoMerged: Boolean
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new deployment."""
  deployment: gh_Deployment
}

"""Autogenerated input type of CreateDeploymentStatus"""
input gh_CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  """
  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment.
  """
  autoInactive: Boolean = true
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The node ID of the deployment."""
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])
  """A short description of the status. Maximum length of 140 characters."""
  description: String = ""
  """
  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
  """
  environment: String
  """Sets the URL for accessing your environment."""
  environmentUrl: String = ""
  """
  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment.
  """
  logUrl: String = ""
  """The state of the deployment."""
  state: gh_DeploymentStatusState!
}

"""Autogenerated return type of CreateDeploymentStatus"""
type gh_CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new deployment status."""
  deploymentStatus: gh_DeploymentStatus
}

"""Autogenerated input type of CreateDiscussion"""
input gh_CreateDiscussionInput {
  """The body of the discussion."""
  body: String!
  """The id of the discussion category to associate with this discussion."""
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the repository on which to create the discussion."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """The title of the discussion."""
  title: String!
}

"""Autogenerated return type of CreateDiscussion"""
type gh_CreateDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion that was just created."""
  discussion: gh_Discussion
}

"""Autogenerated input type of CreateEnterpriseOrganization"""
input gh_CreateEnterpriseOrganizationInput {
  """The logins for the administrators of the new organization."""
  adminLogins: [String!]!
  """The email used for sending billing receipts."""
  billingEmail: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise owning the new organization."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of the new organization."""
  login: String!
  """The profile name of the new organization."""
  profileName: String!
}

"""Autogenerated return type of CreateEnterpriseOrganization"""
type gh_CreateEnterpriseOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise that owns the created organization."""
  enterprise: gh_Enterprise
  """The organization that was created."""
  organization: gh_Organization
}

"""Autogenerated input type of CreateEnvironment"""
input gh_CreateEnvironmentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of the environment."""
  name: String!
  """The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of CreateEnvironment"""
type gh_CreateEnvironmentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new or existing environment."""
  environment: gh_Environment
}

"""Autogenerated input type of CreateIpAllowListEntry"""
input gh_CreateIpAllowListEntryInput {
  """An IP address or range of addresses in CIDR notation."""
  allowListValue: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!
  """An optional name for the IP allow list entry."""
  name: String
  """The ID of the owner for which to create the new IP allow list entry."""
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
}

"""Autogenerated return type of CreateIpAllowListEntry"""
type gh_CreateIpAllowListEntryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The IP allow list entry that was created."""
  ipAllowListEntry: gh_IpAllowListEntry
}

"""Autogenerated input type of CreateIssue"""
input gh_CreateIssueInput {
  """The Node ID for the user assignee for this issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  """The body for the issue description."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String
  """An array of Node IDs of labels for this issue."""
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])
  """The Node ID of the milestone for this issue."""
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])
  """An array of Node IDs for projects associated with this issue."""
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """The title for the issue."""
  title: String!
}

"""Autogenerated return type of CreateIssue"""
type gh_CreateIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new issue."""
  issue: gh_Issue
}

"""Autogenerated input type of CreateLabel"""
input gh_CreateLabelInput @preview(toggledBy: "bane-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String!
  """A brief description of the label, such as its purpose."""
  description: String
  """The name of the label."""
  name: String!
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of CreateLabel"""
type gh_CreateLabelPayload @preview(toggledBy: "bane-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new label."""
  label: gh_Label
}

"""Autogenerated input type of CreateLinkedBranch"""
input gh_CreateLinkedBranchInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the issue to link to."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
  """The name of the new branch. Defaults to issue number and title."""
  name: String
  """The commit SHA to base the new branch on."""
  oid: gh_GitObjectID!
  """
  ID of the repository to create the branch in. Defaults to the issue repository.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of CreateLinkedBranch"""
type gh_CreateLinkedBranchPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue that was linked to."""
  issue: gh_Issue
  """The new branch issue reference."""
  linkedBranch: gh_LinkedBranch
}

"""Autogenerated input type of CreateMigrationSource"""
input gh_CreateMigrationSourceInput {
  """The migration source access token."""
  accessToken: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String
  """The migration source name."""
  name: String!
  """The ID of the organization that will own the migration source."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
  """The migration source type."""
  type: gh_MigrationSourceType!
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: String
}

"""Autogenerated return type of CreateMigrationSource"""
type gh_CreateMigrationSourcePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created migration source."""
  migrationSource: gh_MigrationSource
}

"""Autogenerated input type of CreateProject"""
input gh_CreateProjectInput {
  """The description of project."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of project."""
  name: String!
  """The owner ID to create the project under."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])
  """The name of the GitHub-provided template."""
  template: gh_ProjectTemplate
}

"""Autogenerated return type of CreateProject"""
type gh_CreateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new project."""
  project: gh_Project
}

"""Autogenerated input type of CreateProjectV2Field"""
input gh_CreateProjectV2FieldInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The data type of the field."""
  dataType: gh_ProjectV2CustomFieldType!
  """The name of the field."""
  name: String!
  """The ID of the Project to create the field in."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """
  Options for a single select field. At least one value is required if data_type is SINGLE_SELECT
  """
  singleSelectOptions: [gh_ProjectV2SingleSelectFieldOptionInput!]
}

"""Autogenerated return type of CreateProjectV2Field"""
type gh_CreateProjectV2FieldPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new field."""
  projectV2Field: gh_ProjectV2FieldConfiguration
}

"""Autogenerated input type of CreateProjectV2"""
input gh_CreateProjectV2Input {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The owner ID to create the project under."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")
  """The repository to link the project to."""
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
  """
  The team to link the project to. The team will be granted read permissions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  """The title of the project."""
  title: String!
}

"""Autogenerated return type of CreateProjectV2"""
type gh_CreateProjectV2Payload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new project."""
  projectV2: gh_ProjectV2
}

"""Autogenerated input type of CreatePullRequest"""
input gh_CreatePullRequestInput {
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  """
  baseRefName: String!
  """The contents of the pull request."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Indicates whether this pull request should be a draft."""
  draft: Boolean = false
  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  """
  headRefName: String!
  """The Node ID of the head repository."""
  headRepositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean = true
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """The title of the pull request."""
  title: String!
}

"""Autogenerated return type of CreatePullRequest"""
type gh_CreatePullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new pull request."""
  pullRequest: gh_PullRequest
}

"""Autogenerated input type of CreateRef"""
input gh_CreateRefInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!
  """The GitObjectID that the new Ref shall target. Must point to a commit."""
  oid: gh_GitObjectID!
  """The Node ID of the Repository to create the Ref in."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of CreateRef"""
type gh_CreateRefPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created ref."""
  ref: gh_Ref
}

"""Autogenerated input type of CreateRepository"""
input gh_CreateRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A short description of the new repository."""
  description: String
  """Indicates if the repository should have the issues feature enabled."""
  hasIssuesEnabled: Boolean = true
  """Indicates if the repository should have the wiki feature enabled."""
  hasWikiEnabled: Boolean = false
  """The URL for a web page about this repository."""
  homepageUrl: gh_URI
  """The name of the new repository."""
  name: String!
  """The ID of the owner for the new repository."""
  ownerId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")
  """
  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false
  """Indicates the repository's visibility level."""
  visibility: gh_RepositoryVisibility!
}

"""Autogenerated return type of CreateRepository"""
type gh_CreateRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new repository."""
  repository: gh_Repository
}

"""Autogenerated input type of CreateRepositoryRuleset"""
input gh_CreateRepositoryRulesetInput {
  """A list of actors that are allowed to bypass rules in this ruleset."""
  bypassActors: [gh_RepositoryRulesetBypassActorInput!]
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The set of conditions for this ruleset"""
  conditions: gh_RepositoryRuleConditionsInput!
  """The enforcement level for this ruleset"""
  enforcement: gh_RuleEnforcement!
  """The name of the ruleset."""
  name: String!
  """The list of rules for this ruleset"""
  rules: [gh_RepositoryRuleInput!]
  """
  The global relay id of the source in which a new ruleset should be created in.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository"], abstractType: "RuleSource")
  """The target of the ruleset."""
  target: gh_RepositoryRulesetTarget
}

"""Autogenerated return type of CreateRepositoryRuleset"""
type gh_CreateRepositoryRulesetPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created Ruleset."""
  ruleset: gh_RepositoryRuleset
}

"""Autogenerated input type of CreateSponsorsListing"""
input gh_CreateSponsorsListingInput {
  """
  The country or region where the sponsorable's bank account is located.
  Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
  """
  billingCountryOrRegionCode: gh_SponsorsCountryOrRegionCode
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The email address we should use to contact you about the GitHub Sponsors
  profile being created. This will not be shared publicly. Must be a verified
  email address already on your GitHub account. Only relevant when the
  sponsorable is yourself. Defaults to your primary email address on file if omitted.
  """
  contactEmail: String
  """
  The username of the supported fiscal host's GitHub organization, if you want
  to receive sponsorship payouts through a fiscal host rather than directly to a
  bank account. For example, 'Open-Source-Collective' for Open Source Collective
  or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
  for more information.
  """
  fiscalHostLogin: String
  """
  The URL for your profile page on the fiscal host's website, e.g.,
  https://opencollective.com/babel or https://numfocus.org/project/bokeh.
  Required if fiscalHostLogin is specified.
  """
  fiscallyHostedProjectProfileUrl: String
  """
  Provide an introduction to serve as the main focus that appears on your GitHub
  Sponsors profile. It's a great opportunity to help potential sponsors learn
  more about you, your work, and why their sponsorship is important to you.
  GitHub-flavored Markdown is supported.
  """
  fullDescription: String
  """
  The country or region where the sponsorable resides. This is for tax purposes.
  Required if the sponsorable is yourself, ignored when sponsorableLogin
  specifies an organization.
  """
  residenceCountryOrRegionCode: gh_SponsorsCountryOrRegionCode
  """
  The username of the organization to create a GitHub Sponsors profile for, if
  desired. Defaults to creating a GitHub Sponsors profile for the authenticated
  user if omitted.
  """
  sponsorableLogin: String
}

"""Autogenerated return type of CreateSponsorsListing"""
type gh_CreateSponsorsListingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new GitHub Sponsors profile."""
  sponsorsListing: gh_SponsorsListing
}

"""Autogenerated input type of CreateSponsorsTier"""
input gh_CreateSponsorsTierInput {
  """The value of the new tier in US dollars. Valid values: 1-12000."""
  amount: Int!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
  """
  description: String!
  """
  Whether sponsorships using this tier should happen monthly/yearly or just once.
  """
  isRecurring: Boolean = true
  """
  Whether to make the tier available immediately for sponsors to choose.
  Defaults to creating a draft tier that will not be publicly visible.
  """
  publish: Boolean = false
  """
  Optional ID of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
  """
  Optional name of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization. Necessary if
  repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
  """
  repositoryName: String
  """
  Optional login of the organization owner of the private repository that
  sponsors at this tier should gain read-only access to. Necessary if
  repositoryName is given. Will be ignored if repositoryId is given.
  """
  repositoryOwnerLogin: String
  """
  The ID of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")
  """
  The username of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableId is not given.
  """
  sponsorableLogin: String
  """Optional message new sponsors at this tier will receive."""
  welcomeMessage: String
}

"""Autogenerated return type of CreateSponsorsTier"""
type gh_CreateSponsorsTierPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new tier."""
  sponsorsTier: gh_SponsorsTier
}

"""Autogenerated input type of CreateSponsorship"""
input gh_CreateSponsorshipInput {
  """
  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
  """
  amount: Int
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
  """
  isRecurring: Boolean
  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: gh_SponsorshipPrivacy = PUBLIC
  """Whether the sponsor should receive email updates from the sponsorable."""
  receiveEmails: Boolean = true
  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")
  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String
  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")
  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
  """
  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
  """
  tierId: ID @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""Autogenerated return type of CreateSponsorship"""
type gh_CreateSponsorshipPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The sponsorship that was started."""
  sponsorship: gh_Sponsorship
}

"""Autogenerated input type of CreateSponsorships"""
input gh_CreateSponsorshipsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorables. Public visibility still does not reveal the dollar value of
  the sponsorship.
  """
  privacyLevel: gh_SponsorshipPrivacy = PUBLIC
  """
  Whether the sponsor should receive email updates from the sponsorables.
  """
  receiveEmails: Boolean = false
  """
  The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
  """
  sponsorLogin: String!
  """The list of maintainers to sponsor and for how much apiece."""
  sponsorships: [gh_BulkSponsorship!]!
}

"""Autogenerated return type of CreateSponsorships"""
type gh_CreateSponsorshipsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The users and organizations who received a sponsorship."""
  sponsorables: [gh_Sponsorable!]
}

"""Autogenerated input type of CreateTeamDiscussionComment"""
input gh_CreateTeamDiscussionCommentInput {
  """
  The content of the comment. This field is required.
  
  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the discussion to which the comment belongs. This field is required.
  
  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `discussionId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  discussionId: ID @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""Autogenerated return type of CreateTeamDiscussionComment"""
type gh_CreateTeamDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new comment."""
  teamDiscussionComment: gh_TeamDiscussionComment @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
}

"""Autogenerated input type of CreateTeamDiscussion"""
input gh_CreateTeamDiscussionInput {
  """
  The content of the discussion. This field is required.
  
  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  If true, restricts the visibility of this discussion to team members and
  organization owners. If false or not specified, allows any organization member
  to view this discussion.
  
  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `private` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  private: Boolean
  """
  The ID of the team to which the discussion belongs. This field is required.
  
  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `teamId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  """
  The title of the discussion. This field is required.
  
  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `title` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  title: String
}

"""Autogenerated return type of CreateTeamDiscussion"""
type gh_CreateTeamDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new discussion."""
  teamDiscussion: gh_TeamDiscussion @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
}

"""Autogenerated input type of CreateUserList"""
input gh_CreateUserListInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A description of the list"""
  description: String
  """Whether or not the list is private"""
  isPrivate: Boolean = false
  """The name of the new list"""
  name: String!
}

"""Autogenerated return type of CreateUserList"""
type gh_CreateUserListPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The list that was just created"""
  list: gh_UserList
  """The user who created the list"""
  viewer: gh_User
}

"""Represents the contribution a user made by committing to a repository."""
type gh_CreatedCommitContribution implements gh_Contribution {
  """How many commits were made on this day to this repository by the user."""
  commitCount: Int!
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The repository the user made a commit in."""
  repository: gh_Repository!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""The connection type for CreatedCommitContribution."""
type gh_CreatedCommitContributionConnection {
  """A list of edges."""
  edges: [gh_CreatedCommitContributionEdge]
  """A list of nodes."""
  nodes: [gh_CreatedCommitContribution]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """
  Identifies the total count of commits across days and repositories in the connection.
  """
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CreatedCommitContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CreatedCommitContribution
}

"""Represents the contribution a user made on GitHub by opening an issue."""
type gh_CreatedIssueContribution implements gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """The issue that was opened."""
  issue: gh_Issue!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""The connection type for CreatedIssueContribution."""
type gh_CreatedIssueContributionConnection {
  """A list of edges."""
  edges: [gh_CreatedIssueContributionEdge]
  """A list of nodes."""
  nodes: [gh_CreatedIssueContribution]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CreatedIssueContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union gh_CreatedIssueOrRestrictedContribution = gh_CreatedIssueContribution | gh_RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type gh_CreatedPullRequestContribution implements gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The pull request that was opened."""
  pullRequest: gh_PullRequest!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""The connection type for CreatedPullRequestContribution."""
type gh_CreatedPullRequestContributionConnection {
  """A list of edges."""
  edges: [gh_CreatedPullRequestContributionEdge]
  """A list of nodes."""
  nodes: [gh_CreatedPullRequestContribution]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CreatedPullRequestContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union gh_CreatedPullRequestOrRestrictedContribution = gh_CreatedPullRequestContribution | gh_RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type gh_CreatedPullRequestReviewContribution implements gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The pull request the user reviewed."""
  pullRequest: gh_PullRequest!
  """The review the user left on the pull request."""
  pullRequestReview: gh_PullRequestReview!
  """The repository containing the pull request that the user reviewed."""
  repository: gh_Repository!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""The connection type for CreatedPullRequestReviewContribution."""
type gh_CreatedPullRequestReviewContributionConnection {
  """A list of edges."""
  edges: [gh_CreatedPullRequestReviewContributionEdge]
  """A list of nodes."""
  nodes: [gh_CreatedPullRequestReviewContribution]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CreatedPullRequestReviewContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type gh_CreatedRepositoryContribution implements gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The repository that was created."""
  repository: gh_Repository!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""The connection type for CreatedRepositoryContribution."""
type gh_CreatedRepositoryContributionConnection {
  """A list of edges."""
  edges: [gh_CreatedRepositoryContributionEdge]
  """A list of nodes."""
  nodes: [gh_CreatedRepositoryContribution]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_CreatedRepositoryContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union gh_CreatedRepositoryOrRestrictedContribution = gh_CreatedRepositoryContribution | gh_RestrictedContribution

"""Represents a mention made by one issue or pull request to another."""
type gh_CrossReferencedEvent implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the CrossReferencedEvent object"""
  id: ID!
  """Reference originated in a different repository."""
  isCrossRepository: Boolean!
  """Identifies when the reference was made."""
  referencedAt: DateTime!
  """The HTTP path for this pull request."""
  resourcePath: gh_URI!
  """Issue or pull request that made the reference."""
  source: gh_ReferencedSubject!
  """Issue or pull request to which the reference was made."""
  target: gh_ReferencedSubject!
  """The HTTP URL for this pull request."""
  url: gh_URI!
  """Checks if the target will be closed when the source is merged."""
  willCloseTarget: Boolean!
}

"""An ISO-8601 encoded date string."""
scalar Date

"""An ISO-8601 encoded UTC date string."""
scalar DateTime

"""Autogenerated input type of DeclineTopicSuggestion"""
input gh_DeclineTopicSuggestionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The name of the suggested topic.
  
  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String
  """
  The reason why the suggested topic is declined.
  
  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `reason` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  reason: gh_TopicSuggestionDeclineReason
  """
  The Node ID of the repository.
  
  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of DeclineTopicSuggestion"""
type gh_DeclineTopicSuggestionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The declined topic."""
  topic: gh_Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""The possible base permissions for repositories."""
enum gh_DefaultRepositoryPermissionField {
  """Can read, write, and administrate repos by default"""
  ADMIN
  """No access"""
  NONE
  """Can read repos by default"""
  READ
  """Can read and write repos by default"""
  WRITE
}

"""Entities that can be deleted."""
interface gh_Deletable {
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
}

"""Autogenerated input type of DeleteBranchProtectionRule"""
input gh_DeleteBranchProtectionRuleInput {
  """The global relay id of the branch protection rule to be deleted."""
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteBranchProtectionRule"""
type gh_DeleteBranchProtectionRulePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteDeployment"""
input gh_DeleteDeploymentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the deployment to be deleted."""
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

"""Autogenerated return type of DeleteDeployment"""
type gh_DeleteDeploymentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteDiscussionComment"""
input gh_DeleteDiscussionCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node id of the discussion comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""Autogenerated return type of DeleteDiscussionComment"""
type gh_DeleteDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion comment that was just deleted."""
  comment: gh_DiscussionComment
}

"""Autogenerated input type of DeleteDiscussion"""
input gh_DeleteDiscussionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the discussion to delete."""
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""Autogenerated return type of DeleteDiscussion"""
type gh_DeleteDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion that was just deleted."""
  discussion: gh_Discussion
}

"""Autogenerated input type of DeleteEnvironment"""
input gh_DeleteEnvironmentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the environment to be deleted."""
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

"""Autogenerated return type of DeleteEnvironment"""
type gh_DeleteEnvironmentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteIpAllowListEntry"""
input gh_DeleteIpAllowListEntryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the IP allow list entry to delete."""
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

"""Autogenerated return type of DeleteIpAllowListEntry"""
type gh_DeleteIpAllowListEntryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The IP allow list entry that was deleted."""
  ipAllowListEntry: gh_IpAllowListEntry
}

"""Autogenerated input type of DeleteIssueComment"""
input gh_DeleteIssueCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""Autogenerated return type of DeleteIssueComment"""
type gh_DeleteIssueCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteIssue"""
input gh_DeleteIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the issue to delete."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""Autogenerated return type of DeleteIssue"""
type gh_DeleteIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository the issue belonged to"""
  repository: gh_Repository
}

"""Autogenerated input type of DeleteLabel"""
input gh_DeleteLabelInput @preview(toggledBy: "bane-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the label to be deleted."""
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

"""Autogenerated return type of DeleteLabel"""
type gh_DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteLinkedBranch"""
input gh_DeleteLinkedBranchInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the linked branch"""
  linkedBranchId: ID! @possibleTypes(concreteTypes: ["LinkedBranch"])
}

"""Autogenerated return type of DeleteLinkedBranch"""
type gh_DeleteLinkedBranchPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue the linked branch was unlinked from."""
  issue: gh_Issue
}

"""Autogenerated input type of DeletePackageVersion"""
input gh_DeletePackageVersionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the package version to be deleted."""
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""Autogenerated return type of DeletePackageVersion"""
type gh_DeletePackageVersionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the operation succeeded."""
  success: Boolean
}

"""Autogenerated input type of DeleteProjectCard"""
input gh_DeleteProjectCardInput {
  """The id of the card to delete."""
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProjectCard"""
type gh_DeleteProjectCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The column the deleted card was in."""
  column: gh_ProjectColumn
  """The deleted card ID."""
  deletedCardId: ID
}

"""Autogenerated input type of DeleteProjectColumn"""
input gh_DeleteProjectColumnInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the column to delete."""
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""Autogenerated return type of DeleteProjectColumn"""
type gh_DeleteProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The deleted column ID."""
  deletedColumnId: ID
  """The project the deleted column was in."""
  project: gh_Project
}

"""Autogenerated input type of DeleteProject"""
input gh_DeleteProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Project ID to update."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""Autogenerated return type of DeleteProject"""
type gh_DeleteProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository or organization the project was removed from."""
  owner: gh_ProjectOwner
}

"""Autogenerated input type of DeleteProjectV2Field"""
input gh_DeleteProjectV2FieldInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the field to delete."""
  fieldId: ID! @possibleTypes(concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"], abstractType: "ProjectV2FieldConfiguration")
}

"""Autogenerated return type of DeleteProjectV2Field"""
type gh_DeleteProjectV2FieldPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The deleted field."""
  projectV2Field: gh_ProjectV2FieldConfiguration
}

"""Autogenerated input type of DeleteProjectV2"""
input gh_DeleteProjectV2Input {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Project to delete."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated input type of DeleteProjectV2Item"""
input gh_DeleteProjectV2ItemInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the item to be removed."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """The ID of the Project from which the item should be removed."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of DeleteProjectV2Item"""
type gh_DeleteProjectV2ItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the deleted item."""
  deletedItemId: ID
}

"""Autogenerated return type of DeleteProjectV2"""
type gh_DeleteProjectV2Payload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The deleted Project."""
  projectV2: gh_ProjectV2
}

"""Autogenerated input type of DeleteProjectV2Workflow"""
input gh_DeleteProjectV2WorkflowInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the workflow to be removed."""
  workflowId: ID! @possibleTypes(concreteTypes: ["ProjectV2Workflow"])
}

"""Autogenerated return type of DeleteProjectV2Workflow"""
type gh_DeleteProjectV2WorkflowPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the deleted workflow."""
  deletedWorkflowId: ID
  """The project the deleted workflow was in."""
  projectV2: gh_ProjectV2
}

"""Autogenerated input type of DeletePullRequestReviewComment"""
input gh_DeletePullRequestReviewCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""Autogenerated return type of DeletePullRequestReviewComment"""
type gh_DeletePullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request review the deleted comment belonged to."""
  pullRequestReview: gh_PullRequestReview
  """The deleted pull request review comment."""
  pullRequestReviewComment: gh_PullRequestReviewComment
}

"""Autogenerated input type of DeletePullRequestReview"""
input gh_DeletePullRequestReviewInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the pull request review to delete."""
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""Autogenerated return type of DeletePullRequestReview"""
type gh_DeletePullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The deleted pull request review."""
  pullRequestReview: gh_PullRequestReview
}

"""Autogenerated input type of DeleteRef"""
input gh_DeleteRefInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the Ref to be deleted."""
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""Autogenerated return type of DeleteRef"""
type gh_DeleteRefPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteRepositoryRuleset"""
input gh_DeleteRepositoryRulesetInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The global relay id of the repository ruleset to be deleted."""
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
}

"""Autogenerated return type of DeleteRepositoryRuleset"""
type gh_DeleteRepositoryRulesetPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteTeamDiscussionComment"""
input gh_DeleteTeamDiscussionCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""Autogenerated return type of DeleteTeamDiscussionComment"""
type gh_DeleteTeamDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteTeamDiscussion"""
input gh_DeleteTeamDiscussionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion ID to delete."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""Autogenerated return type of DeleteTeamDiscussion"""
type gh_DeleteTeamDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteUserList"""
input gh_DeleteUserListInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the list to delete."""
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])
}

"""Autogenerated return type of DeleteUserList"""
type gh_DeleteUserListPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The owner of the list that will be deleted"""
  user: gh_User
}

"""Autogenerated input type of DeleteVerifiableDomain"""
input gh_DeleteVerifiableDomainInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the verifiable domain to delete."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""Autogenerated return type of DeleteVerifiableDomain"""
type gh_DeleteVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The owning account from which the domain was deleted."""
  owner: gh_VerifiableDomainOwner
}

"""Represents a 'demilestoned' event on a given issue or pull request."""
type gh_DemilestonedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the DemilestonedEvent object"""
  id: ID!
  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!
  """Object referenced by event."""
  subject: gh_MilestoneItem!
}

"""A Dependabot Update for a dependency in a repository"""
type gh_DependabotUpdate implements gh_RepositoryNode {
  """The error from a dependency update"""
  error: gh_DependabotUpdateError
  """The associated pull request"""
  pullRequest: gh_PullRequest
  """The repository associated with this node."""
  repository: gh_Repository!
}

"""An error produced from a Dependabot Update"""
type gh_DependabotUpdateError {
  """The body of the error"""
  body: String!
  """The error code"""
  errorType: String!
  """The title of the error"""
  title: String!
}

"""A dependency manifest entry"""
type gh_DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  """Does the dependency itself have dependencies?"""
  hasDependencies: Boolean!
  """The original name of the package, as it appears in the manifest."""
  packageLabel: String! @deprecated(reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC.")
  """The dependency package manager"""
  packageManager: String
  """
  The name of the package in the canonical form used by the package manager.
  """
  packageName: String!
  """The repository containing the package"""
  repository: gh_Repository
  """The dependency version requirements"""
  requirements: String!
}

"""The connection type for DependencyGraphDependency."""
type gh_DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview") {
  """A list of edges."""
  edges: [gh_DependencyGraphDependencyEdge]
  """A list of nodes."""
  nodes: [gh_DependencyGraphDependency]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DependencyGraphDependency
}

"""The possible ecosystems of a dependency graph package."""
enum gh_DependencyGraphEcosystem {
  """GitHub Actions"""
  ACTIONS
  """PHP packages hosted at packagist.org"""
  COMPOSER
  """Go modules"""
  GO
  """Java artifacts hosted at the Maven central repository"""
  MAVEN
  """JavaScript packages hosted at npmjs.com"""
  NPM
  """.NET packages hosted at the NuGet Gallery"""
  NUGET
  """Python packages hosted at PyPI.org"""
  PIP
  """Dart packages hosted at pub.dev"""
  PUB
  """Ruby gems hosted at RubyGems.org"""
  RUBYGEMS
  """Rust crates"""
  RUST
  """Swift packages"""
  SWIFT
}

"""Dependency manifest for a repository"""
type gh_DependencyGraphManifest implements gh_Node @preview(toggledBy: "hawkgirl-preview") {
  """Path to view the manifest file blob"""
  blobPath: String!
  """A list of manifest dependencies"""
  dependencies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DependencyGraphDependencyConnection
  """The number of dependencies listed in the manifest"""
  dependenciesCount: Int
  """Is the manifest too big to parse?"""
  exceedsMaxSize: Boolean!
  """Fully qualified manifest filename"""
  filename: String!
  """The Node ID of the DependencyGraphManifest object"""
  id: ID!
  """Were we able to parse the manifest?"""
  parseable: Boolean!
  """The repository containing the manifest"""
  repository: gh_Repository!
}

"""The connection type for DependencyGraphManifest."""
type gh_DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  """A list of edges."""
  edges: [gh_DependencyGraphManifestEdge]
  """A list of nodes."""
  nodes: [gh_DependencyGraphManifest]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DependencyGraphManifest
}

"""A repository deploy key."""
type gh_DeployKey implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the DeployKey object"""
  id: ID!
  """The deploy key."""
  key: String!
  """Whether or not the deploy key is read only."""
  readOnly: Boolean!
  """The deploy key title."""
  title: String!
  """Whether or not the deploy key has been verified."""
  verified: Boolean!
}

"""The connection type for DeployKey."""
type gh_DeployKeyConnection {
  """A list of edges."""
  edges: [gh_DeployKeyEdge]
  """A list of nodes."""
  nodes: [gh_DeployKey]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeployKeyEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DeployKey
}

"""Represents a 'deployed' event on a given pull request."""
type gh_DeployedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The deployment associated with the 'deployed' event."""
  deployment: gh_Deployment!
  """The Node ID of the DeployedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """The ref associated with the 'deployed' event."""
  ref: gh_Ref
}

"""Represents triggered deployment instance."""
type gh_Deployment implements gh_Node {
  """Identifies the commit sha of the deployment."""
  commit: gh_Commit
  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the actor who triggered the deployment."""
  creator: gh_Actor!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The deployment description."""
  description: String
  """The latest environment to which this deployment was made."""
  environment: String
  """The Node ID of the Deployment object"""
  id: ID!
  """The latest environment to which this deployment was made."""
  latestEnvironment: String
  """The latest status of this deployment."""
  latestStatus: gh_DeploymentStatus
  """The original environment to which this deployment was made."""
  originalEnvironment: String
  """Extra information that a deployment system might need."""
  payload: String
  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: gh_Ref
  """Identifies the repository associated with the deployment."""
  repository: gh_Repository!
  """The current state of the deployment."""
  state: gh_DeploymentState
  """A list of statuses associated with the deployment."""
  statuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeploymentStatusConnection
  """The deployment task."""
  task: String
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for Deployment."""
type gh_DeploymentConnection {
  """A list of edges."""
  edges: [gh_DeploymentEdge]
  """A list of nodes."""
  nodes: [gh_Deployment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeploymentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type gh_DeploymentEnvironmentChangedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The deployment status that updated the deployment environment."""
  deploymentStatus: gh_DeploymentStatus!
  """The Node ID of the DeploymentEnvironmentChangedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
}

"""Ordering options for deployment connections"""
input gh_DeploymentOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order deployments by."""
  field: gh_DeploymentOrderField!
}

"""Properties by which deployment connections can be ordered."""
enum gh_DeploymentOrderField {
  """Order collection by creation time"""
  CREATED_AT
}

"""A protection rule."""
type gh_DeploymentProtectionRule {
  """Identifies the primary key from the database."""
  databaseId: Int
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean
  """The teams or users that can review the deployment"""
  reviewers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeploymentReviewerConnection!
  """The timeout in minutes for this protection rule."""
  timeout: Int!
  """The type of protection rule."""
  type: gh_DeploymentProtectionRuleType!
}

"""The connection type for DeploymentProtectionRule."""
type gh_DeploymentProtectionRuleConnection {
  """A list of edges."""
  edges: [gh_DeploymentProtectionRuleEdge]
  """A list of nodes."""
  nodes: [gh_DeploymentProtectionRule]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeploymentProtectionRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DeploymentProtectionRule
}

"""The possible protection rule types."""
enum gh_DeploymentProtectionRuleType {
  """Required reviewers"""
  REQUIRED_REVIEWERS
  """Wait timer"""
  WAIT_TIMER
}

"""A request to deploy a workflow run to an environment."""
type gh_DeploymentRequest {
  """Whether or not the current user can approve the deployment"""
  currentUserCanApprove: Boolean!
  """The target environment of the deployment"""
  environment: gh_Environment!
  """The teams or users that can review the deployment"""
  reviewers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeploymentReviewerConnection!
  """The wait timer in minutes configured in the environment"""
  waitTimer: Int!
  """The wait timer in minutes configured in the environment"""
  waitTimerStartedAt: DateTime
}

"""The connection type for DeploymentRequest."""
type gh_DeploymentRequestConnection {
  """A list of edges."""
  edges: [gh_DeploymentRequestEdge]
  """A list of nodes."""
  nodes: [gh_DeploymentRequest]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeploymentRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DeploymentRequest
}

"""A deployment review."""
type gh_DeploymentReview implements gh_Node {
  """The comment the user left."""
  comment: String!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The environments approved or rejected"""
  environments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_EnvironmentConnection!
  """The Node ID of the DeploymentReview object"""
  id: ID!
  """The decision of the user."""
  state: gh_DeploymentReviewState!
  """The user that reviewed the deployment."""
  user: gh_User!
}

"""The connection type for DeploymentReview."""
type gh_DeploymentReviewConnection {
  """A list of edges."""
  edges: [gh_DeploymentReviewEdge]
  """A list of nodes."""
  nodes: [gh_DeploymentReview]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeploymentReviewEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DeploymentReview
}

"""The possible states for a deployment review."""
enum gh_DeploymentReviewState {
  """The deployment was approved."""
  APPROVED
  """The deployment was rejected."""
  REJECTED
}

"""Users and teams."""
union gh_DeploymentReviewer = gh_Team | gh_User

"""The connection type for DeploymentReviewer."""
type gh_DeploymentReviewerConnection {
  """A list of edges."""
  edges: [gh_DeploymentReviewerEdge]
  """A list of nodes."""
  nodes: [gh_DeploymentReviewer]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeploymentReviewerEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DeploymentReviewer
}

"""The possible states in which a deployment can be."""
enum gh_DeploymentState {
  """The pending deployment was not updated after 30 minutes."""
  ABANDONED
  """The deployment is currently active."""
  ACTIVE
  """An inactive transient deployment."""
  DESTROYED
  """The deployment experienced an error."""
  ERROR
  """The deployment has failed."""
  FAILURE
  """The deployment is inactive."""
  INACTIVE
  """The deployment is in progress."""
  IN_PROGRESS
  """The deployment is pending."""
  PENDING
  """The deployment has queued"""
  QUEUED
  """The deployment was successful."""
  SUCCESS
  """The deployment is waiting."""
  WAITING
}

"""Describes the status of a given deployment attempt."""
type gh_DeploymentStatus implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the actor who triggered the deployment."""
  creator: gh_Actor!
  """Identifies the deployment associated with status."""
  deployment: gh_Deployment!
  """Identifies the description of the deployment."""
  description: String
  """
  Identifies the environment of the deployment at the time of this deployment status
  """
  environment: String @preview(toggledBy: "flash-preview")
  """Identifies the environment URL of the deployment."""
  environmentUrl: gh_URI
  """The Node ID of the DeploymentStatus object"""
  id: ID!
  """Identifies the log URL of the deployment."""
  logUrl: gh_URI
  """Identifies the current state of the deployment."""
  state: gh_DeploymentStatusState!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for DeploymentStatus."""
type gh_DeploymentStatusConnection {
  """A list of edges."""
  edges: [gh_DeploymentStatusEdge]
  """A list of nodes."""
  nodes: [gh_DeploymentStatus]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DeploymentStatusEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DeploymentStatus
}

"""The possible states for a deployment status."""
enum gh_DeploymentStatusState {
  """The deployment experienced an error."""
  ERROR
  """The deployment has failed."""
  FAILURE
  """The deployment is inactive."""
  INACTIVE
  """The deployment is in progress."""
  IN_PROGRESS
  """The deployment is pending."""
  PENDING
  """The deployment is queued"""
  QUEUED
  """The deployment was successful."""
  SUCCESS
  """The deployment is waiting."""
  WAITING
}

"""Autogenerated input type of DequeuePullRequest"""
input gh_DequeuePullRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the pull request to be dequeued."""
  id: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of DequeuePullRequest"""
type gh_DequeuePullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The merge queue entry of the dequeued pull request."""
  mergeQueueEntry: gh_MergeQueueEntry
}

"""The possible sides of a diff."""
enum gh_DiffSide {
  """The left side of the diff."""
  LEFT
  """The right side of the diff."""
  RIGHT
}

"""Autogenerated input type of DisablePullRequestAutoMerge"""
input gh_DisablePullRequestAutoMergeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the pull request to disable auto merge on."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of DisablePullRequestAutoMerge"""
type gh_DisablePullRequestAutoMergePayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request auto merge was disabled on."""
  pullRequest: gh_PullRequest
}

"""Represents a 'disconnected' event on a given issue or pull request."""
type gh_DisconnectedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the DisconnectedEvent object"""
  id: ID!
  """Reference originated in a different repository."""
  isCrossRepository: Boolean!
  """Issue or pull request from which the issue was disconnected."""
  source: gh_ReferencedSubject!
  """Issue or pull request which was disconnected."""
  subject: gh_ReferencedSubject!
}

"""A discussion in a repository."""
type gh_Discussion implements gh_Closable & gh_Comment & gh_Deletable & gh_Labelable & gh_Lockable & gh_Node & gh_Reactable & gh_RepositoryNode & gh_Subscribable & gh_Updatable & gh_Votable {
  """Reason that the conversation was locked."""
  activeLockReason: gh_LockReason
  """The comment chosen as this discussion's answer, if any."""
  answer: gh_DiscussionComment
  """The time when a user chose this discussion's answer, if answered."""
  answerChosenAt: DateTime
  """The user who chose this discussion's answer, if answered."""
  answerChosenBy: gh_Actor
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """The main text of the discussion post."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """The category for this discussion."""
  category: gh_DiscussionCategory!
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """The replies to the discussion."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DiscussionCommentConnection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the Discussion object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Only return answered/unanswered discussions"""
  isAnswered: Boolean
  """A list of labels associated with the object."""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for labels returned from the connection."""
    orderBy: gh_LabelOrder = {direction: ASC, field: CREATED_AT}
  ): gh_LabelConnection
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """`true` if the object is locked"""
  locked: Boolean!
  """The number identifying this discussion within the repository."""
  number: Int!
  """The poll associated with this discussion, if one exists."""
  poll: gh_DiscussionPoll
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The path for this discussion."""
  resourcePath: gh_URI!
  """Identifies the reason for the discussion's state."""
  stateReason: gh_DiscussionStateReason
  """The title of this discussion."""
  title: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """Number of upvotes that this subject has received."""
  upvoteCount: Int!
  """The URL for this discussion."""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  """Whether or not the current user has already upvoted this subject."""
  viewerHasUpvoted: Boolean!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
}

"""A category for discussions in a repository."""
type gh_DiscussionCategory implements gh_Node & gh_RepositoryNode {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """A description of this category."""
  description: String
  """An emoji representing this category."""
  emoji: String!
  """This category's emoji rendered as HTML."""
  emojiHTML: gh_HTML!
  """The Node ID of the DiscussionCategory object"""
  id: ID!
  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!
  """The name of this category."""
  name: String!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The slug of this category."""
  slug: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for DiscussionCategory."""
type gh_DiscussionCategoryConnection {
  """A list of edges."""
  edges: [gh_DiscussionCategoryEdge]
  """A list of nodes."""
  nodes: [gh_DiscussionCategory]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DiscussionCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DiscussionCategory
}

"""The possible reasons for closing a discussion."""
enum gh_DiscussionCloseReason {
  """The discussion is a duplicate of another"""
  DUPLICATE
  """The discussion is no longer relevant"""
  OUTDATED
  """The discussion has been resolved"""
  RESOLVED
}

"""A comment on a discussion."""
type gh_DiscussionComment implements gh_Comment & gh_Deletable & gh_Minimizable & gh_Node & gh_Reactable & gh_Updatable & gh_UpdatableComment & gh_Votable {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """The body as Markdown."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The time when this replied-to comment was deleted"""
  deletedAt: DateTime
  """The discussion this comment was created in"""
  discussion: gh_Discussion
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the DiscussionComment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Has this comment been chosen as the answer of its discussion?"""
  isAnswer: Boolean!
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The threaded replies to this comment."""
  replies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DiscussionCommentConnection!
  """The discussion comment this comment is a reply to"""
  replyTo: gh_DiscussionComment
  """The path for this discussion comment."""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """Number of upvotes that this subject has received."""
  upvoteCount: Int!
  """The URL for this discussion comment."""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Can the current user mark this comment as an answer?"""
  viewerCanMarkAsAnswer: Boolean!
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Can the current user unmark this comment as an answer?"""
  viewerCanUnmarkAsAnswer: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  """Whether or not the current user has already upvoted this subject."""
  viewerHasUpvoted: Boolean!
}

"""The connection type for DiscussionComment."""
type gh_DiscussionCommentConnection {
  """A list of edges."""
  edges: [gh_DiscussionCommentEdge]
  """A list of nodes."""
  nodes: [gh_DiscussionComment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DiscussionCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DiscussionComment
}

"""The connection type for Discussion."""
type gh_DiscussionConnection {
  """A list of edges."""
  edges: [gh_DiscussionEdge]
  """A list of nodes."""
  nodes: [gh_Discussion]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DiscussionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Discussion
}

"""Ways in which lists of discussions can be ordered upon return."""
input gh_DiscussionOrder {
  """The direction in which to order discussions by the specified field."""
  direction: gh_OrderDirection!
  """The field by which to order discussions."""
  field: gh_DiscussionOrderField!
}

"""Properties by which discussion connections can be ordered."""
enum gh_DiscussionOrderField {
  """Order discussions by creation time."""
  CREATED_AT
  """Order discussions by most recent modification time."""
  UPDATED_AT
}

"""A poll for a discussion."""
type gh_DiscussionPoll implements gh_Node {
  """The discussion that this poll belongs to."""
  discussion: gh_Discussion
  """The Node ID of the DiscussionPoll object"""
  id: ID!
  """The options for this poll."""
  options(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the options for the discussion poll."""
    orderBy: gh_DiscussionPollOptionOrder = {direction: ASC, field: AUTHORED_ORDER}
  ): gh_DiscussionPollOptionConnection
  """The question that is being asked by this poll."""
  question: String!
  """The total number of votes that have been cast for this poll."""
  totalVoteCount: Int!
  """Indicates if the viewer has permission to vote in this poll."""
  viewerCanVote: Boolean!
  """Indicates if the viewer has voted for any option in this poll."""
  viewerHasVoted: Boolean!
}

"""An option for a discussion poll."""
type gh_DiscussionPollOption implements gh_Node {
  """The Node ID of the DiscussionPollOption object"""
  id: ID!
  """The text for this option."""
  option: String!
  """The discussion poll that this option belongs to."""
  poll: gh_DiscussionPoll
  """The total number of votes that have been cast for this option."""
  totalVoteCount: Int!
  """Indicates if the viewer has voted for this option in the poll."""
  viewerHasVoted: Boolean!
}

"""The connection type for DiscussionPollOption."""
type gh_DiscussionPollOptionConnection {
  """A list of edges."""
  edges: [gh_DiscussionPollOptionEdge]
  """A list of nodes."""
  nodes: [gh_DiscussionPollOption]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_DiscussionPollOptionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_DiscussionPollOption
}

"""Ordering options for discussion poll option connections."""
input gh_DiscussionPollOptionOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order poll options by."""
  field: gh_DiscussionPollOptionOrderField!
}

"""Properties by which discussion poll option connections can be ordered."""
enum gh_DiscussionPollOptionOrderField {
  """
  Order poll options by the order that the poll author specified when creating the poll.
  """
  AUTHORED_ORDER
  """Order poll options by the number of votes it has."""
  VOTE_COUNT
}

"""The possible states of a discussion."""
enum gh_DiscussionState {
  """A discussion that has been closed"""
  CLOSED
  """A discussion that is open"""
  OPEN
}

"""The possible state reasons of a discussion."""
enum gh_DiscussionStateReason {
  """The discussion is a duplicate of another"""
  DUPLICATE
  """The discussion is no longer relevant"""
  OUTDATED
  """The discussion was reopened"""
  REOPENED
  """The discussion has been resolved"""
  RESOLVED
}

"""Autogenerated input type of DismissPullRequestReview"""
input gh_DismissPullRequestReviewInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The contents of the pull request review dismissal message."""
  message: String!
  """The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""Autogenerated return type of DismissPullRequestReview"""
type gh_DismissPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The dismissed pull request review."""
  pullRequestReview: gh_PullRequestReview
}

"""The possible reasons that a Dependabot alert was dismissed."""
enum gh_DismissReason {
  """A fix has already been started"""
  FIX_STARTED
  """This alert is inaccurate or incorrect"""
  INACCURATE
  """Vulnerable code is not actually used"""
  NOT_USED
  """No bandwidth to fix this"""
  NO_BANDWIDTH
  """Risk is tolerable to this project"""
  TOLERABLE_RISK
}

"""Autogenerated input type of DismissRepositoryVulnerabilityAlert"""
input gh_DismissRepositoryVulnerabilityAlertInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The reason the Dependabot alert is being dismissed."""
  dismissReason: gh_DismissReason!
  """The Dependabot alert ID to dismiss."""
  repositoryVulnerabilityAlertId: ID! @possibleTypes(concreteTypes: ["RepositoryVulnerabilityAlert"])
}

"""Autogenerated return type of DismissRepositoryVulnerabilityAlert"""
type gh_DismissRepositoryVulnerabilityAlertPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Dependabot alert that was dismissed"""
  repositoryVulnerabilityAlert: gh_RepositoryVulnerabilityAlert
}

"""A draft issue within a project."""
type gh_DraftIssue implements gh_Node {
  """A list of users to assigned to this draft issue."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """The body of the draft issue."""
  body: String!
  """The body of the draft issue rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body of the draft issue rendered to text."""
  bodyText: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created this draft issue."""
  creator: gh_Actor
  """The Node ID of the DraftIssue object"""
  id: ID!
  """
  List of items linked with the draft issue (currently draft issue can be linked to only one item).
  """
  projectV2Items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2ItemConnection!
  """
  Projects that link to this draft issue (currently draft issue can be linked to only one project).
  """
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2Connection!
  """The title of the draft issue"""
  title: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Specifies a review comment to be left with a Pull Request Review."""
input gh_DraftPullRequestReviewComment {
  """Body of the comment to leave."""
  body: String!
  """Path to the file being commented on."""
  path: String!
  """Position in the file to leave a comment on."""
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input gh_DraftPullRequestReviewThread {
  """Body of the comment to leave."""
  body: String!
  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!
  """Path to the file being commented on."""
  path: String!
  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: gh_DiffSide = RIGHT
  """The first line of the range to which the comment refers."""
  startLine: Int
  """The side of the diff on which the start line resides."""
  startSide: gh_DiffSide = RIGHT
}

"""Autogenerated input type of EnablePullRequestAutoMerge"""
input gh_EnablePullRequestAutoMergeInput {
  """The email address to associate with this merge."""
  authorEmail: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Commit body to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit message is ignored.
  """
  commitBody: String
  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit headline is ignored.
  """
  commitHeadline: String
  """The expected head OID of the pull request."""
  expectedHeadOid: gh_GitObjectID
  """
  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
  with a merge queue any input value for merge method is ignored.
  """
  mergeMethod: gh_PullRequestMergeMethod = MERGE
  """ID of the pull request to enable auto-merge on."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of EnablePullRequestAutoMerge"""
type gh_EnablePullRequestAutoMergePayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request auto-merge was enabled on."""
  pullRequest: gh_PullRequest
}

"""Autogenerated input type of EnqueuePullRequest"""
input gh_EnqueuePullRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The expected head OID of the pull request."""
  expectedHeadOid: gh_GitObjectID
  """Add the pull request to the front of the queue."""
  jump: Boolean
  """The ID of the pull request to enqueue."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of EnqueuePullRequest"""
type gh_EnqueuePullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The merge queue entry for the enqueued pull request."""
  mergeQueueEntry: gh_MergeQueueEntry
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type gh_Enterprise implements gh_AnnouncementBanner & gh_Node {
  """The text of the announcement"""
  announcement: String
  """The expiration date of the announcement, if any"""
  announcementExpiresAt: DateTime
  """Whether the announcement can be dismissed by the user"""
  announcementUserDismissible: Boolean
  """A URL pointing to the enterprise's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """Enterprise billing information visible to enterprise billing managers."""
  billingInfo: gh_EnterpriseBillingInfo
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The description of the enterprise."""
  description: String
  """The description of the enterprise as HTML."""
  descriptionHTML: gh_HTML!
  """The Node ID of the Enterprise object"""
  id: ID!
  """The location of the enterprise."""
  location: String
  """A list of users who are members of this enterprise."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Only return members within the selected GitHub Enterprise deployment"""
    deployment: gh_EnterpriseUserDeployment
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Only return members with this two-factor authentication status. Does not
    include members who only have an account on a GitHub Enterprise Server instance.
    """
    hasTwoFactorEnabled: Boolean = null
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for members returned from the connection."""
    orderBy: gh_EnterpriseMemberOrder = {direction: ASC, field: LOGIN}
    """Only return members within the organizations with these logins"""
    organizationLogins: [String!]
    """The search string to look for."""
    query: String
    """The role of the user in the enterprise organization or server."""
    role: gh_EnterpriseUserAccountMembershipRole
  ): gh_EnterpriseMemberConnection!
  """The name of the enterprise."""
  name: String!
  """A list of organizations that belong to this enterprise."""
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations returned from the connection."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The search string to look for."""
    query: String
    """The viewer's role in an organization."""
    viewerOrganizationRole: gh_RoleInOrganization
  ): gh_OrganizationConnection!
  """
  Enterprise information visible to enterprise owners or enterprise owners'
  personal access tokens (classic) with read:enterprise or admin:enterprise scope.
  """
  ownerInfo: gh_EnterpriseOwnerInfo
  """The HTTP path for this enterprise."""
  resourcePath: gh_URI!
  """The URL-friendly identifier for the enterprise."""
  slug: String!
  """The HTTP URL for this enterprise."""
  url: gh_URI!
  """Is the current viewer an admin of this enterprise?"""
  viewerIsAdmin: Boolean!
  """The URL of the enterprise website."""
  websiteUrl: gh_URI
}

"""The connection type for User."""
type gh_EnterpriseAdministratorConnection {
  """A list of edges."""
  edges: [gh_EnterpriseAdministratorEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A User who is an administrator of an enterprise."""
type gh_EnterpriseAdministratorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_User
  """The role of the administrator."""
  role: gh_EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type gh_EnterpriseAdministratorInvitation implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The email of the person who was invited to the enterprise."""
  email: String
  """The enterprise the invitation is for."""
  enterprise: gh_Enterprise!
  """The Node ID of the EnterpriseAdministratorInvitation object"""
  id: ID!
  """The user who was invited to the enterprise."""
  invitee: gh_User
  """The user who created the invitation."""
  inviter: gh_User
  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: gh_EnterpriseAdministratorRole!
}

"""The connection type for EnterpriseAdministratorInvitation."""
type gh_EnterpriseAdministratorInvitationConnection {
  """A list of edges."""
  edges: [gh_EnterpriseAdministratorInvitationEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseAdministratorInvitation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnterpriseAdministratorInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseAdministratorInvitation
}

"""Ordering options for enterprise administrator invitation connections"""
input gh_EnterpriseAdministratorInvitationOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order enterprise administrator invitations by."""
  field: gh_EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum gh_EnterpriseAdministratorInvitationOrderField {
  """Order enterprise administrator member invitations by creation time"""
  CREATED_AT
}

"""The possible administrator roles in an enterprise account."""
enum gh_EnterpriseAdministratorRole {
  """Represents a billing manager of the enterprise account."""
  BILLING_MANAGER
  """Represents an owner of the enterprise account."""
  OWNER
}

"""
The possible values for the enterprise allow private repository forking policy value.
"""
enum gh_EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  """
  Members can fork a repository to an organization within this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS
  """
  Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS
  """
  Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
  """
  EVERYWHERE
  """
  Members can fork a repository only within the same organization (intra-org).
  """
  SAME_ORGANIZATION
  """
  Members can fork a repository to their user account or within the same organization.
  """
  SAME_ORGANIZATION_USER_ACCOUNTS
  """Members can fork a repository to their user account."""
  USER_ACCOUNTS
}

"""Metadata for an audit entry containing enterprise account information."""
interface gh_EnterpriseAuditEntryData {
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type gh_EnterpriseBillingInfo {
  """The number of licenseable users/emails across the enterprise."""
  allLicensableUsersCount: Int!
  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!
  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!
  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!
  """The bandwidth usage as a percentage of the bandwidth quota."""
  bandwidthUsagePercentage: Int!
  """The storage quota in GB for all organizations owned by the enterprise."""
  storageQuota: Float!
  """The storage usage in GB for all organizations owned by the enterprise."""
  storageUsage: Float!
  """The storage usage as a percentage of the storage quota."""
  storageUsagePercentage: Int!
  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!
  """The total number of licenses allocated."""
  totalLicenses: Int!
}

"""The connection type for Enterprise."""
type gh_EnterpriseConnection {
  """A list of edges."""
  edges: [gh_EnterpriseEdge]
  """A list of nodes."""
  nodes: [gh_Enterprise]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum gh_EnterpriseDefaultRepositoryPermissionSettingValue {
  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN
  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE
  """
  Organizations in the enterprise choose base repository permissions for their members.
  """
  NO_POLICY
  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ
  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE
}

"""An edge in a connection."""
type gh_EnterpriseEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Enterprise
}

"""The possible values for an enabled/disabled enterprise setting."""
enum gh_EnterpriseEnabledDisabledSettingValue {
  """The setting is disabled for organizations in the enterprise."""
  DISABLED
  """The setting is enabled for organizations in the enterprise."""
  ENABLED
  """There is no policy set for organizations in the enterprise."""
  NO_POLICY
}

"""The possible values for an enabled/no policy enterprise setting."""
enum gh_EnterpriseEnabledSettingValue {
  """The setting is enabled for organizations in the enterprise."""
  ENABLED
  """There is no policy set for organizations in the enterprise."""
  NO_POLICY
}

"""The connection type for OrganizationInvitation."""
type gh_EnterpriseFailedInvitationConnection {
  """A list of edges."""
  edges: [gh_EnterpriseFailedInvitationEdge]
  """A list of nodes."""
  nodes: [gh_OrganizationInvitation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """Identifies the total count of unique users in the connection."""
  totalUniqueUserCount: Int!
}

"""A failed invitation to be a member in an enterprise organization."""
type gh_EnterpriseFailedInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_OrganizationInvitation
}

"""
An identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type gh_EnterpriseIdentityProvider implements gh_Node {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: gh_SamlDigestAlgorithm
  """The enterprise this identity provider belongs to."""
  enterprise: gh_Enterprise
  """ExternalIdentities provisioned by this identity provider."""
  externalIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter to external identities with the users login"""
    login: String
    """Filter to external identities with valid org membership only"""
    membersOnly: Boolean
    """Filter to external identities with the users userName/NameID attribute"""
    userName: String
  ): gh_ExternalIdentityConnection!
  """The Node ID of the EnterpriseIdentityProvider object"""
  id: ID!
  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: gh_X509Certificate
  """The Issuer Entity ID for the SAML identity provider."""
  issuer: String
  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]
  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: gh_SamlSignatureAlgorithm
  """The URL endpoint for the identity provider's SAML SSO."""
  ssoUrl: gh_URI
}

"""An object that is a member of an enterprise."""
union gh_EnterpriseMember = gh_EnterpriseUserAccount | gh_User

"""The connection type for EnterpriseMember."""
type gh_EnterpriseMemberConnection {
  """A list of edges."""
  edges: [gh_EnterpriseMemberEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseMember]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type gh_EnterpriseMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseMember
}

"""Ordering options for enterprise member connections."""
input gh_EnterpriseMemberOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order enterprise members by."""
  field: gh_EnterpriseMemberOrderField!
}

"""Properties by which enterprise member connections can be ordered."""
enum gh_EnterpriseMemberOrderField {
  """Order enterprise members by creation time"""
  CREATED_AT
  """Order enterprise members by login"""
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum gh_EnterpriseMembersCanCreateRepositoriesSettingValue {
  """Members will be able to create public and private repositories."""
  ALL
  """Members will not be able to create public or private repositories."""
  DISABLED
  """
  Organization owners choose whether to allow members to create repositories.
  """
  NO_POLICY
  """Members will be able to create only private repositories."""
  PRIVATE
  """Members will be able to create only public repositories."""
  PUBLIC
}

"""The possible values for the members can make purchases setting."""
enum gh_EnterpriseMembersCanMakePurchasesSettingValue {
  """The setting is disabled for organizations in the enterprise."""
  DISABLED
  """The setting is enabled for organizations in the enterprise."""
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum gh_EnterpriseMembershipType {
  """Returns all enterprises in which the user is an admin."""
  ADMIN
  """
  Returns all enterprises in which the user is a member, admin, or billing manager.
  """
  ALL
  """Returns all enterprises in which the user is a billing manager."""
  BILLING_MANAGER
  """
  Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
  """
  ORG_MEMBERSHIP
}

"""Ordering options for enterprises."""
input gh_EnterpriseOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order enterprises by."""
  field: gh_EnterpriseOrderField!
}

"""Properties by which enterprise connections can be ordered."""
enum gh_EnterpriseOrderField {
  """Order enterprises by name"""
  NAME
}

"""The connection type for Organization."""
type gh_EnterpriseOrganizationMembershipConnection {
  """A list of edges."""
  edges: [gh_EnterpriseOrganizationMembershipEdge]
  """A list of nodes."""
  nodes: [gh_Organization]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An enterprise organization that a user is a member of."""
type gh_EnterpriseOrganizationMembershipEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Organization
  """The role of the user in the enterprise membership."""
  role: gh_EnterpriseUserAccountMembershipRole!
}

"""The connection type for User."""
type gh_EnterpriseOutsideCollaboratorConnection {
  """A list of edges."""
  edges: [gh_EnterpriseOutsideCollaboratorEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type gh_EnterpriseOutsideCollaboratorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_User
  """The enterprise organization repositories this user is a member of."""
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories."""
    orderBy: gh_RepositoryOrder = {direction: ASC, field: NAME}
  ): gh_EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type gh_EnterpriseOwnerInfo {
  """A list of all of the administrators for this enterprise."""
  admins(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Only return administrators with this two-factor authentication status."""
    hasTwoFactorEnabled: Boolean = null
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for administrators returned from the connection."""
    orderBy: gh_EnterpriseMemberOrder = {direction: ASC, field: LOGIN}
    """Only return members within the organizations with these logins"""
    organizationLogins: [String!]
    """The search string to look for."""
    query: String
    """The role to filter by."""
    role: gh_EnterpriseAdministratorRole
  ): gh_EnterpriseAdministratorConnection!
  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!
  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  allowPrivateRepositoryForkingSettingPolicyValue: gh_EnterpriseAllowPrivateRepositoryForkingPolicyValue
  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: gh_EnterpriseDefaultRepositoryPermissionSettingValue!
  """
  A list of enterprise organizations configured with the provided base repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The permission to find organizations for."""
    value: gh_DefaultRepositoryPermissionField!
  ): gh_OrganizationConnection!
  """
  A list of domains owned by the enterprise. Visible to enterprise owners or
  enterprise owners' personal access tokens (classic) with admin:enterprise scope.
  """
  domains(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Filter whether or not the domain is approved."""
    isApproved: Boolean = null
    """Filter whether or not the domain is verified."""
    isVerified: Boolean = null
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for verifiable domains returned."""
    orderBy: gh_VerifiableDomainOrder = {direction: ASC, field: DOMAIN}
  ): gh_VerifiableDomainConnection!
  """Enterprise Server installations owned by the enterprise."""
  enterpriseServerInstallations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Enterprise Server installations returned."""
    orderBy: gh_EnterpriseServerInstallationOrder = {direction: ASC, field: HOST_NAME}
  ): gh_EnterpriseServerInstallationConnection!
  """A list of failed invitations in the enterprise."""
  failedInvitations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The search string to look for."""
    query: String
  ): gh_EnterpriseFailedInvitationConnection!
  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: gh_IpAllowListEnabledSettingValue!
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for IP allow list entries returned."""
    orderBy: gh_IpAllowListEntryOrder = {direction: ASC, field: ALLOW_LIST_VALUE}
  ): gh_IpAllowListEntryConnection!
  """
  The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
  """
  ipAllowListForInstalledAppsEnabledSetting: gh_IpAllowListForInstalledAppsEnabledSettingValue!
  """
  Whether or not the base repository permission is currently being updated.
  """
  isUpdatingDefaultRepositoryPermission: Boolean!
  """
  Whether the two-factor authentication requirement is currently being enforced.
  """
  isUpdatingTwoFactorRequirement: Boolean!
  """
  The setting value for whether organization members with admin permissions on a
  repository can change repository visibility.
  """
  membersCanChangeRepositoryVisibilitySetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided can change repository visibility setting value.
  """
  membersCanChangeRepositoryVisibilitySettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  The setting value for whether members of organizations in the enterprise can create internal repositories.
  """
  membersCanCreateInternalRepositoriesSetting: Boolean
  """
  The setting value for whether members of organizations in the enterprise can create private repositories.
  """
  membersCanCreatePrivateRepositoriesSetting: Boolean
  """
  The setting value for whether members of organizations in the enterprise can create public repositories.
  """
  membersCanCreatePublicRepositoriesSetting: Boolean
  """
  The setting value for whether members of organizations in the enterprise can create repositories.
  """
  membersCanCreateRepositoriesSetting: gh_EnterpriseMembersCanCreateRepositoriesSettingValue
  """
  A list of enterprise organizations configured with the provided repository creation setting value.
  """
  membersCanCreateRepositoriesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting to find organizations for."""
    value: gh_OrganizationMembersCanCreateRepositoriesSettingValue!
  ): gh_OrganizationConnection!
  """
  The setting value for whether members with admin permissions for repositories can delete issues.
  """
  membersCanDeleteIssuesSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided members can delete issues setting value.
  """
  membersCanDeleteIssuesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
  """
  membersCanDeleteRepositoriesSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided members can delete repositories setting value.
  """
  membersCanDeleteRepositoriesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  The setting value for whether members of organizations in the enterprise can invite outside collaborators.
  """
  membersCanInviteCollaboratorsSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided members can invite collaborators setting value.
  """
  membersCanInviteCollaboratorsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
  """
  membersCanMakePurchasesSetting: gh_EnterpriseMembersCanMakePurchasesSettingValue!
  """
  The setting value for whether members with admin permissions for repositories can update protected branches.
  """
  membersCanUpdateProtectedBranchesSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided members can update protected branches setting value.
  """
  membersCanUpdateProtectedBranchesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """The setting value for whether members can view dependency insights."""
  membersCanViewDependencyInsightsSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided members can view dependency insights setting value.
  """
  membersCanViewDependencyInsightsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
  """
  notificationDeliveryRestrictionEnabledSetting: gh_NotificationRestrictionSettingValue!
  """The OIDC Identity Provider for the enterprise."""
  oidcProvider: gh_OIDCProvider
  """
  The setting value for whether organization projects are enabled for organizations in this enterprise.
  """
  organizationProjectsSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided organization projects setting value.
  """
  organizationProjectsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  A list of outside collaborators across the repositories in the enterprise.
  """
  outsideCollaborators(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Only return outside collaborators with this two-factor authentication status.
    """
    hasTwoFactorEnabled: Boolean = null
    """Returns the last _n_ elements from the list."""
    last: Int
    """The login of one specific outside collaborator."""
    login: String
    """
    Ordering options for outside collaborators returned from the connection.
    """
    orderBy: gh_EnterpriseMemberOrder = {direction: ASC, field: LOGIN}
    """
    Only return outside collaborators within the organizations with these logins
    """
    organizationLogins: [String!]
    """The search string to look for."""
    query: String
    """
    Only return outside collaborators on repositories with this visibility.
    """
    visibility: gh_RepositoryVisibility
  ): gh_EnterpriseOutsideCollaboratorConnection!
  """A list of pending administrator invitations for the enterprise."""
  pendingAdminInvitations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for pending enterprise administrator invitations returned from the connection.
    """
    orderBy: gh_EnterpriseAdministratorInvitationOrder = {direction: DESC, field: CREATED_AT}
    """The search string to look for."""
    query: String
    """The role to filter by."""
    role: gh_EnterpriseAdministratorRole
  ): gh_EnterpriseAdministratorInvitationConnection!
  """
  A list of pending collaborator invitations across the repositories in the enterprise.
  """
  pendingCollaboratorInvitations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for pending repository collaborator invitations returned from the connection.
    """
    orderBy: gh_RepositoryInvitationOrder = {direction: DESC, field: CREATED_AT}
    """The search string to look for."""
    query: String
  ): gh_RepositoryInvitationConnection!
  """
  A list of pending member invitations for organizations in the enterprise.
  """
  pendingMemberInvitations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Only return invitations matching this invitation source"""
    invitationSource: gh_OrganizationInvitationSource
    """Returns the last _n_ elements from the list."""
    last: Int
    """Only return invitations within the organizations with these logins"""
    organizationLogins: [String!]
    """The search string to look for."""
    query: String
  ): gh_EnterprisePendingMemberInvitationConnection!
  """
  The setting value for whether repository projects are enabled in this enterprise.
  """
  repositoryProjectsSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided repository projects setting value.
  """
  repositoryProjectsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """The SAML Identity Provider for the enterprise."""
  samlIdentityProvider: gh_EnterpriseIdentityProvider
  """
  A list of enterprise organizations configured with the SAML single sign-on setting value.
  """
  samlIdentityProviderSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: gh_IdentityProviderConfigurationState!
  ): gh_OrganizationConnection!
  """A list of members with a support entitlement."""
  supportEntitlements(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for support entitlement users returned from the connection.
    """
    orderBy: gh_EnterpriseMemberOrder = {direction: ASC, field: LOGIN}
  ): gh_EnterpriseMemberConnection!
  """
  The setting value for whether team discussions are enabled for organizations in this enterprise.
  """
  teamDiscussionsSetting: gh_EnterpriseEnabledDisabledSettingValue!
  """
  A list of enterprise organizations configured with the provided team discussions setting value.
  """
  teamDiscussionsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
  """
  The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
  """
  twoFactorRequiredSetting: gh_EnterpriseEnabledSettingValue!
  """
  A list of enterprise organizations configured with the two-factor authentication setting value.
  """
  twoFactorRequiredSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations with this setting."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The setting value to find organizations for."""
    value: Boolean!
  ): gh_OrganizationConnection!
}

"""The connection type for OrganizationInvitation."""
type gh_EnterprisePendingMemberInvitationConnection {
  """A list of edges."""
  edges: [gh_EnterprisePendingMemberInvitationEdge]
  """A list of nodes."""
  nodes: [gh_OrganizationInvitation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """Identifies the total count of unique users in the connection."""
  totalUniqueUserCount: Int!
}

"""An invitation to be a member in an enterprise organization."""
type gh_EnterprisePendingMemberInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_OrganizationInvitation
}

"""A subset of repository information queryable from an enterprise."""
type gh_EnterpriseRepositoryInfo implements gh_Node {
  """The Node ID of the EnterpriseRepositoryInfo object"""
  id: ID!
  """Identifies if the repository is private or internal."""
  isPrivate: Boolean!
  """The repository's name."""
  name: String!
  """The repository's name with owner."""
  nameWithOwner: String!
}

"""The connection type for EnterpriseRepositoryInfo."""
type gh_EnterpriseRepositoryInfoConnection {
  """A list of edges."""
  edges: [gh_EnterpriseRepositoryInfoEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseRepositoryInfo]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnterpriseRepositoryInfoEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseRepositoryInfo
}

"""An Enterprise Server installation."""
type gh_EnterpriseServerInstallation implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The customer name to which the Enterprise Server installation belongs."""
  customerName: String!
  """The host name of the Enterprise Server installation."""
  hostName: String!
  """The Node ID of the EnterpriseServerInstallation object"""
  id: ID!
  """
  Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
  """
  isConnected: Boolean!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """User accounts on this Enterprise Server installation."""
  userAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for Enterprise Server user accounts returned from the connection.
    """
    orderBy: gh_EnterpriseServerUserAccountOrder = {direction: ASC, field: LOGIN}
  ): gh_EnterpriseServerUserAccountConnection!
  """User accounts uploads for the Enterprise Server installation."""
  userAccountsUploads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for Enterprise Server user accounts uploads returned from the connection.
    """
    orderBy: gh_EnterpriseServerUserAccountsUploadOrder = {direction: DESC, field: CREATED_AT}
  ): gh_EnterpriseServerUserAccountsUploadConnection!
}

"""The connection type for EnterpriseServerInstallation."""
type gh_EnterpriseServerInstallationConnection {
  """A list of edges."""
  edges: [gh_EnterpriseServerInstallationEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseServerInstallation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnterpriseServerInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseServerInstallation
}

"""The connection type for EnterpriseServerInstallation."""
type gh_EnterpriseServerInstallationMembershipConnection {
  """A list of edges."""
  edges: [gh_EnterpriseServerInstallationMembershipEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseServerInstallation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An Enterprise Server installation that a user is a member of."""
type gh_EnterpriseServerInstallationMembershipEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseServerInstallation
  """The role of the user in the enterprise membership."""
  role: gh_EnterpriseUserAccountMembershipRole!
}

"""Ordering options for Enterprise Server installation connections."""
input gh_EnterpriseServerInstallationOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order Enterprise Server installations by."""
  field: gh_EnterpriseServerInstallationOrderField!
}

"""
Properties by which Enterprise Server installation connections can be ordered.
"""
enum gh_EnterpriseServerInstallationOrderField {
  """Order Enterprise Server installations by creation time"""
  CREATED_AT
  """Order Enterprise Server installations by customer name"""
  CUSTOMER_NAME
  """Order Enterprise Server installations by host name"""
  HOST_NAME
}

"""A user account on an Enterprise Server installation."""
type gh_EnterpriseServerUserAccount implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """User emails belonging to this user account."""
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for Enterprise Server user account emails returned from the connection.
    """
    orderBy: gh_EnterpriseServerUserAccountEmailOrder = {direction: ASC, field: EMAIL}
  ): gh_EnterpriseServerUserAccountEmailConnection!
  """The Enterprise Server installation on which this user account exists."""
  enterpriseServerInstallation: gh_EnterpriseServerInstallation!
  """The Node ID of the EnterpriseServerUserAccount object"""
  id: ID!
  """
  Whether the user account is a site administrator on the Enterprise Server installation.
  """
  isSiteAdmin: Boolean!
  """The login of the user account on the Enterprise Server installation."""
  login: String!
  """
  The profile name of the user account on the Enterprise Server installation.
  """
  profileName: String
  """
  The date and time when the user account was created on the Enterprise Server installation.
  """
  remoteCreatedAt: DateTime!
  """The ID of the user account on the Enterprise Server installation."""
  remoteUserId: Int!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for EnterpriseServerUserAccount."""
type gh_EnterpriseServerUserAccountConnection {
  """A list of edges."""
  edges: [gh_EnterpriseServerUserAccountEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseServerUserAccount]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnterpriseServerUserAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type gh_EnterpriseServerUserAccountEmail implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The email address."""
  email: String!
  """The Node ID of the EnterpriseServerUserAccountEmail object"""
  id: ID!
  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The user account to which the email belongs."""
  userAccount: gh_EnterpriseServerUserAccount!
}

"""The connection type for EnterpriseServerUserAccountEmail."""
type gh_EnterpriseServerUserAccountEmailConnection {
  """A list of edges."""
  edges: [gh_EnterpriseServerUserAccountEmailEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseServerUserAccountEmail]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnterpriseServerUserAccountEmailEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseServerUserAccountEmail
}

"""Ordering options for Enterprise Server user account email connections."""
input gh_EnterpriseServerUserAccountEmailOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order emails by."""
  field: gh_EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum gh_EnterpriseServerUserAccountEmailOrderField {
  """Order emails by email"""
  EMAIL
}

"""Ordering options for Enterprise Server user account connections."""
input gh_EnterpriseServerUserAccountOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order user accounts by."""
  field: gh_EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum gh_EnterpriseServerUserAccountOrderField {
  """Order user accounts by login"""
  LOGIN
  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  REMOTE_CREATED_AT
}

"""A user accounts upload from an Enterprise Server installation."""
type gh_EnterpriseServerUserAccountsUpload implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The enterprise to which this upload belongs."""
  enterprise: gh_Enterprise!
  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: gh_EnterpriseServerInstallation!
  """The Node ID of the EnterpriseServerUserAccountsUpload object"""
  id: ID!
  """The name of the file uploaded."""
  name: String!
  """The synchronization state of the upload"""
  syncState: gh_EnterpriseServerUserAccountsUploadSyncState!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for EnterpriseServerUserAccountsUpload."""
type gh_EnterpriseServerUserAccountsUploadConnection {
  """A list of edges."""
  edges: [gh_EnterpriseServerUserAccountsUploadEdge]
  """A list of nodes."""
  nodes: [gh_EnterpriseServerUserAccountsUpload]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnterpriseServerUserAccountsUploadEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_EnterpriseServerUserAccountsUpload
}

"""
Ordering options for Enterprise Server user accounts upload connections.
"""
input gh_EnterpriseServerUserAccountsUploadOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order user accounts uploads by."""
  field: gh_EnterpriseServerUserAccountsUploadOrderField!
}

"""
Properties by which Enterprise Server user accounts upload connections can be ordered.
"""
enum gh_EnterpriseServerUserAccountsUploadOrderField {
  """Order user accounts uploads by creation time"""
  CREATED_AT
}

"""Synchronization state of the Enterprise Server user accounts upload"""
enum gh_EnterpriseServerUserAccountsUploadSyncState {
  """The synchronization of the upload failed."""
  FAILURE
  """The synchronization of the upload is pending."""
  PENDING
  """The synchronization of the upload succeeded."""
  SUCCESS
}

"""
An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
"""
type gh_EnterpriseUserAccount implements gh_Actor & gh_Node {
  """A URL pointing to the enterprise user account's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The enterprise in which this user account exists."""
  enterprise: gh_Enterprise!
  """A list of Enterprise Server installations this user is a member of."""
  enterpriseInstallations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for installations returned from the connection."""
    orderBy: gh_EnterpriseServerInstallationOrder = {direction: ASC, field: HOST_NAME}
    """The search string to look for."""
    query: String
    """The role of the user in the installation."""
    role: gh_EnterpriseUserAccountMembershipRole
  ): gh_EnterpriseServerInstallationMembershipConnection!
  """The Node ID of the EnterpriseUserAccount object"""
  id: ID!
  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!
  """The name of the enterprise user account"""
  name: String
  """A list of enterprise organizations this user is a member of."""
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for organizations returned from the connection."""
    orderBy: gh_OrganizationOrder = {direction: ASC, field: LOGIN}
    """The search string to look for."""
    query: String
    """The role of the user in the enterprise organization."""
    role: gh_EnterpriseUserAccountMembershipRole
  ): gh_EnterpriseOrganizationMembershipConnection!
  """The HTTP path for this user."""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this user."""
  url: gh_URI!
  """The user within the enterprise."""
  user: gh_User
}

"""The possible roles for enterprise membership."""
enum gh_EnterpriseUserAccountMembershipRole {
  """The user is a member of an organization in the enterprise."""
  MEMBER
  """The user is an owner of an organization in the enterprise."""
  OWNER
  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""The possible GitHub Enterprise deployments where this user can exist."""
enum gh_EnterpriseUserDeployment {
  """The user is part of a GitHub Enterprise Cloud deployment."""
  CLOUD
  """The user is part of a GitHub Enterprise Server deployment."""
  SERVER
}

"""An environment."""
type gh_Environment implements gh_Node {
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the Environment object"""
  id: ID!
  """The name of the environment"""
  name: String!
  """The protection rules defined for this environment"""
  protectionRules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeploymentProtectionRuleConnection!
}

"""The connection type for Environment."""
type gh_EnvironmentConnection {
  """A list of edges."""
  edges: [gh_EnvironmentEdge]
  """A list of nodes."""
  nodes: [gh_Environment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_EnvironmentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Environment
}

"""Properties by which environments connections can be ordered"""
enum gh_EnvironmentOrderField {
  """Order environments by name."""
  NAME
}

"""Ordering options for environments"""
input gh_Environments {
  """The direction in which to order environments by the specified field."""
  direction: gh_OrderDirection!
  """The field to order environments by."""
  field: gh_EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type gh_ExternalIdentity implements gh_Node {
  """The GUID for this identity"""
  guid: String!
  """The Node ID of the ExternalIdentity object"""
  id: ID!
  """Organization invitation for this SCIM-provisioned external identity"""
  organizationInvitation: gh_OrganizationInvitation
  """SAML Identity attributes"""
  samlIdentity: gh_ExternalIdentitySamlAttributes
  """SCIM Identity attributes"""
  scimIdentity: gh_ExternalIdentityScimAttributes
  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: gh_User
}

"""An attribute for the External Identity attributes collection"""
type gh_ExternalIdentityAttribute {
  """The attribute metadata as JSON"""
  metadata: String
  """The attribute name"""
  name: String!
  """The attribute value"""
  value: String!
}

"""The connection type for ExternalIdentity."""
type gh_ExternalIdentityConnection {
  """A list of edges."""
  edges: [gh_ExternalIdentityEdge]
  """A list of nodes."""
  nodes: [gh_ExternalIdentity]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ExternalIdentityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ExternalIdentity
}

"""SAML attributes for the External Identity"""
type gh_ExternalIdentitySamlAttributes {
  """SAML Identity attributes"""
  attributes: [gh_ExternalIdentityAttribute!]!
  """The emails associated with the SAML identity"""
  emails: [gh_UserEmailMetadata!]
  """Family name of the SAML identity"""
  familyName: String
  """Given name of the SAML identity"""
  givenName: String
  """The groups linked to this identity in IDP"""
  groups: [String!]
  """The NameID of the SAML identity"""
  nameId: String
  """The userName of the SAML identity"""
  username: String
}

"""SCIM attributes for the External Identity"""
type gh_ExternalIdentityScimAttributes {
  """The emails associated with the SCIM identity"""
  emails: [gh_UserEmailMetadata!]
  """Family name of the SCIM identity"""
  familyName: String
  """Given name of the SCIM identity"""
  givenName: String
  """The groups linked to this identity in IDP"""
  groups: [String!]
  """The userName of the SCIM identity"""
  username: String
}

"""
A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced.
"""
input gh_FileAddition {
  """The base64 encoded contents of the file"""
  contents: gh_Base64String!
  """The path in the repository where the file will be located"""
  path: String!
}

"""
A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       }
"""
input gh_FileChanges {
  """File to add or change."""
  additions: [gh_FileAddition!] = []
  """Files to delete."""
  deletions: [gh_FileDeletion!] = []
}

"""A command to delete the file at the given path as part of a commit."""
input gh_FileDeletion {
  """The path to delete"""
  path: String!
}

"""The possible viewed states of a file ."""
enum gh_FileViewedState {
  """The file has new changes since last viewed."""
  DISMISSED
  """The file has not been marked as viewed."""
  UNVIEWED
  """The file has been marked as viewed."""
  VIEWED
}

"""Autogenerated input type of FollowOrganization"""
input gh_FollowOrganizationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the organization to follow."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of FollowOrganization"""
type gh_FollowOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The organization that was followed."""
  organization: gh_Organization
}

"""Autogenerated input type of FollowUser"""
input gh_FollowUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the user to follow."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""Autogenerated return type of FollowUser"""
type gh_FollowUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The user that was followed."""
  user: gh_User
}

"""The connection type for User."""
type gh_FollowerConnection {
  """A list of edges."""
  edges: [gh_UserEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The connection type for User."""
type gh_FollowingConnection {
  """A list of edges."""
  edges: [gh_UserEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A funding platform link for a repository."""
type gh_FundingLink {
  """The funding platform this link is for."""
  platform: gh_FundingPlatform!
  """The configured URL for this funding link."""
  url: gh_URI!
}

"""The possible funding platforms for repository funding links."""
enum gh_FundingPlatform {
  """Community Bridge funding platform."""
  COMMUNITY_BRIDGE
  """Custom funding platform."""
  CUSTOM
  """GitHub funding platform."""
  GITHUB
  """IssueHunt funding platform."""
  ISSUEHUNT
  """Ko-fi funding platform."""
  KO_FI
  """LFX Crowdfunding funding platform."""
  LFX_CROWDFUNDING
  """Liberapay funding platform."""
  LIBERAPAY
  """Open Collective funding platform."""
  OPEN_COLLECTIVE
  """Otechie funding platform."""
  OTECHIE
  """Patreon funding platform."""
  PATREON
  """Tidelift funding platform."""
  TIDELIFT
}

"""A generic hovercard context with a message and icon"""
type gh_GenericHovercardContext implements gh_HovercardContext {
  """A string describing this context"""
  message: String!
  """An octicon to accompany this context"""
  octicon: String!
}

"""A Gist."""
type gh_Gist implements gh_Node & gh_Starrable & gh_UniformResourceLocatable {
  """A list of comments associated with the gist"""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_GistCommentConnection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The gist description."""
  description: String
  """The files in this gist."""
  files(
    """The maximum number of files to return."""
    limit: Int = 10
    """The oid of the files to return"""
    oid: gh_GitObjectID
  ): [gh_GistFile]
  """A list of forks associated with the gist"""
  forks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for gists returned from the connection"""
    orderBy: gh_GistOrder
  ): gh_GistConnection!
  """The Node ID of the Gist object"""
  id: ID!
  """Identifies if the gist is a fork."""
  isFork: Boolean!
  """Whether the gist is public or not."""
  isPublic: Boolean!
  """The gist name."""
  name: String!
  """The gist owner."""
  owner: gh_RepositoryOwner
  """Identifies when the gist was last pushed to."""
  pushedAt: DateTime
  """The HTML path to this resource."""
  resourcePath: gh_URI!
  """Returns a count of how many stargazers there are on this object"""
  stargazerCount: Int!
  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_StarOrder
  ): gh_StargazerConnection!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this Gist."""
  url: gh_URI!
  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""Represents a comment on an Gist."""
type gh_GistComment implements gh_Comment & gh_Deletable & gh_Minimizable & gh_Node & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the gist."""
  authorAssociation: gh_CommentAuthorAssociation!
  """Identifies the comment body."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """The associated gist."""
  gist: gh_Gist!
  """The Node ID of the GistComment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for GistComment."""
type gh_GistCommentConnection {
  """A list of edges."""
  edges: [gh_GistCommentEdge]
  """A list of nodes."""
  nodes: [gh_GistComment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_GistCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_GistComment
}

"""The connection type for Gist."""
type gh_GistConnection {
  """A list of edges."""
  edges: [gh_GistEdge]
  """A list of nodes."""
  nodes: [gh_Gist]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_GistEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Gist
}

"""A file in a gist."""
type gh_GistFile {
  """
  The file name encoded to remove characters that are invalid in URL paths.
  """
  encodedName: String
  """The gist file encoding."""
  encoding: String
  """The file extension from the file name."""
  extension: String
  """Indicates if this file is an image."""
  isImage: Boolean!
  """Whether the file's contents were truncated."""
  isTruncated: Boolean!
  """The programming language this file is written in."""
  language: gh_Language
  """The gist file name."""
  name: String
  """The gist file size in bytes."""
  size: Int
  """UTF8 text data or null if the file is binary"""
  text(
    """Optionally truncate the returned file to this length."""
    truncate: Int
  ): String
}

"""Ordering options for gist connections"""
input gh_GistOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order repositories by."""
  field: gh_GistOrderField!
}

"""Properties by which gist connections can be ordered."""
enum gh_GistOrderField {
  """Order gists by creation time"""
  CREATED_AT
  """Order gists by push time"""
  PUSHED_AT
  """Order gists by update time"""
  UPDATED_AT
}

"""The privacy of a Gist"""
enum gh_GistPrivacy {
  """Gists that are public and secret"""
  ALL
  """Public"""
  PUBLIC
  """Secret"""
  SECRET
}

"""Represents an actor in a Git commit (ie. an author or committer)."""
type gh_GitActor {
  """A URL pointing to the author's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """The timestamp of the Git action (authoring or committing)."""
  date: gh_GitTimestamp
  """The email in the Git commit."""
  email: String
  """The name in the Git commit."""
  name: String
  """
  The GitHub user corresponding to the email field. Null if no such user exists.
  """
  user: gh_User
}

"""The connection type for GitActor."""
type gh_GitActorConnection {
  """A list of edges."""
  edges: [gh_GitActorEdge]
  """A list of nodes."""
  nodes: [gh_GitActor]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_GitActorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_GitActor
}

"""Represents information about the GitHub instance."""
type gh_GitHubMetadata {
  """Returns a String that's a SHA of `github-services`"""
  gitHubServicesSha: gh_GitObjectID!
  """IP addresses that users connect to for git operations"""
  gitIpAddresses: [String!]
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]
  """IP addresses that service hooks are sent from"""
  hookIpAddresses: [String!]
  """IP addresses that the importer connects from"""
  importerIpAddresses: [String!]
  """Whether or not users are verified"""
  isPasswordAuthenticationVerifiable: Boolean!
  """IP addresses for GitHub Pages' A records"""
  pagesIpAddresses: [String!]
}

"""Represents a Git object."""
interface gh_GitObject {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!
  """The HTTP path for this Git object"""
  commitResourcePath: gh_URI!
  """The HTTP URL for this Git object"""
  commitUrl: gh_URI!
  """The Node ID of the GitObject object"""
  id: ID!
  """The Git object ID"""
  oid: gh_GitObjectID!
  """The Repository the Git object belongs to"""
  repository: gh_Repository!
}

"""A Git object ID."""
scalar gh_GitObjectID

"""A fully qualified reference name (e.g. `refs/heads/master`)."""
scalar gh_GitRefname @preview(toggledBy: "update-refs-preview")

"""Git SSH string"""
scalar gh_GitSSHRemote

"""Information about a signature (GPG or S/MIME) on a Commit or Tag."""
interface gh_GitSignature {
  """Email used to sign this object."""
  email: String!
  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!
  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!
  """ASCII-armored signature header from object."""
  signature: String!
  """GitHub user corresponding to the email signing this commit."""
  signer: gh_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: gh_GitSignatureState!
  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""The state of a Git signature."""
enum gh_GitSignatureState {
  """The signing certificate or its chain could not be verified"""
  BAD_CERT
  """Invalid email used for signing"""
  BAD_EMAIL
  """Signing key expired"""
  EXPIRED_KEY
  """Internal error - the GPG verification service misbehaved"""
  GPGVERIFY_ERROR
  """
  Internal error - the GPG verification service is unavailable at the moment
  """
  GPGVERIFY_UNAVAILABLE
  """Invalid signature"""
  INVALID
  """Malformed signature"""
  MALFORMED_SIG
  """The usage flags for the key that signed this don't allow signing"""
  NOT_SIGNING_KEY
  """Email used for signing not known to GitHub"""
  NO_USER
  """Valid signature, though certificate revocation check failed"""
  OCSP_ERROR
  """Valid signature, pending certificate revocation checking"""
  OCSP_PENDING
  """One or more certificates in chain has been revoked"""
  OCSP_REVOKED
  """Key used for signing not known to GitHub"""
  UNKNOWN_KEY
  """Unknown signature type"""
  UNKNOWN_SIG_TYPE
  """Unsigned"""
  UNSIGNED
  """Email used for signing unverified on GitHub"""
  UNVERIFIED_EMAIL
  """Valid signature and verified by GitHub"""
  VALID
}

"""
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
"""
scalar gh_GitTimestamp

"""Represents a GPG signature on a Commit or Tag."""
type gh_GpgSignature implements gh_GitSignature {
  """Email used to sign this object."""
  email: String!
  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!
  """Hex-encoded ID of the key that signed this object."""
  keyId: String
  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!
  """ASCII-armored signature header from object."""
  signature: String!
  """GitHub user corresponding to the email signing this commit."""
  signer: gh_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: gh_GitSignatureState!
  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole"""
input gh_GrantEnterpriseOrganizationsMigratorRoleInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of the user to grant the migrator role"""
  login: String!
}

"""Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole"""
type gh_GrantEnterpriseOrganizationsMigratorRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The organizations that had the migrator role applied to for the given user.
  """
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_OrganizationConnection
}

"""Autogenerated input type of GrantMigratorRole"""
input gh_GrantMigratorRoleInput {
  """The user login or Team slug to grant the migrator role."""
  actor: String!
  """Specifies the type of the actor, can be either USER or TEAM."""
  actorType: gh_ActorType!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the organization that the user/team belongs to."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of GrantMigratorRole"""
type gh_GrantMigratorRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Did the operation succeed?"""
  success: Boolean
}

"""A string containing HTML code."""
scalar gh_HTML

"""Represents a 'head_ref_deleted' event on a given pull request."""
type gh_HeadRefDeletedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the Ref associated with the `head_ref_deleted` event."""
  headRef: gh_Ref
  """
  Identifies the name of the Ref associated with the `head_ref_deleted` event.
  """
  headRefName: String!
  """The Node ID of the HeadRefDeletedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
}

"""Represents a 'head_ref_force_pushed' event on a given pull request."""
type gh_HeadRefForcePushedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the after commit SHA for the 'head_ref_force_pushed' event."""
  afterCommit: gh_Commit
  """
  Identifies the before commit SHA for the 'head_ref_force_pushed' event.
  """
  beforeCommit: gh_Commit
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the HeadRefForcePushedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """
  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
  """
  ref: gh_Ref
}

"""Represents a 'head_ref_restored' event on a given pull request."""
type gh_HeadRefRestoredEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the HeadRefRestoredEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
}

"""Detail needed to display a hovercard for a user"""
type gh_Hovercard {
  """Each of the contexts for this hovercard"""
  contexts: [gh_HovercardContext!]!
}

"""An individual line of a hovercard"""
interface gh_HovercardContext {
  """A string describing this context"""
  message: String!
  """An octicon to accompany this context"""
  octicon: String!
}

"""
The possible states in which authentication can be configured with an identity provider.
"""
enum gh_IdentityProviderConfigurationState {
  """
  Authentication with an identity provider is configured but not enforced.
  """
  CONFIGURED
  """Authentication with an identity provider is configured and enforced."""
  ENFORCED
  """Authentication with an identity provider is not configured."""
  UNCONFIGURED
}

"""Autogenerated input type of ImportProject"""
input gh_ImportProjectInput {
  """The description of Project."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A list of columns containing issues and pull requests."""
  columnImports: [gh_ProjectColumnImport!]!
  """The name of Project."""
  name: String!
  """The name of the Organization or User to create the Project under."""
  ownerName: String!
  """Whether the Project is public or not."""
  public: Boolean = false
}

"""Autogenerated return type of ImportProject"""
type gh_ImportProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new Project!"""
  project: gh_Project
}

"""Autogenerated input type of InviteEnterpriseAdmin"""
input gh_InviteEnterpriseAdminInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The email of the person to invite as an administrator."""
  email: String
  """The ID of the enterprise to which you want to invite an administrator."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of a user to invite as an administrator."""
  invitee: String
  """The role of the administrator."""
  role: gh_EnterpriseAdministratorRole
}

"""Autogenerated return type of InviteEnterpriseAdmin"""
type gh_InviteEnterpriseAdminPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created enterprise administrator invitation."""
  invitation: gh_EnterpriseAdministratorInvitation
}

"""The possible values for the IP allow list enabled setting."""
enum gh_IpAllowListEnabledSettingValue {
  """The setting is disabled for the owner."""
  DISABLED
  """The setting is enabled for the owner."""
  ENABLED
}

"""
An IP address or range of addresses that is allowed to access an owner's resources.
"""
type gh_IpAllowListEntry implements gh_Node {
  """A single IP address or range of IP addresses in CIDR notation."""
  allowListValue: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the IpAllowListEntry object"""
  id: ID!
  """Whether the entry is currently active."""
  isActive: Boolean!
  """The name of the IP allow list entry."""
  name: String
  """The owner of the IP allow list entry."""
  owner: gh_IpAllowListOwner!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for IpAllowListEntry."""
type gh_IpAllowListEntryConnection {
  """A list of edges."""
  edges: [gh_IpAllowListEntryEdge]
  """A list of nodes."""
  nodes: [gh_IpAllowListEntry]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_IpAllowListEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_IpAllowListEntry
}

"""Ordering options for IP allow list entry connections."""
input gh_IpAllowListEntryOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order IP allow list entries by."""
  field: gh_IpAllowListEntryOrderField!
}

"""Properties by which IP allow list entry connections can be ordered."""
enum gh_IpAllowListEntryOrderField {
  """Order IP allow list entries by the allow list value."""
  ALLOW_LIST_VALUE
  """Order IP allow list entries by creation time."""
  CREATED_AT
}

"""
The possible values for the IP allow list configuration for installed GitHub Apps setting.
"""
enum gh_IpAllowListForInstalledAppsEnabledSettingValue {
  """The setting is disabled for the owner."""
  DISABLED
  """The setting is enabled for the owner."""
  ENABLED
}

"""Types that can own an IP allow list."""
union gh_IpAllowListOwner = gh_App | gh_Enterprise | gh_Organization

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type gh_Issue implements gh_Assignable & gh_Closable & gh_Comment & gh_Deletable & gh_Labelable & gh_Lockable & gh_Node & gh_ProjectV2Owner & gh_Reactable & gh_RepositoryNode & gh_Subscribable & gh_SubscribableThread & gh_UniformResourceLocatable & gh_Updatable & gh_UpdatableComment {
  """Reason that the conversation was locked."""
  activeLockReason: gh_LockReason
  """A list of Users assigned to this object."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """Identifies the body of the issue."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The http path for this issue body"""
  bodyResourcePath: gh_URI!
  """Identifies the body of the issue rendered to text."""
  bodyText: String!
  """The http URL for this issue body"""
  bodyUrl: gh_URI!
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """A list of comments associated with the Issue."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issue comments returned from the connection."""
    orderBy: gh_IssueCommentOrder
  ): gh_IssueCommentConnection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """Identifies the primary key from the database as a BigInt."""
  fullDatabaseId: BigInt
  """The hovercard information for this issue"""
  hovercard(
    """Whether or not to include notification contexts"""
    includeNotificationContexts: Boolean = true
  ): gh_Hovercard!
  """The Node ID of the Issue object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """
  Indicates whether or not this issue is currently pinned to the repository issues list
  """
  isPinned: Boolean
  """Is this issue read by the viewer"""
  isReadByViewer: Boolean
  """A list of labels associated with the object."""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for labels returned from the connection."""
    orderBy: gh_LabelOrder = {direction: ASC, field: CREATED_AT}
  ): gh_LabelConnection
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """Branches linked to this issue."""
  linkedBranches(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_LinkedBranchConnection!
  """`true` if the object is locked"""
  locked: Boolean!
  """Identifies the milestone associated with the issue."""
  milestone: gh_Milestone
  """Identifies the issue number."""
  number: Int!
  """A list of Users that are participating in the Issue conversation."""
  participants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """List of project cards associated with this issue."""
  projectCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """A list of archived states to filter the cards by"""
    archivedStates: [gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectCardConnection!
  """List of project items associated with this issue."""
  projectItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Include archived items."""
    includeArchived: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2ItemConnection!
  """Find a project by number."""
  projectV2(
    """The project number."""
    number: Int!
  ): gh_ProjectV2
  """A list of projects under the owner."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """A project to search for under the the owner."""
    query: String
  ): gh_ProjectV2Connection!
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The HTTP path for this issue"""
  resourcePath: gh_URI!
  """Identifies the state of the issue."""
  state: gh_IssueState!
  """Identifies the reason for the issue state."""
  stateReason: gh_IssueStateReason
  """A list of events, comments, commits, etc. associated with the issue."""
  timeline(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows filtering timeline events by a `since` timestamp."""
    since: DateTime
  ): gh_IssueTimelineConnection! @deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.")
  """A list of events, comments, commits, etc. associated with the issue."""
  timelineItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Filter timeline items by type."""
    itemTypes: [gh_IssueTimelineItemsItemType!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter timeline items by a `since` timestamp."""
    since: DateTime
    """Skips the first _n_ elements in the list."""
    skip: Int
  ): gh_IssueTimelineItemsConnection!
  """Identifies the issue title."""
  title: String!
  """Identifies the issue title rendered to HTML."""
  titleHTML: String!
  """A list of issues that track this issue"""
  trackedInIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_IssueConnection!
  """A list of issues tracked inside the current issue"""
  trackedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_IssueConnection!
  """The number of tracked issues for this issue"""
  trackedIssuesCount(
    """Limit the count to tracked issues with the specified states."""
    states: [gh_TrackedIssueStates]
  ): Int!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this issue"""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
  """Identifies the viewer's thread subscription form action."""
  viewerThreadSubscriptionFormAction: gh_ThreadSubscriptionFormAction
  """Identifies the viewer's thread subscription status."""
  viewerThreadSubscriptionStatus: gh_ThreadSubscriptionState
}

"""The possible state reasons of a closed issue."""
enum gh_IssueClosedStateReason {
  """An issue that has been closed as completed"""
  COMPLETED
  """An issue that has been closed as not planned"""
  NOT_PLANNED
}

"""Represents a comment on an Issue."""
type gh_IssueComment implements gh_Comment & gh_Deletable & gh_Minimizable & gh_Node & gh_Reactable & gh_RepositoryNode & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """The body as Markdown."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """Identifies the primary key from the database as a BigInt."""
  fullDatabaseId: BigInt
  """The Node ID of the IssueComment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """Identifies the issue associated with the comment."""
  issue: gh_Issue!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: gh_PullRequest
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The HTTP path for this issue comment"""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this issue comment"""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for IssueComment."""
type gh_IssueCommentConnection {
  """A list of edges."""
  edges: [gh_IssueCommentEdge]
  """A list of nodes."""
  nodes: [gh_IssueComment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_IssueCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_IssueComment
}

"""Ways in which lists of issue comments can be ordered upon return."""
input gh_IssueCommentOrder {
  """The direction in which to order issue comments by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order issue comments by."""
  field: gh_IssueCommentOrderField!
}

"""Properties by which issue comment connections can be ordered."""
enum gh_IssueCommentOrderField {
  """Order issue comments by update time"""
  UPDATED_AT
}

"""The connection type for Issue."""
type gh_IssueConnection {
  """A list of edges."""
  edges: [gh_IssueEdge]
  """A list of nodes."""
  nodes: [gh_Issue]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""This aggregates issues opened by a user within one repository."""
type gh_IssueContributionsByRepository {
  """The issue contributions."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedIssueContributionConnection!
  """The repository in which the issues were opened."""
  repository: gh_Repository!
}

"""An edge in a connection."""
type gh_IssueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Issue
}

"""Ways in which to filter lists of issues."""
input gh_IssueFilters {
  """
  List issues assigned to given name. Pass in `null` for issues with no assigned
  user, and `*` for issues assigned to any user.
  """
  assignee: String
  """List issues created by given name."""
  createdBy: String
  """List issues where the list of label names exist on the issue."""
  labels: [String!]
  """List issues where the given name is mentioned in the issue."""
  mentioned: String
  """
  List issues by given milestone argument. If an string representation of an
  integer is passed, it should refer to a milestone by its database ID. Pass in
  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
  """
  milestone: String
  """
  List issues by given milestone argument. If an string representation of an
  integer is passed, it should refer to a milestone by its number field. Pass in
  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
  """
  milestoneNumber: String
  """List issues that have been updated at or after the given date."""
  since: DateTime
  """List issues filtered by the list of states given."""
  states: [gh_IssueState!]
  """List issues subscribed to by viewer."""
  viewerSubscribed: Boolean = false
}

"""Used for return value of Repository.issueOrPullRequest."""
union gh_IssueOrPullRequest = gh_Issue | gh_PullRequest

"""Ways in which lists of issues can be ordered upon return."""
input gh_IssueOrder {
  """The direction in which to order issues by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order issues by."""
  field: gh_IssueOrderField!
}

"""Properties by which issue connections can be ordered."""
enum gh_IssueOrderField {
  """Order issues by comment count"""
  COMMENTS
  """Order issues by creation time"""
  CREATED_AT
  """Order issues by update time"""
  UPDATED_AT
}

"""The possible states of an issue."""
enum gh_IssueState {
  """An issue that has been closed"""
  CLOSED
  """An issue that is still open"""
  OPEN
}

"""The possible state reasons of an issue."""
enum gh_IssueStateReason {
  """An issue that has been closed as completed"""
  COMPLETED
  """An issue that has been closed as not planned"""
  NOT_PLANNED
  """An issue that has been reopened"""
  REOPENED
}

"""A repository issue template."""
type gh_IssueTemplate {
  """The template purpose."""
  about: String
  """The suggested assignees."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """The suggested issue body."""
  body: String
  """The template filename."""
  filename: String!
  """The suggested issue labels"""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for labels returned from the connection."""
    orderBy: gh_LabelOrder = {direction: ASC, field: CREATED_AT}
  ): gh_LabelConnection
  """The template name."""
  name: String!
  """The suggested issue title."""
  title: String
}

"""The connection type for IssueTimelineItem."""
type gh_IssueTimelineConnection {
  """A list of edges."""
  edges: [gh_IssueTimelineItemEdge]
  """A list of nodes."""
  nodes: [gh_IssueTimelineItem]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An item in an issue timeline"""
union gh_IssueTimelineItem = gh_AssignedEvent | gh_ClosedEvent | gh_Commit | gh_CrossReferencedEvent | gh_DemilestonedEvent | gh_IssueComment | gh_LabeledEvent | gh_LockedEvent | gh_MilestonedEvent | gh_ReferencedEvent | gh_RenamedTitleEvent | gh_ReopenedEvent | gh_SubscribedEvent | gh_TransferredEvent | gh_UnassignedEvent | gh_UnlabeledEvent | gh_UnlockedEvent | gh_UnsubscribedEvent | gh_UserBlockedEvent

"""An edge in a connection."""
type gh_IssueTimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_IssueTimelineItem
}

"""An item in an issue timeline"""
union gh_IssueTimelineItems = gh_AddedToProjectEvent | gh_AssignedEvent | gh_ClosedEvent | gh_CommentDeletedEvent | gh_ConnectedEvent | gh_ConvertedNoteToIssueEvent | gh_ConvertedToDiscussionEvent | gh_CrossReferencedEvent | gh_DemilestonedEvent | gh_DisconnectedEvent | gh_IssueComment | gh_LabeledEvent | gh_LockedEvent | gh_MarkedAsDuplicateEvent | gh_MentionedEvent | gh_MilestonedEvent | gh_MovedColumnsInProjectEvent | gh_PinnedEvent | gh_ReferencedEvent | gh_RemovedFromProjectEvent | gh_RenamedTitleEvent | gh_ReopenedEvent | gh_SubscribedEvent | gh_TransferredEvent | gh_UnassignedEvent | gh_UnlabeledEvent | gh_UnlockedEvent | gh_UnmarkedAsDuplicateEvent | gh_UnpinnedEvent | gh_UnsubscribedEvent | gh_UserBlockedEvent

"""The connection type for IssueTimelineItems."""
type gh_IssueTimelineItemsConnection {
  """A list of edges."""
  edges: [gh_IssueTimelineItemsEdge]
  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int!
  """A list of nodes."""
  nodes: [gh_IssueTimelineItems]
  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int!
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """Identifies the date and time when the timeline was last updated."""
  updatedAt: DateTime!
}

"""An edge in a connection."""
type gh_IssueTimelineItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_IssueTimelineItems
}

"""The possible item types found in a timeline."""
enum gh_IssueTimelineItemsItemType {
  """
  Represents a 'added_to_project' event on a given issue or pull request.
  """
  ADDED_TO_PROJECT_EVENT
  """Represents an 'assigned' event on any assignable object."""
  ASSIGNED_EVENT
  """Represents a 'closed' event on any `Closable`."""
  CLOSED_EVENT
  """Represents a 'comment_deleted' event on a given issue or pull request."""
  COMMENT_DELETED_EVENT
  """Represents a 'connected' event on a given issue or pull request."""
  CONNECTED_EVENT
  """
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  """
  CONVERTED_NOTE_TO_ISSUE_EVENT
  """Represents a 'converted_to_discussion' event on a given issue."""
  CONVERTED_TO_DISCUSSION_EVENT
  """Represents a mention made by one issue or pull request to another."""
  CROSS_REFERENCED_EVENT
  """Represents a 'demilestoned' event on a given issue or pull request."""
  DEMILESTONED_EVENT
  """Represents a 'disconnected' event on a given issue or pull request."""
  DISCONNECTED_EVENT
  """Represents a comment on an Issue."""
  ISSUE_COMMENT
  """Represents a 'labeled' event on a given issue or pull request."""
  LABELED_EVENT
  """Represents a 'locked' event on a given issue or pull request."""
  LOCKED_EVENT
  """
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  """
  MARKED_AS_DUPLICATE_EVENT
  """Represents a 'mentioned' event on a given issue or pull request."""
  MENTIONED_EVENT
  """Represents a 'milestoned' event on a given issue or pull request."""
  MILESTONED_EVENT
  """
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  """
  MOVED_COLUMNS_IN_PROJECT_EVENT
  """Represents a 'pinned' event on a given issue or pull request."""
  PINNED_EVENT
  """Represents a 'referenced' event on a given `ReferencedSubject`."""
  REFERENCED_EVENT
  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT
  """Represents a 'renamed' event on a given issue or pull request"""
  RENAMED_TITLE_EVENT
  """Represents a 'reopened' event on any `Closable`."""
  REOPENED_EVENT
  """Represents a 'subscribed' event on a given `Subscribable`."""
  SUBSCRIBED_EVENT
  """Represents a 'transferred' event on a given issue or pull request."""
  TRANSFERRED_EVENT
  """Represents an 'unassigned' event on any assignable object."""
  UNASSIGNED_EVENT
  """Represents an 'unlabeled' event on a given issue or pull request."""
  UNLABELED_EVENT
  """Represents an 'unlocked' event on a given issue or pull request."""
  UNLOCKED_EVENT
  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT
  """Represents an 'unpinned' event on a given issue or pull request."""
  UNPINNED_EVENT
  """Represents an 'unsubscribed' event on a given `Subscribable`."""
  UNSUBSCRIBED_EVENT
  """Represents a 'user_blocked' event on a given user."""
  USER_BLOCKED_EVENT
}

"""Represents a user signing up for a GitHub account."""
type gh_JoinedGitHubContribution implements gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""
A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
"""
type gh_Label implements gh_Node {
  """Identifies the label color."""
  color: String!
  """Identifies the date and time when the label was created."""
  createdAt: DateTime
  """A brief description of this label."""
  description: String
  """The Node ID of the Label object"""
  id: ID!
  """Indicates whether or not this is a default label."""
  isDefault: Boolean!
  """A list of issues associated with this label."""
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filtering options for issues returned from the connection."""
    filterBy: gh_IssueFilters
    """Returns the first _n_ elements from the list."""
    first: Int
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issues returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the issues by."""
    states: [gh_IssueState!]
  ): gh_IssueConnection!
  """Identifies the label name."""
  name: String!
  """A list of pull requests associated with this label."""
  pullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """The base ref name to filter the pull requests by."""
    baseRefName: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """The head ref name to filter the pull requests by."""
    headRefName: String
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the pull requests by."""
    states: [gh_PullRequestState!]
  ): gh_PullRequestConnection!
  """The repository associated with this label."""
  repository: gh_Repository!
  """The HTTP path for this label."""
  resourcePath: gh_URI!
  """Identifies the date and time when the label was last updated."""
  updatedAt: DateTime
  """The HTTP URL for this label."""
  url: gh_URI!
}

"""The connection type for Label."""
type gh_LabelConnection {
  """A list of edges."""
  edges: [gh_LabelEdge]
  """A list of nodes."""
  nodes: [gh_Label]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_LabelEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Label
}

"""Ways in which lists of labels can be ordered upon return."""
input gh_LabelOrder {
  """The direction in which to order labels by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order labels by."""
  field: gh_LabelOrderField!
}

"""Properties by which label connections can be ordered."""
enum gh_LabelOrderField {
  """Order labels by creation time"""
  CREATED_AT
  """Order labels by name"""
  NAME
}

"""An object that can have labels assigned to it."""
interface gh_Labelable {
  """A list of labels associated with the object."""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for labels returned from the connection."""
    orderBy: gh_LabelOrder = {direction: ASC, field: CREATED_AT}
  ): gh_LabelConnection
}

"""Represents a 'labeled' event on a given issue or pull request."""
type gh_LabeledEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the LabeledEvent object"""
  id: ID!
  """Identifies the label associated with the 'labeled' event."""
  label: gh_Label!
  """Identifies the `Labelable` associated with the event."""
  labelable: gh_Labelable!
}

"""Represents a given language found in repositories."""
type gh_Language implements gh_Node {
  """The color defined for the current language."""
  color: String
  """The Node ID of the Language object"""
  id: ID!
  """The name of the current language."""
  name: String!
}

"""A list of languages associated with the parent."""
type gh_LanguageConnection {
  """A list of edges."""
  edges: [gh_LanguageEdge]
  """A list of nodes."""
  nodes: [gh_Language]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """The total size in bytes of files written in that language."""
  totalSize: Int!
}

"""Represents the language of a repository."""
type gh_LanguageEdge {
  cursor: String!
  node: gh_Language!
  """The number of bytes of code written in the language."""
  size: Int!
}

"""Ordering options for language connections."""
input gh_LanguageOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order languages by."""
  field: gh_LanguageOrderField!
}

"""Properties by which language connections can be ordered."""
enum gh_LanguageOrderField {
  """Order languages by the size of all files containing the language"""
  SIZE
}

"""A repository's open source license"""
type gh_License implements gh_Node {
  """The full text of the license"""
  body: String!
  """The conditions set by the license"""
  conditions: [gh_LicenseRule]!
  """A human-readable description of the license"""
  description: String
  """Whether the license should be featured"""
  featured: Boolean!
  """Whether the license should be displayed in license pickers"""
  hidden: Boolean!
  """The Node ID of the License object"""
  id: ID!
  """Instructions on how to implement the license"""
  implementation: String
  """The lowercased SPDX ID of the license"""
  key: String!
  """The limitations set by the license"""
  limitations: [gh_LicenseRule]!
  """The license full name specified by <https://spdx.org/licenses>"""
  name: String!
  """Customary short name if applicable (e.g, GPLv3)"""
  nickname: String
  """The permissions set by the license"""
  permissions: [gh_LicenseRule]!
  """
  Whether the license is a pseudo-license placeholder (e.g., other, no-license)
  """
  pseudoLicense: Boolean!
  """Short identifier specified by <https://spdx.org/licenses>"""
  spdxId: String
  """URL to the license on <https://choosealicense.com>"""
  url: gh_URI
}

"""Describes a License's conditions, permissions, and limitations"""
type gh_LicenseRule {
  """A description of the rule"""
  description: String!
  """The machine-readable rule key"""
  key: String!
  """The human-readable rule label"""
  label: String!
}

"""Autogenerated input type of LinkProjectV2ToRepository"""
input gh_LinkProjectV2ToRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the project to link to the repository."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """The ID of the repository to link to the project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of LinkProjectV2ToRepository"""
type gh_LinkProjectV2ToRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository the project is linked to."""
  repository: gh_Repository
}

"""Autogenerated input type of LinkProjectV2ToTeam"""
input gh_LinkProjectV2ToTeamInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the project to link to the team."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """The ID of the team to link to the project."""
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""Autogenerated return type of LinkProjectV2ToTeam"""
type gh_LinkProjectV2ToTeamPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The team the project is linked to"""
  team: gh_Team
}

"""Autogenerated input type of LinkRepositoryToProject"""
input gh_LinkRepositoryToProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Project to link to a Repository"""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
  """The ID of the Repository to link to a Project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of LinkRepositoryToProject"""
type gh_LinkRepositoryToProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The linked Project."""
  project: gh_Project
  """The linked Repository."""
  repository: gh_Repository
}

"""A branch linked to an issue."""
type gh_LinkedBranch implements gh_Node {
  """The Node ID of the LinkedBranch object"""
  id: ID!
  """The branch's ref."""
  ref: gh_Ref
}

"""The connection type for LinkedBranch."""
type gh_LinkedBranchConnection {
  """A list of edges."""
  edges: [gh_LinkedBranchEdge]
  """A list of nodes."""
  nodes: [gh_LinkedBranch]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_LinkedBranchEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_LinkedBranch
}

"""Autogenerated input type of LockLockable"""
input gh_LockLockableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A reason for why the item will be locked."""
  lockReason: gh_LockReason
  """ID of the item to be locked."""
  lockableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Lockable")
}

"""Autogenerated return type of LockLockable"""
type gh_LockLockablePayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item that was locked."""
  lockedRecord: gh_Lockable
}

"""The possible reasons that an issue or pull request was locked."""
enum gh_LockReason {
  """
  The issue or pull request was locked because the conversation was off-topic.
  """
  OFF_TOPIC
  """
  The issue or pull request was locked because the conversation was resolved.
  """
  RESOLVED
  """
  The issue or pull request was locked because the conversation was spam.
  """
  SPAM
  """
  The issue or pull request was locked because the conversation was too heated.
  """
  TOO_HEATED
}

"""An object that can be locked."""
interface gh_Lockable {
  """Reason that the conversation was locked."""
  activeLockReason: gh_LockReason
  """`true` if the object is locked"""
  locked: Boolean!
}

"""Represents a 'locked' event on a given issue or pull request."""
type gh_LockedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the LockedEvent object"""
  id: ID!
  """Reason that the conversation was locked (optional)."""
  lockReason: gh_LockReason
  """Object that was locked."""
  lockable: gh_Lockable!
}

"""A placeholder user for attribution of imported data on GitHub."""
type gh_Mannequin implements gh_Actor & gh_Node & gh_UniformResourceLocatable {
  """A URL pointing to the GitHub App's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """The user that has claimed the data attributed to this mannequin."""
  claimant: gh_User
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The mannequin's email on the source instance."""
  email: String
  """The Node ID of the Mannequin object"""
  id: ID!
  """The username of the actor."""
  login: String!
  """The HTML path to this resource."""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The URL to this resource."""
  url: gh_URI!
}

"""The connection type for Mannequin."""
type gh_MannequinConnection {
  """A list of edges."""
  edges: [gh_MannequinEdge]
  """A list of nodes."""
  nodes: [gh_Mannequin]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a mannequin."""
type gh_MannequinEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Mannequin
}

"""Ordering options for mannequins."""
input gh_MannequinOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order mannequins by."""
  field: gh_MannequinOrderField!
}

"""Properties by which mannequins can be ordered."""
enum gh_MannequinOrderField {
  """Order mannequins why when they were created."""
  CREATED_AT
  """Order mannequins alphabetically by their source login."""
  LOGIN
}

"""Autogenerated input type of MarkDiscussionCommentAsAnswer"""
input gh_MarkDiscussionCommentAsAnswerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion comment to mark as an answer."""
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""Autogenerated return type of MarkDiscussionCommentAsAnswer"""
type gh_MarkDiscussionCommentAsAnswerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion that includes the chosen comment."""
  discussion: gh_Discussion
}

"""Autogenerated input type of MarkFileAsViewed"""
input gh_MarkFileAsViewedInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The path of the file to mark as viewed"""
  path: String!
  """The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of MarkFileAsViewed"""
type gh_MarkFileAsViewedPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated pull request."""
  pullRequest: gh_PullRequest
}

"""Autogenerated input type of MarkProjectV2AsTemplate"""
input gh_MarkProjectV2AsTemplateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Project to mark as a template."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of MarkProjectV2AsTemplate"""
type gh_MarkProjectV2AsTemplatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The project."""
  projectV2: gh_ProjectV2
}

"""Autogenerated input type of MarkPullRequestReadyForReview"""
input gh_MarkPullRequestReadyForReviewInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the pull request to be marked as ready for review."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of MarkPullRequestReadyForReview"""
type gh_MarkPullRequestReadyForReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that is ready for review."""
  pullRequest: gh_PullRequest
}

"""
Represents a 'marked_as_duplicate' event on a given issue or pull request.
"""
type gh_MarkedAsDuplicateEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: gh_IssueOrPullRequest
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: gh_IssueOrPullRequest
  """The Node ID of the MarkedAsDuplicateEvent object"""
  id: ID!
  """Canonical and duplicate belong to different repositories."""
  isCrossRepository: Boolean!
}

"""A public description of a Marketplace category."""
type gh_MarketplaceCategory implements gh_Node {
  """The category's description."""
  description: String
  """
  The technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String
  """The Node ID of the MarketplaceCategory object"""
  id: ID!
  """The category's name."""
  name: String!
  """How many Marketplace listings have this as their primary category."""
  primaryListingCount: Int!
  """The HTTP path for this Marketplace category."""
  resourcePath: gh_URI!
  """How many Marketplace listings have this as their secondary category."""
  secondaryListingCount: Int!
  """The short name of the category used in its URL."""
  slug: String!
  """The HTTP URL for this Marketplace category."""
  url: gh_URI!
}

"""A listing in the GitHub integration marketplace."""
type gh_MarketplaceListing implements gh_Node {
  """The GitHub App this listing represents."""
  app: gh_App
  """URL to the listing owner's company site."""
  companyUrl: gh_URI
  """
  The HTTP path for configuring access to the listing's integration or OAuth app
  """
  configurationResourcePath: gh_URI!
  """
  The HTTP URL for configuring access to the listing's integration or OAuth app
  """
  configurationUrl: gh_URI!
  """URL to the listing's documentation."""
  documentationUrl: gh_URI
  """The listing's detailed description."""
  extendedDescription: String
  """The listing's detailed description rendered to HTML."""
  extendedDescriptionHTML: gh_HTML!
  """The listing's introductory description."""
  fullDescription: String!
  """The listing's introductory description rendered to HTML."""
  fullDescriptionHTML: gh_HTML!
  """Does this listing have any plans with a free trial?"""
  hasPublishedFreeTrialPlans: Boolean!
  """Does this listing have a terms of service link?"""
  hasTermsOfService: Boolean!
  """Whether the creator of the app is a verified org"""
  hasVerifiedOwner: Boolean!
  """A technical description of how this app works with GitHub."""
  howItWorks: String
  """The listing's technical description rendered to HTML."""
  howItWorksHTML: gh_HTML!
  """The Node ID of the MarketplaceListing object"""
  id: ID!
  """URL to install the product to the viewer's account or organization."""
  installationUrl: gh_URI
  """Whether this listing's app has been installed for the current viewer"""
  installedForViewer: Boolean!
  """Whether this listing has been removed from the Marketplace."""
  isArchived: Boolean!
  """
  Whether this listing is still an editable draft that has not been submitted
  for review and is not publicly visible in the Marketplace.
  """
  isDraft: Boolean!
  """
  Whether the product this listing represents is available as part of a paid plan.
  """
  isPaid: Boolean!
  """Whether this listing has been approved for display in the Marketplace."""
  isPublic: Boolean!
  """
  Whether this listing has been rejected by GitHub for display in the Marketplace.
  """
  isRejected: Boolean!
  """
  Whether this listing has been approved for unverified display in the Marketplace.
  """
  isUnverified: Boolean!
  """
  Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
  """
  isUnverifiedPending: Boolean!
  """
  Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  """
  isVerificationPendingFromDraft: Boolean!
  """
  Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  """
  isVerificationPendingFromUnverified: Boolean!
  """
  Whether this listing has been approved for verified display in the Marketplace.
  """
  isVerified: Boolean!
  """The hex color code, without the leading '#', for the logo background."""
  logoBackgroundColor: String!
  """URL for the listing's logo image."""
  logoUrl(
    """The size in pixels of the resulting square image."""
    size: Int = 400
  ): gh_URI
  """The listing's full name."""
  name: String!
  """
  The listing's very short description without a trailing period or ampersands.
  """
  normalizedShortDescription: String!
  """URL to the listing's detailed pricing."""
  pricingUrl: gh_URI
  """The category that best describes the listing."""
  primaryCategory: gh_MarketplaceCategory!
  """
  URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
  """
  privacyPolicyUrl: gh_URI!
  """The HTTP path for the Marketplace listing."""
  resourcePath: gh_URI!
  """The URLs for the listing's screenshots."""
  screenshotUrls: [String]!
  """An alternate category that describes the listing."""
  secondaryCategory: gh_MarketplaceCategory
  """The listing's very short description."""
  shortDescription: String!
  """The short name of the listing used in its URL."""
  slug: String!
  """URL to the listing's status page."""
  statusUrl: gh_URI
  """An email address for support for this listing's app."""
  supportEmail: String
  """
  Either a URL or an email address for support for this listing's app, may
  return an empty string for listings that do not require a support URL.
  """
  supportUrl: gh_URI!
  """URL to the listing's terms of service."""
  termsOfServiceUrl: gh_URI
  """The HTTP URL for the Marketplace listing."""
  url: gh_URI!
  """Can the current viewer add plans for this Marketplace listing."""
  viewerCanAddPlans: Boolean!
  """Can the current viewer approve this Marketplace listing."""
  viewerCanApprove: Boolean!
  """Can the current viewer delist this Marketplace listing."""
  viewerCanDelist: Boolean!
  """Can the current viewer edit this Marketplace listing."""
  viewerCanEdit: Boolean!
  """
  Can the current viewer edit the primary and secondary category of this
  Marketplace listing.
  """
  viewerCanEditCategories: Boolean!
  """Can the current viewer edit the plans for this Marketplace listing."""
  viewerCanEditPlans: Boolean!
  """
  Can the current viewer return this Marketplace listing to draft state
  so it becomes editable again.
  """
  viewerCanRedraft: Boolean!
  """
  Can the current viewer reject this Marketplace listing by returning it to
  an editable draft state or rejecting it entirely.
  """
  viewerCanReject: Boolean!
  """
  Can the current viewer request this listing be reviewed for display in
  the Marketplace as verified.
  """
  viewerCanRequestApproval: Boolean!
  """
  Indicates whether the current user has an active subscription to this Marketplace listing.
  """
  viewerHasPurchased: Boolean!
  """
  Indicates if the current user has purchased a subscription to this Marketplace listing
  for all of the organizations the user owns.
  """
  viewerHasPurchasedForAllOrganizations: Boolean!
  """
  Does the current viewer role allow them to administer this Marketplace listing.
  """
  viewerIsListingAdmin: Boolean!
}

"""Look up Marketplace Listings"""
type gh_MarketplaceListingConnection {
  """A list of edges."""
  edges: [gh_MarketplaceListingEdge]
  """A list of nodes."""
  nodes: [gh_MarketplaceListing]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_MarketplaceListingEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_MarketplaceListing
}

"""Represents a member feature request notification"""
type gh_MemberFeatureRequestNotification implements gh_Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!
  """The Node ID of the MemberFeatureRequestNotification object"""
  id: ID!
  """Represents member feature request notification title"""
  title: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Entities that have members who can set status messages."""
interface gh_MemberStatusable {
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for user statuses returned from the connection."""
    orderBy: gh_UserStatusOrder = {direction: DESC, field: UPDATED_AT}
  ): gh_UserStatusConnection!
}

"""Audit log entry for a members_can_delete_repos.clear event."""
type gh_MembersCanDeleteReposClearAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the MembersCanDeleteReposClearAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a members_can_delete_repos.disable event."""
type gh_MembersCanDeleteReposDisableAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the MembersCanDeleteReposDisableAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a members_can_delete_repos.enable event."""
type gh_MembersCanDeleteReposEnableAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the MembersCanDeleteReposEnableAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Represents a 'mentioned' event on a given issue or pull request."""
type gh_MentionedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the MentionedEvent object"""
  id: ID!
}

"""Autogenerated input type of MergeBranch"""
input gh_MergeBranchInput {
  """The email address to associate with this commit."""
  authorEmail: String
  """
  The name of the base branch that the provided head will be merged into.
  """
  base: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Message to use for the merge commit. If omitted, a default will be used.
  """
  commitMessage: String
  """
  The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
  """
  head: String!
  """
  The Node ID of the Repository containing the base branch that will be modified.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of MergeBranch"""
type gh_MergeBranchPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The resulting merge Commit."""
  mergeCommit: gh_Commit
}

"""The possible default commit messages for merges."""
enum gh_MergeCommitMessage {
  """Default to a blank commit message."""
  BLANK
  """Default to the pull request's body."""
  PR_BODY
  """Default to the pull request's title."""
  PR_TITLE
}

"""The possible default commit titles for merges."""
enum gh_MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE
  """Default to the pull request's title."""
  PR_TITLE
}

"""Autogenerated input type of MergePullRequest"""
input gh_MergePullRequestInput {
  """The email address to associate with this merge."""
  authorEmail: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Commit body to use for the merge commit; if omitted, a default message will be used
  """
  commitBody: String
  """
  Commit headline to use for the merge commit; if omitted, a default message will be used.
  """
  commitHeadline: String
  """
  OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
  """
  expectedHeadOid: gh_GitObjectID
  """The merge method to use. If omitted, defaults to 'MERGE'"""
  mergeMethod: gh_PullRequestMergeMethod = MERGE
  """ID of the pull request to be merged."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of MergePullRequest"""
type gh_MergePullRequestPayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that was merged."""
  pullRequest: gh_PullRequest
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type gh_MergeQueue implements gh_Node {
  """The configuration for this merge queue"""
  configuration: gh_MergeQueueConfiguration
  """The entries in the queue"""
  entries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_MergeQueueEntryConnection
  """The Node ID of the MergeQueue object"""
  id: ID!
  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int
  """The repository this merge queue belongs to"""
  repository: gh_Repository
  """The HTTP path for this merge queue"""
  resourcePath: gh_URI!
  """The HTTP URL for this merge queue"""
  url: gh_URI!
}

"""Configuration for a MergeQueue"""
type gh_MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int
  """The maximum number of entries to build at once."""
  maximumEntriesToBuild: Int
  """The maximum number of entries to merge at once."""
  maximumEntriesToMerge: Int
  """The merge method to use for this queue."""
  mergeMethod: gh_PullRequestMergeMethod
  """The strategy to use when merging entries."""
  mergingStrategy: gh_MergeQueueMergingStrategy
  """The minimum number of entries required to merge at once."""
  minimumEntriesToMerge: Int
  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""Entries in a MergeQueue"""
type gh_MergeQueueEntry implements gh_Node {
  """The base commit for this entry"""
  baseCommit: gh_Commit
  """The date and time this entry was added to the merge queue"""
  enqueuedAt: DateTime!
  """The actor that enqueued this entry"""
  enqueuer: gh_Actor!
  """The estimated time in seconds until this entry will be merged"""
  estimatedTimeToMerge: Int
  """The head commit for this entry"""
  headCommit: gh_Commit
  """The Node ID of the MergeQueueEntry object"""
  id: ID!
  """Whether this pull request should jump the queue"""
  jump: Boolean!
  """The merge queue that this entry belongs to"""
  mergeQueue: gh_MergeQueue
  """The position of this entry in the queue"""
  position: Int!
  """The pull request that will be added to a merge group"""
  pullRequest: gh_PullRequest
  """Does this pull request need to be deployed on its own"""
  solo: Boolean!
  """The state of this entry in the queue"""
  state: gh_MergeQueueEntryState!
}

"""The connection type for MergeQueueEntry."""
type gh_MergeQueueEntryConnection {
  """A list of edges."""
  edges: [gh_MergeQueueEntryEdge]
  """A list of nodes."""
  nodes: [gh_MergeQueueEntry]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_MergeQueueEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_MergeQueueEntry
}

"""The possible states for a merge queue entry."""
enum gh_MergeQueueEntryState {
  """The entry is currently waiting for checks to pass."""
  AWAITING_CHECKS
  """The entry is currently locked."""
  LOCKED
  """The entry is currently mergeable."""
  MERGEABLE
  """The entry is currently queued."""
  QUEUED
  """The entry is currently unmergeable."""
  UNMERGEABLE
}

"""The possible merging strategies for a merge queue."""
enum gh_MergeQueueMergingStrategy {
  """Entries only allowed to merge if they are passing."""
  ALLGREEN
  """Failing Entires are allowed to merge if they are with a passing entry."""
  HEADGREEN
}

"""Detailed status information about a pull request merge."""
enum gh_MergeStateStatus {
  """The head ref is out of date."""
  BEHIND
  """The merge is blocked."""
  BLOCKED
  """Mergeable and passing commit status."""
  CLEAN
  """The merge commit cannot be cleanly created."""
  DIRTY
  """The merge is blocked due to the pull request being a draft."""
  DRAFT @deprecated(reason: "DRAFT state will be removed from this enum and `isDraft` should be used instead Use PullRequest.isDraft instead. Removal on 2021-01-01 UTC.")
  """Mergeable with passing commit status and pre-receive hooks."""
  HAS_HOOKS
  """The state cannot currently be determined."""
  UNKNOWN
  """Mergeable with non-passing commit status."""
  UNSTABLE
}

"""Whether or not a PullRequest can be merged."""
enum gh_MergeableState {
  """The pull request cannot be merged due to merge conflicts."""
  CONFLICTING
  """The pull request can be merged."""
  MERGEABLE
  """The mergeability of the pull request is still being calculated."""
  UNKNOWN
}

"""Represents a 'merged' event on a given pull request."""
type gh_MergedEvent implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the commit associated with the `merge` event."""
  commit: gh_Commit
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the MergedEvent object"""
  id: ID!
  """Identifies the Ref associated with the `merge` event."""
  mergeRef: gh_Ref
  """Identifies the name of the Ref associated with the `merge` event."""
  mergeRefName: String!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """The HTTP path for this merged event."""
  resourcePath: gh_URI!
  """The HTTP URL for this merged event."""
  url: gh_URI!
}

"""Represents a GitHub Enterprise Importer (GEI) migration."""
interface gh_Migration {
  """The migration flag to continue on error."""
  continueOnError: Boolean!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: String
  """The reason the migration failed."""
  failureReason: String
  """The Node ID of the Migration object"""
  id: ID!
  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: gh_URI
  """The migration source."""
  migrationSource: gh_MigrationSource!
  """The target repository name."""
  repositoryName: String!
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sourceUrl: gh_URI!
  """The migration state."""
  state: gh_MigrationState!
  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""A GitHub Enterprise Importer (GEI) migration source."""
type gh_MigrationSource implements gh_Node {
  """The Node ID of the MigrationSource object"""
  id: ID!
  """The migration source name."""
  name: String!
  """The migration source type."""
  type: gh_MigrationSourceType!
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: gh_URI!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum gh_MigrationSourceType {
  """An Azure DevOps migration source."""
  AZURE_DEVOPS
  """A Bitbucket Server migration source."""
  BITBUCKET_SERVER
  """A GitHub Migration API source."""
  GITHUB_ARCHIVE
}

"""The GitHub Enterprise Importer (GEI) migration state."""
enum gh_MigrationState {
  """The migration has failed."""
  FAILED
  """The migration has invalid credentials."""
  FAILED_VALIDATION
  """The migration is in progress."""
  IN_PROGRESS
  """The migration has not started."""
  NOT_STARTED
  """The migration needs to have its credentials validated."""
  PENDING_VALIDATION
  """The migration has been queued."""
  QUEUED
  """The migration has succeeded."""
  SUCCEEDED
}

"""Represents a Milestone object on a given repository."""
type gh_Milestone implements gh_Closable & gh_Node & gh_UniformResourceLocatable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the actor who created the milestone."""
  creator: gh_Actor
  """Identifies the description of the milestone."""
  description: String
  """Identifies the due date of the milestone."""
  dueOn: DateTime
  """The Node ID of the Milestone object"""
  id: ID!
  """A list of issues associated with the milestone."""
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filtering options for issues returned from the connection."""
    filterBy: gh_IssueFilters
    """Returns the first _n_ elements from the list."""
    first: Int
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issues returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the issues by."""
    states: [gh_IssueState!]
  ): gh_IssueConnection!
  """Identifies the number of the milestone."""
  number: Int!
  """Identifies the percentage complete for the milestone"""
  progressPercentage: Float!
  """A list of pull requests associated with the milestone."""
  pullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """The base ref name to filter the pull requests by."""
    baseRefName: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """The head ref name to filter the pull requests by."""
    headRefName: String
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the pull requests by."""
    states: [gh_PullRequestState!]
  ): gh_PullRequestConnection!
  """The repository associated with this milestone."""
  repository: gh_Repository!
  """The HTTP path for this milestone"""
  resourcePath: gh_URI!
  """Identifies the state of the milestone."""
  state: gh_MilestoneState!
  """Identifies the title of the milestone."""
  title: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this milestone"""
  url: gh_URI!
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
}

"""The connection type for Milestone."""
type gh_MilestoneConnection {
  """A list of edges."""
  edges: [gh_MilestoneEdge]
  """A list of nodes."""
  nodes: [gh_Milestone]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_MilestoneEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Milestone
}

"""Types that can be inside a Milestone."""
union gh_MilestoneItem = gh_Issue | gh_PullRequest

"""Ordering options for milestone connections."""
input gh_MilestoneOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order milestones by."""
  field: gh_MilestoneOrderField!
}

"""Properties by which milestone connections can be ordered."""
enum gh_MilestoneOrderField {
  """Order milestones by when they were created."""
  CREATED_AT
  """Order milestones by when they are due."""
  DUE_DATE
  """Order milestones by their number."""
  NUMBER
  """Order milestones by when they were last updated."""
  UPDATED_AT
}

"""The possible states of a milestone."""
enum gh_MilestoneState {
  """A milestone that has been closed."""
  CLOSED
  """A milestone that is still open."""
  OPEN
}

"""Represents a 'milestoned' event on a given issue or pull request."""
type gh_MilestonedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the MilestonedEvent object"""
  id: ID!
  """Identifies the milestone title associated with the 'milestoned' event."""
  milestoneTitle: String!
  """Object referenced by event."""
  subject: gh_MilestoneItem!
}

"""Entities that can be minimized."""
interface gh_Minimizable {
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
}

"""Autogenerated input type of MinimizeComment"""
input gh_MinimizeCommentInput {
  """The classification of comment"""
  classifier: gh_ReportedContentClassifiers!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: ["CommitComment", "DiscussionComment", "GistComment", "IssueComment", "PullRequestReview", "PullRequestReviewComment"], abstractType: "Minimizable")
}

"""Autogenerated return type of MinimizeComment"""
type gh_MinimizeCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The comment that was minimized."""
  minimizedComment: gh_Minimizable
}

"""Autogenerated input type of MoveProjectCard"""
input gh_MoveProjectCardInput {
  """
  Place the new card after the card with this id. Pass null to place it at the top.
  """
  afterCardId: ID @possibleTypes(concreteTypes: ["ProjectCard"])
  """The id of the card to move."""
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the column to move it into."""
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""Autogenerated return type of MoveProjectCard"""
type gh_MoveProjectCardPayload {
  """The new edge of the moved card."""
  cardEdge: gh_ProjectCardEdge
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of MoveProjectColumn"""
input gh_MoveProjectColumnInput {
  """
  Place the new column after the column with this id. Pass null to place it at the front.
  """
  afterColumnId: ID @possibleTypes(concreteTypes: ["ProjectColumn"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The id of the column to move."""
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""Autogenerated return type of MoveProjectColumn"""
type gh_MoveProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new edge of the moved column."""
  columnEdge: gh_ProjectColumnEdge
}

"""
Represents a 'moved_columns_in_project' event on a given issue or pull request.
"""
type gh_MovedColumnsInProjectEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the MovedColumnsInProjectEvent object"""
  id: ID!
  """Column name the issue or pull request was moved from."""
  previousProjectColumnName: String! @preview(toggledBy: "starfox-preview")
  """Project referenced by event."""
  project: gh_Project @preview(toggledBy: "starfox-preview")
  """Project card referenced by this project event."""
  projectCard: gh_ProjectCard @preview(toggledBy: "starfox-preview")
  """Column name the issue or pull request was moved to."""
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""An object with an ID."""
interface gh_Node {
  """ID of the object."""
  id: ID!
}

"""The possible values for the notification restriction setting."""
enum gh_NotificationRestrictionSettingValue {
  """The setting is disabled for the owner."""
  DISABLED
  """The setting is enabled for the owner."""
  ENABLED
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type gh_OIDCProvider implements gh_Node {
  """The enterprise this identity provider belongs to."""
  enterprise: gh_Enterprise
  """ExternalIdentities provisioned by this identity provider."""
  externalIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter to external identities with the users login"""
    login: String
    """Filter to external identities with valid org membership only"""
    membersOnly: Boolean
    """Filter to external identities with the users userName/NameID attribute"""
    userName: String
  ): gh_ExternalIdentityConnection!
  """The Node ID of the OIDCProvider object"""
  id: ID!
  """The OIDC identity provider type"""
  providerType: gh_OIDCProviderType!
  """The id of the tenant this provider is attached to"""
  tenantId: String!
}

"""The OIDC identity provider type"""
enum gh_OIDCProviderType {
  """Azure Active Directory"""
  AAD
}

"""Metadata for an audit entry with action oauth_application.*"""
interface gh_OauthApplicationAuditEntryData {
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
}

"""Audit log entry for a oauth_application.create event."""
type gh_OauthApplicationCreateAuditEntry implements gh_AuditEntry & gh_Node & gh_OauthApplicationAuditEntryData & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The application URL of the OAuth application."""
  applicationUrl: gh_URI
  """The callback URL of the OAuth application."""
  callbackUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OauthApplicationCreateAuditEntry object"""
  id: ID!
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The rate limit of the OAuth application."""
  rateLimit: Int
  """The state of the OAuth application."""
  state: gh_OauthApplicationCreateAuditEntryState
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The state of an OAuth application when it was created."""
enum gh_OauthApplicationCreateAuditEntryState {
  """The OAuth application was active and allowed to have OAuth Accesses."""
  ACTIVE
  """The OAuth application was in the process of being deleted."""
  PENDING_DELETION
  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED
}

"""The corresponding operation type for the action"""
enum gh_OperationType {
  """An existing resource was accessed"""
  ACCESS
  """A resource performed an authentication event"""
  AUTHENTICATION
  """A new resource was created"""
  CREATE
  """An existing resource was modified"""
  MODIFY
  """An existing resource was removed"""
  REMOVE
  """An existing resource was restored"""
  RESTORE
  """An existing resource was transferred between multiple resources"""
  TRANSFER
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum gh_OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""Audit log entry for a org.add_billing_manager"""
type gh_OrgAddBillingManagerAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgAddBillingManagerAuditEntry object"""
  id: ID!
  """
  The email address used to invite a billing manager for the organization.
  """
  invitationEmail: String
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.add_member"""
type gh_OrgAddMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgAddMemberAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The permission level of the member added to the organization."""
  permission: gh_OrgAddMemberAuditEntryPermission
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The permissions available to members on an Organization."""
enum gh_OrgAddMemberAuditEntryPermission {
  """Can read, clone, push, and add collaborators to repositories."""
  ADMIN
  """Can read and clone repositories."""
  READ
}

"""Audit log entry for a org.block_user"""
type gh_OrgBlockUserAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The blocked user."""
  blockedUser: gh_User
  """The username of the blocked user."""
  blockedUserName: String
  """The HTTP path for the blocked user."""
  blockedUserResourcePath: gh_URI
  """The HTTP URL for the blocked user."""
  blockedUserUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgBlockUserAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.config.disable_collaborators_only event."""
type gh_OrgConfigDisableCollaboratorsOnlyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.config.enable_collaborators_only event."""
type gh_OrgConfigEnableCollaboratorsOnlyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.create event."""
type gh_OrgCreateAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The billing plan for the Organization."""
  billingPlan: gh_OrgCreateAuditEntryBillingPlan
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgCreateAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The billing plans available for organizations."""
enum gh_OrgCreateAuditEntryBillingPlan {
  """Team Plan"""
  BUSINESS
  """Enterprise Cloud Plan"""
  BUSINESS_PLUS
  """Free Plan"""
  FREE
  """Tiered Per Seat Plan"""
  TIERED_PER_SEAT
  """Legacy Unlimited Plan"""
  UNLIMITED
}

"""Audit log entry for a org.disable_oauth_app_restrictions event."""
type gh_OrgDisableOauthAppRestrictionsAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.disable_saml event."""
type gh_OrgDisableSamlAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The SAML provider's digest algorithm URL."""
  digestMethodUrl: gh_URI
  """The Node ID of the OrgDisableSamlAuditEntry object"""
  id: ID!
  """The SAML provider's issuer URL."""
  issuerUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The SAML provider's signature algorithm URL."""
  signatureMethodUrl: gh_URI
  """The SAML provider's single sign-on URL."""
  singleSignOnUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.disable_two_factor_requirement event."""
type gh_OrgDisableTwoFactorRequirementAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.enable_oauth_app_restrictions event."""
type gh_OrgEnableOauthAppRestrictionsAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.enable_saml event."""
type gh_OrgEnableSamlAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The SAML provider's digest algorithm URL."""
  digestMethodUrl: gh_URI
  """The Node ID of the OrgEnableSamlAuditEntry object"""
  id: ID!
  """The SAML provider's issuer URL."""
  issuerUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The SAML provider's signature algorithm URL."""
  signatureMethodUrl: gh_URI
  """The SAML provider's single sign-on URL."""
  singleSignOnUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.enable_two_factor_requirement event."""
type gh_OrgEnableTwoFactorRequirementAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Ordering options for an organization's enterprise owner connections."""
input gh_OrgEnterpriseOwnerOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order enterprise owners by."""
  field: gh_OrgEnterpriseOwnerOrderField!
}

"""Properties by which enterprise owners can be ordered."""
enum gh_OrgEnterpriseOwnerOrderField {
  """Order enterprise owners by login."""
  LOGIN
}

"""Audit log entry for a org.invite_member event."""
type gh_OrgInviteMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The email address of the organization invitation."""
  email: String
  """The Node ID of the OrgInviteMemberAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The organization invitation."""
  organizationInvitation: gh_OrganizationInvitation
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.invite_to_business event."""
type gh_OrgInviteToBusinessAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the OrgInviteToBusinessAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.oauth_app_access_approved event."""
type gh_OrgOauthAppAccessApprovedAuditEntry implements gh_AuditEntry & gh_Node & gh_OauthApplicationAuditEntryData & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgOauthAppAccessApprovedAuditEntry object"""
  id: ID!
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.oauth_app_access_blocked event."""
type gh_OrgOauthAppAccessBlockedAuditEntry implements gh_AuditEntry & gh_Node & gh_OauthApplicationAuditEntryData & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgOauthAppAccessBlockedAuditEntry object"""
  id: ID!
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.oauth_app_access_denied event."""
type gh_OrgOauthAppAccessDeniedAuditEntry implements gh_AuditEntry & gh_Node & gh_OauthApplicationAuditEntryData & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgOauthAppAccessDeniedAuditEntry object"""
  id: ID!
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.oauth_app_access_requested event."""
type gh_OrgOauthAppAccessRequestedAuditEntry implements gh_AuditEntry & gh_Node & gh_OauthApplicationAuditEntryData & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgOauthAppAccessRequestedAuditEntry object"""
  id: ID!
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.oauth_app_access_unblocked event."""
type gh_OrgOauthAppAccessUnblockedAuditEntry implements gh_AuditEntry & gh_Node & gh_OauthApplicationAuditEntryData & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object"""
  id: ID!
  """The name of the OAuth application."""
  oauthApplicationName: String
  """The HTTP path for the OAuth application"""
  oauthApplicationResourcePath: gh_URI
  """The HTTP URL for the OAuth application"""
  oauthApplicationUrl: gh_URI
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.remove_billing_manager event."""
type gh_OrgRemoveBillingManagerAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgRemoveBillingManagerAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The reason for the billing manager being removed."""
  reason: gh_OrgRemoveBillingManagerAuditEntryReason
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The reason a billing manager was removed from an Organization."""
enum gh_OrgRemoveBillingManagerAuditEntryReason {
  """SAML external identity missing"""
  SAML_EXTERNAL_IDENTITY_MISSING
  """SAML SSO enforcement requires an external identity"""
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""Audit log entry for a org.remove_member event."""
type gh_OrgRemoveMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgRemoveMemberAuditEntry object"""
  id: ID!
  """The types of membership the member has with the organization."""
  membershipTypes: [gh_OrgRemoveMemberAuditEntryMembershipType!]
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The reason for the member being removed."""
  reason: gh_OrgRemoveMemberAuditEntryReason
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The type of membership a user has with an Organization."""
enum gh_OrgRemoveMemberAuditEntryMembershipType {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  ADMIN
  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER
  """A direct member is a user that is a member of the Organization."""
  DIRECT_MEMBER
  """
  An outside collaborator is a person who isn't explicitly a member of the
  Organization, but who has Read, Write, or Admin permissions to one or more
  repositories in the organization.
  """
  OUTSIDE_COLLABORATOR
  """A suspended member."""
  SUSPENDED
  """
  An unaffiliated collaborator is a person who is not a member of the
  Organization and does not have access to any repositories in the Organization.
  """
  UNAFFILIATED
}

"""The reason a member was removed from an Organization."""
enum gh_OrgRemoveMemberAuditEntryReason {
  """SAML external identity missing"""
  SAML_EXTERNAL_IDENTITY_MISSING
  """SAML SSO enforcement requires an external identity"""
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
  """User was removed from organization during account recovery"""
  TWO_FACTOR_ACCOUNT_RECOVERY
  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  """User account has been deleted"""
  USER_ACCOUNT_DELETED
}

"""Audit log entry for a org.remove_outside_collaborator event."""
type gh_OrgRemoveOutsideCollaboratorAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object"""
  id: ID!
  """
  The types of membership the outside collaborator has with the organization.
  """
  membershipTypes: [gh_OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """
  The reason for the outside collaborator being removed from the Organization.
  """
  reason: gh_OrgRemoveOutsideCollaboratorAuditEntryReason
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The type of membership a user has with an Organization."""
enum gh_OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER
  """
  An outside collaborator is a person who isn't explicitly a member of the
  Organization, but who has Read, Write, or Admin permissions to one or more
  repositories in the organization.
  """
  OUTSIDE_COLLABORATOR
  """
  An unaffiliated collaborator is a person who is not a member of the
  Organization and does not have access to any repositories in the organization.
  """
  UNAFFILIATED
}

"""The reason an outside collaborator was removed from an Organization."""
enum gh_OrgRemoveOutsideCollaboratorAuditEntryReason {
  """SAML external identity missing"""
  SAML_EXTERNAL_IDENTITY_MISSING
  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""Audit log entry for a org.restore_member event."""
type gh_OrgRestoreMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgRestoreMemberAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The number of custom email routings for the restored member."""
  restoredCustomEmailRoutingsCount: Int
  """The number of issue assignments for the restored member."""
  restoredIssueAssignmentsCount: Int
  """Restored organization membership objects."""
  restoredMemberships: [gh_OrgRestoreMemberAuditEntryMembership!]
  """The number of restored memberships."""
  restoredMembershipsCount: Int
  """The number of repositories of the restored member."""
  restoredRepositoriesCount: Int
  """The number of starred repositories for the restored member."""
  restoredRepositoryStarsCount: Int
  """The number of watched repositories for the restored member."""
  restoredRepositoryWatchesCount: Int
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Types of memberships that can be restored for an Organization member."""
union gh_OrgRestoreMemberAuditEntryMembership = gh_OrgRestoreMemberMembershipOrganizationAuditEntryData | gh_OrgRestoreMemberMembershipRepositoryAuditEntryData | gh_OrgRestoreMemberMembershipTeamAuditEntryData

"""Metadata for an organization membership for org.restore_member actions"""
type gh_OrgRestoreMemberMembershipOrganizationAuditEntryData implements gh_OrganizationAuditEntryData {
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
}

"""Metadata for a repository membership for org.restore_member actions"""
type gh_OrgRestoreMemberMembershipRepositoryAuditEntryData implements gh_RepositoryAuditEntryData {
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
}

"""Metadata for a team membership for org.restore_member actions"""
type gh_OrgRestoreMemberMembershipTeamAuditEntryData implements gh_TeamAuditEntryData {
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
}

"""Audit log entry for a org.unblock_user"""
type gh_OrgUnblockUserAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The user being unblocked by the organization."""
  blockedUser: gh_User
  """The username of the blocked user."""
  blockedUserName: String
  """The HTTP path for the blocked user."""
  blockedUserResourcePath: gh_URI
  """The HTTP URL for the blocked user."""
  blockedUserUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgUnblockUserAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a org.update_default_repository_permission"""
type gh_OrgUpdateDefaultRepositoryPermissionAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The new base repository permission level for the organization."""
  permission: gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  """The former base repository permission level for the organization."""
  permissionWas: gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The default permission a repository can have in an Organization."""
enum gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  """Can read, clone, push, and add collaborators to repositories."""
  ADMIN
  """No default permission value."""
  NONE
  """Can read and clone repositories."""
  READ
  """Can read, clone and push to repositories."""
  WRITE
}

"""Audit log entry for a org.update_member event."""
type gh_OrgUpdateMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the OrgUpdateMemberAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The new member permission level for the organization."""
  permission: gh_OrgUpdateMemberAuditEntryPermission
  """The former member permission level for the organization."""
  permissionWas: gh_OrgUpdateMemberAuditEntryPermission
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The permissions available to members on an Organization."""
enum gh_OrgUpdateMemberAuditEntryPermission {
  """Can read, clone, push, and add collaborators to repositories."""
  ADMIN
  """Can read and clone repositories."""
  READ
}

"""
Audit log entry for a org.update_member_repository_creation_permission event.
"""
type gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """Can members create repositories in the organization."""
  canCreateRepositories: Boolean
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """
  The permission for visibility level of repositories for this organization.
  """
  visibility: gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

"""The permissions available for repository creation on an Organization."""
enum gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  """
  All organization members are restricted from creating any repositories.
  """
  ALL
  """
  All organization members are restricted from creating internal repositories.
  """
  INTERNAL
  """All organization members are allowed to create any repositories."""
  NONE
  """
  All organization members are restricted from creating private repositories.
  """
  PRIVATE
  """
  All organization members are restricted from creating private or internal repositories.
  """
  PRIVATE_INTERNAL
  """
  All organization members are restricted from creating public repositories.
  """
  PUBLIC
  """
  All organization members are restricted from creating public or internal repositories.
  """
  PUBLIC_INTERNAL
  """
  All organization members are restricted from creating public or private repositories.
  """
  PUBLIC_PRIVATE
}

"""
Audit log entry for a org.update_member_repository_invitation_permission event.
"""
type gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """
  Can outside collaborators be invited to repositories in the organization.
  """
  canInviteOutsideCollaboratorsToRepositories: Boolean
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type gh_Organization implements gh_Actor & gh_AnnouncementBanner & gh_MemberStatusable & gh_Node & gh_PackageOwner & gh_ProfileOwner & gh_ProjectOwner & gh_ProjectV2Owner & gh_ProjectV2Recent & gh_RepositoryDiscussionAuthor & gh_RepositoryDiscussionCommentAuthor & gh_RepositoryOwner & gh_Sponsorable & gh_UniformResourceLocatable {
  """The text of the announcement"""
  announcement: String
  """The expiration date of the announcement, if any"""
  announcementExpiresAt: DateTime
  """Whether the announcement can be dismissed by the user"""
  announcementUserDismissible: Boolean
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """Filter to only a particular kind of pinnable item."""
    type: gh_PinnableItemType
  ): Boolean!
  """Identifies the date and time when the organization was archived."""
  archivedAt: DateTime
  """Audit log entries of the organization"""
  auditLog(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the returned audit log entries."""
    orderBy: gh_AuditLogOrder = {direction: DESC, field: CREATED_AT}
    """The query string to filter audit entries"""
    query: String
  ): gh_OrganizationAuditEntryConnection!
  """A URL pointing to the organization's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The organization's public profile description."""
  description: String
  """The organization's public profile description rendered to HTML."""
  descriptionHTML: String
  """A list of domains owned by the organization."""
  domains(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Filter by if the domain is approved."""
    isApproved: Boolean = null
    """Filter by if the domain is verified."""
    isVerified: Boolean = null
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for verifiable domains returned."""
    orderBy: gh_VerifiableDomainOrder = {direction: ASC, field: DOMAIN}
  ): gh_VerifiableDomainConnection
  """The organization's public email."""
  email: String
  """A list of owners of the organization's enterprise account."""
  enterpriseOwners(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for enterprise owners returned from the connection."""
    orderBy: gh_OrgEnterpriseOwnerOrder = {direction: ASC, field: LOGIN}
    """The organization role to filter by."""
    organizationRole: gh_RoleInOrganization
    """The search string to look for."""
    query: String
  ): gh_OrganizationEnterpriseOwnerConnection!
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!
  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!
  """The Node ID of the Organization object"""
  id: ID!
  """The interaction ability settings for this organization."""
  interactionAbility: gh_RepositoryInteractionAbility
  """
  The setting value for whether the organization has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: gh_IpAllowListEnabledSettingValue!
  """
  The IP addresses that are allowed to access resources owned by the organization.
  """
  ipAllowListEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for IP allow list entries returned."""
    orderBy: gh_IpAllowListEntryOrder = {direction: ASC, field: ALLOW_LIST_VALUE}
  ): gh_IpAllowListEntryConnection!
  """
  The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
  """
  ipAllowListForInstalledAppsEnabledSetting: gh_IpAllowListForInstalledAppsEnabledSettingValue!
  """Whether the given account is sponsoring this user/organization."""
  isSponsoredBy(
    """The target account's login."""
    accountLogin: String!
  ): Boolean!
  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!
  """Whether the organization has verified its profile email and website."""
  isVerified: Boolean!
  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: gh_ProfileItemShowcase!
  """The organization's public profile location."""
  location: String
  """The organization's login name."""
  login: String!
  """A list of all mannequins for this organization."""
  mannequins(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter mannequins by login."""
    login: String
    """Ordering options for mannequins returned from the connection."""
    orderBy: gh_MannequinOrder = {direction: ASC, field: CREATED_AT}
  ): gh_MannequinConnection!
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for user statuses returned from the connection."""
    orderBy: gh_UserStatusOrder = {direction: DESC, field: UPDATED_AT}
  ): gh_UserStatusConnection!
  """Members can fork private repositories in this organization"""
  membersCanForkPrivateRepositories: Boolean!
  """A list of users who are members of this organization."""
  membersWithRole(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_OrganizationMemberConnection!
  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!
  """The organization's public profile name."""
  name: String
  """The HTTP path creating a new team"""
  newTeamResourcePath: gh_URI!
  """The HTTP URL creating a new team"""
  newTeamUrl: gh_URI!
  """
  Indicates if email notification delivery for this organization is restricted to verified or approved domains.
  """
  notificationDeliveryRestrictionEnabledSetting: gh_NotificationRestrictionSettingValue!
  """The billing email for the organization."""
  organizationBillingEmail: String
  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Find packages by their names."""
    names: [String]
    """Ordering of the returned packages."""
    orderBy: gh_PackageOrder = {direction: DESC, field: CREATED_AT}
    """Filter registry package by type."""
    packageType: gh_PackageType
    """Find packages in a repository by ID."""
    repositoryId: ID
  ): gh_PackageConnection!
  """A list of users who have been invited to join this organization."""
  pendingMembers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter the types of pinnable items that are returned."""
    types: [gh_PinnableItemType!]
  ): gh_PinnableItemConnection!
  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter the types of pinned items that are returned."""
    types: [gh_PinnableItemType!]
  ): gh_PinnableItemConnection!
  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!
  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): gh_Project
  """Find a project by number."""
  projectV2(
    """The project number."""
    number: Int!
  ): gh_ProjectV2
  """A list of projects under the owner."""
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for projects returned from the connection"""
    orderBy: gh_ProjectOrder
    """Query to search projects by, currently only searching by name."""
    search: String
    """A list of states to filter the projects by."""
    states: [gh_ProjectState!]
  ): gh_ProjectConnection!
  """The HTTP path listing organization's projects"""
  projectsResourcePath: gh_URI!
  """The HTTP URL listing organization's projects"""
  projectsUrl: gh_URI!
  """A list of projects under the owner."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """A project to search for under the the owner."""
    query: String
  ): gh_ProjectV2Connection!
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2Connection!
  """A list of repositories that the user owns."""
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [gh_RepositoryAffiliation]
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean
    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean
    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [gh_RepositoryAffiliation] = [OWNER, COLLABORATOR]
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
  ): gh_RepositoryConnection!
  """Find Repository."""
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true
    """Name of Repository to find."""
    name: String!
  ): gh_Repository
  """Discussion comments this user has authored."""
  repositoryDiscussionComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false
    """Filter discussion comments to only those in a specific repository."""
    repositoryId: ID
  ): gh_DiscussionCommentConnection!
  """Discussions this user has started."""
  repositoryDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for discussions returned from the connection."""
    orderBy: gh_DiscussionOrder = {direction: DESC, field: CREATED_AT}
    """Filter discussions to only those in a specific repository."""
    repositoryId: ID
    """A list of states to filter the discussions by."""
    states: [gh_DiscussionState!] = []
  ): gh_DiscussionConnection!
  """A list of all repository migrations for this organization."""
  repositoryMigrations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repository migrations returned."""
    orderBy: gh_RepositoryMigrationOrder = {direction: ASC, field: CREATED_AT}
    """Filter repository migrations by repository name."""
    repositoryName: String
    """Filter repository migrations by state."""
    state: gh_MigrationState
  ): gh_RepositoryMigrationConnection!
  """
  When true the organization requires all members, billing managers, and outside
  collaborators to enable two-factor authentication.
  """
  requiresTwoFactorAuthentication: Boolean
  """The HTTP path for this organization."""
  resourcePath: gh_URI!
  """Returns a single ruleset from the current organization by ID."""
  ruleset(
    """The ID of the ruleset to be returned."""
    databaseId: Int!
  ): gh_RepositoryRuleset
  """A list of rulesets for this organization."""
  rulesets(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_RepositoryRulesetConnection
  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: gh_OrganizationIdentityProvider
  """List of users and organizations this entity is sponsoring."""
  sponsoring(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: gh_SponsorOrder = {direction: DESC, field: RELEVANCE}
  ): gh_SponsorConnection!
  """List of sponsors for this user or organization."""
  sponsors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for sponsors returned from the connection."""
    orderBy: gh_SponsorOrder = {direction: DESC, field: RELEVANCE}
    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): gh_SponsorConnection!
  """Events involving this sponsorable, such as new sponsorships."""
  sponsorsActivities(
    """Filter activities to only the specified actions."""
    actions: [gh_SponsorsActivityAction!] = []
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false
    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for activity returned from the connection."""
    orderBy: gh_SponsorsActivityOrder = {direction: DESC, field: TIMESTAMP}
    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: gh_SponsorsActivityPeriod = MONTH
    """Filter activities to those that occurred on or after this time."""
    since: DateTime
    """Filter activities to those that occurred before this time."""
    until: DateTime
  ): gh_SponsorsActivityConnection!
  """The GitHub Sponsors listing for this user or organization."""
  sponsorsListing: gh_SponsorsListing
  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): gh_Sponsorship
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): gh_Sponsorship
  """List of sponsorship updates sent from this sponsorable to sponsors."""
  sponsorshipNewsletters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for sponsorship updates returned from the connection."""
    orderBy: gh_SponsorshipNewsletterOrder = {direction: DESC, field: CREATED_AT}
  ): gh_SponsorshipNewsletterConnection!
  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
  """The sponsorships where this user or organization is the funder."""
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
  """Find an organization's team by its slug."""
  team(
    """The name or slug of the team to find."""
    slug: String!
  ): gh_Team
  """A list of teams in this organization."""
  teams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean
    """If non-null, filters teams according to notification setting"""
    notificationSetting: gh_TeamNotificationSetting
    """Ordering options for teams returned from the connection"""
    orderBy: gh_TeamOrder
    """If non-null, filters teams according to privacy"""
    privacy: gh_TeamPrivacy
    """If non-null, filters teams with query on team name and team slug"""
    query: String
    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: gh_TeamRole
    """If true, restrict to only root teams"""
    rootTeamsOnly: Boolean = false
    """User logins to filter by"""
    userLogins: [String!]
  ): gh_TeamConnection!
  """The HTTP path listing organization's teams"""
  teamsResourcePath: gh_URI!
  """The HTTP URL listing organization's teams"""
  teamsUrl: gh_URI!
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """Filter payments to those that occurred on or after this time."""
    since: DateTime
    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []
    """Filter payments to those that occurred before this time."""
    until: DateTime
  ): Int
  """The organization's Twitter username."""
  twitterUsername: String
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this organization."""
  url: gh_URI!
  """Organization is adminable by the viewer."""
  viewerCanAdminister: Boolean!
  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!
  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!
  """Viewer can create repositories on this organization"""
  viewerCanCreateRepositories: Boolean!
  """Viewer can create teams on this organization."""
  viewerCanCreateTeams: Boolean!
  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!
  """Viewer is an active member of this organization."""
  viewerIsAMember: Boolean!
  """Whether or not this Organization is followed by the viewer."""
  viewerIsFollowing: Boolean!
  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!
  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!
  """The organization's public profile URL."""
  websiteUrl: gh_URI
}

"""An audit entry in an organization audit log."""
union gh_OrganizationAuditEntry = gh_MembersCanDeleteReposClearAuditEntry | gh_MembersCanDeleteReposDisableAuditEntry | gh_MembersCanDeleteReposEnableAuditEntry | gh_OauthApplicationCreateAuditEntry | gh_OrgAddBillingManagerAuditEntry | gh_OrgAddMemberAuditEntry | gh_OrgBlockUserAuditEntry | gh_OrgConfigDisableCollaboratorsOnlyAuditEntry | gh_OrgConfigEnableCollaboratorsOnlyAuditEntry | gh_OrgCreateAuditEntry | gh_OrgDisableOauthAppRestrictionsAuditEntry | gh_OrgDisableSamlAuditEntry | gh_OrgDisableTwoFactorRequirementAuditEntry | gh_OrgEnableOauthAppRestrictionsAuditEntry | gh_OrgEnableSamlAuditEntry | gh_OrgEnableTwoFactorRequirementAuditEntry | gh_OrgInviteMemberAuditEntry | gh_OrgInviteToBusinessAuditEntry | gh_OrgOauthAppAccessApprovedAuditEntry | gh_OrgOauthAppAccessBlockedAuditEntry | gh_OrgOauthAppAccessDeniedAuditEntry | gh_OrgOauthAppAccessRequestedAuditEntry | gh_OrgOauthAppAccessUnblockedAuditEntry | gh_OrgRemoveBillingManagerAuditEntry | gh_OrgRemoveMemberAuditEntry | gh_OrgRemoveOutsideCollaboratorAuditEntry | gh_OrgRestoreMemberAuditEntry | gh_OrgUnblockUserAuditEntry | gh_OrgUpdateDefaultRepositoryPermissionAuditEntry | gh_OrgUpdateMemberAuditEntry | gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry | gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | gh_PrivateRepositoryForkingDisableAuditEntry | gh_PrivateRepositoryForkingEnableAuditEntry | gh_RepoAccessAuditEntry | gh_RepoAddMemberAuditEntry | gh_RepoAddTopicAuditEntry | gh_RepoArchivedAuditEntry | gh_RepoChangeMergeSettingAuditEntry | gh_RepoConfigDisableAnonymousGitAccessAuditEntry | gh_RepoConfigDisableCollaboratorsOnlyAuditEntry | gh_RepoConfigDisableContributorsOnlyAuditEntry | gh_RepoConfigDisableSockpuppetDisallowedAuditEntry | gh_RepoConfigEnableAnonymousGitAccessAuditEntry | gh_RepoConfigEnableCollaboratorsOnlyAuditEntry | gh_RepoConfigEnableContributorsOnlyAuditEntry | gh_RepoConfigEnableSockpuppetDisallowedAuditEntry | gh_RepoConfigLockAnonymousGitAccessAuditEntry | gh_RepoConfigUnlockAnonymousGitAccessAuditEntry | gh_RepoCreateAuditEntry | gh_RepoDestroyAuditEntry | gh_RepoRemoveMemberAuditEntry | gh_RepoRemoveTopicAuditEntry | gh_RepositoryVisibilityChangeDisableAuditEntry | gh_RepositoryVisibilityChangeEnableAuditEntry | gh_TeamAddMemberAuditEntry | gh_TeamAddRepositoryAuditEntry | gh_TeamChangeParentTeamAuditEntry | gh_TeamRemoveMemberAuditEntry | gh_TeamRemoveRepositoryAuditEntry

"""The connection type for OrganizationAuditEntry."""
type gh_OrganizationAuditEntryConnection {
  """A list of edges."""
  edges: [gh_OrganizationAuditEntryEdge]
  """A list of nodes."""
  nodes: [gh_OrganizationAuditEntry]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Metadata for an audit entry with action org.*"""
interface gh_OrganizationAuditEntryData {
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
}

"""An edge in a connection."""
type gh_OrganizationAuditEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_OrganizationAuditEntry
}

"""A list of organizations managed by an enterprise."""
type gh_OrganizationConnection {
  """A list of edges."""
  edges: [gh_OrganizationEdge]
  """A list of nodes."""
  nodes: [gh_Organization]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_OrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Organization
}

"""The connection type for User."""
type gh_OrganizationEnterpriseOwnerConnection {
  """A list of edges."""
  edges: [gh_OrganizationEnterpriseOwnerEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
An enterprise owner in the context of an organization that is part of the enterprise.
"""
type gh_OrganizationEnterpriseOwnerEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_User
  """The role of the owner with respect to the organization."""
  organizationRole: gh_RoleInOrganization!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type gh_OrganizationIdentityProvider implements gh_Node {
  """
  The digest algorithm used to sign SAML requests for the Identity Provider.
  """
  digestMethod: gh_URI
  """External Identities provisioned by this Identity Provider"""
  externalIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter to external identities with the users login"""
    login: String
    """Filter to external identities with valid org membership only"""
    membersOnly: Boolean
    """Filter to external identities with the users userName/NameID attribute"""
    userName: String
  ): gh_ExternalIdentityConnection!
  """The Node ID of the OrganizationIdentityProvider object"""
  id: ID!
  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: gh_X509Certificate
  """The Issuer Entity ID for the SAML Identity Provider"""
  issuer: String
  """Organization this Identity Provider belongs to"""
  organization: gh_Organization
  """
  The signature algorithm used to sign SAML requests for the Identity Provider.
  """
  signatureMethod: gh_URI
  """The URL endpoint for the Identity Provider's SAML SSO."""
  ssoUrl: gh_URI
}

"""An Invitation for a user to an organization."""
type gh_OrganizationInvitation implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The email address of the user invited to the organization."""
  email: String
  """The Node ID of the OrganizationInvitation object"""
  id: ID!
  """The source of the invitation."""
  invitationSource: gh_OrganizationInvitationSource!
  """The type of invitation that was sent (e.g. email, user)."""
  invitationType: gh_OrganizationInvitationType!
  """The user who was invited to the organization."""
  invitee: gh_User
  """The user who created the invitation."""
  inviter: gh_User!
  """The organization the invite is for"""
  organization: gh_Organization!
  """The user's pending role in the organization (e.g. member, owner)."""
  role: gh_OrganizationInvitationRole!
}

"""The connection type for OrganizationInvitation."""
type gh_OrganizationInvitationConnection {
  """A list of edges."""
  edges: [gh_OrganizationInvitationEdge]
  """A list of nodes."""
  nodes: [gh_OrganizationInvitation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_OrganizationInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_OrganizationInvitation
}

"""The possible organization invitation roles."""
enum gh_OrganizationInvitationRole {
  """The user is invited to be an admin of the organization."""
  ADMIN
  """The user is invited to be a billing manager of the organization."""
  BILLING_MANAGER
  """The user is invited to be a direct member of the organization."""
  DIRECT_MEMBER
  """The user's previous role will be reinstated."""
  REINSTATE
}

"""The possible organization invitation sources."""
enum gh_OrganizationInvitationSource {
  """The invitation was created from the web interface or from API"""
  MEMBER
  """The invitation was created from SCIM"""
  SCIM
  """The invitation was sent before this feature was added"""
  UNKNOWN
}

"""The possible organization invitation types."""
enum gh_OrganizationInvitationType {
  """The invitation was to an email address."""
  EMAIL
  """The invitation was to an existing user."""
  USER
}

"""The connection type for User."""
type gh_OrganizationMemberConnection {
  """A list of edges."""
  edges: [gh_OrganizationMemberEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user within an organization."""
type gh_OrganizationMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """
  Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
  """
  hasTwoFactorEnabled: Boolean
  """The item at the end of the edge."""
  node: gh_User
  """The role this user has in the organization."""
  role: gh_OrganizationMemberRole
}

"""The possible roles within an organization for its members."""
enum gh_OrganizationMemberRole {
  """The user is an administrator of the organization."""
  ADMIN
  """The user is a member of the organization."""
  MEMBER
}

"""
The possible values for the members can create repositories setting on an organization.
"""
enum gh_OrganizationMembersCanCreateRepositoriesSettingValue {
  """Members will be able to create public and private repositories."""
  ALL
  """Members will not be able to create public or private repositories."""
  DISABLED
  """Members will be able to create only internal repositories."""
  INTERNAL
  """Members will be able to create only private repositories."""
  PRIVATE
}

"""A GitHub Enterprise Importer (GEI) organization migration."""
type gh_OrganizationMigration implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: String
  """The reason the organization migration failed."""
  failureReason: String
  """The Node ID of the OrganizationMigration object"""
  id: ID!
  """The remaining amount of repos to be migrated."""
  remainingRepositoriesCount: Int
  """The name of the source organization to be migrated."""
  sourceOrgName: String!
  """The URL of the source organization to migrate."""
  sourceOrgUrl: gh_URI!
  """The migration state."""
  state: gh_OrganizationMigrationState!
  """The name of the target organization."""
  targetOrgName: String!
  """The total amount of repositories to be migrated."""
  totalRepositoriesCount: Int
}

"""The Octoshift Organization migration state."""
enum gh_OrganizationMigrationState {
  """The Octoshift migration has failed."""
  FAILED
  """The Octoshift migration has invalid credentials."""
  FAILED_VALIDATION
  """The Octoshift migration is in progress."""
  IN_PROGRESS
  """The Octoshift migration has not started."""
  NOT_STARTED
  """The Octoshift migration needs to have its credentials validated."""
  PENDING_VALIDATION
  """The Octoshift migration is performing post repository migrations."""
  POST_REPO_MIGRATION
  """The Octoshift migration is performing pre repository migrations."""
  PRE_REPO_MIGRATION
  """The Octoshift migration has been queued."""
  QUEUED
  """The Octoshift org migration is performing repository migrations."""
  REPO_MIGRATION
  """The Octoshift migration has succeeded."""
  SUCCEEDED
}

"""Used for argument of CreateProjectV2 mutation."""
union gh_OrganizationOrUser = gh_Organization | gh_User

"""Ordering options for organization connections."""
input gh_OrganizationOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order organizations by."""
  field: gh_OrganizationOrderField!
}

"""Properties by which organization connections can be ordered."""
enum gh_OrganizationOrderField {
  """Order organizations by creation time"""
  CREATED_AT
  """Order organizations by login"""
  LOGIN
}

"""An organization teams hovercard context"""
type gh_OrganizationTeamsHovercardContext implements gh_HovercardContext {
  """A string describing this context"""
  message: String!
  """An octicon to accompany this context"""
  octicon: String!
  """Teams in this organization the user is a member of that are relevant"""
  relevantTeams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_TeamConnection!
  """The path for the full team list for this user"""
  teamsResourcePath: gh_URI!
  """The URL for the full team list for this user"""
  teamsUrl: gh_URI!
  """The total number of teams the user is on in the organization"""
  totalTeamCount: Int!
}

"""An organization list hovercard context"""
type gh_OrganizationsHovercardContext implements gh_HovercardContext {
  """A string describing this context"""
  message: String!
  """An octicon to accompany this context"""
  octicon: String!
  """Organizations this user is a member of that are relevant"""
  relevantOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the User's organizations."""
    orderBy: gh_OrganizationOrder = null
  ): gh_OrganizationConnection!
  """The total number of organizations this user is in"""
  totalOrganizationCount: Int!
}

"""Information for an uploaded package."""
type gh_Package implements gh_Node {
  """The Node ID of the Package object"""
  id: ID!
  """Find the latest version for the package."""
  latestVersion: gh_PackageVersion
  """Identifies the name of the package."""
  name: String!
  """Identifies the type of the package."""
  packageType: gh_PackageType!
  """The repository this package belongs to."""
  repository: gh_Repository
  """Statistics about package activity."""
  statistics: gh_PackageStatistics
  """Find package version by version string."""
  version(
    """The package version."""
    version: String!
  ): gh_PackageVersion
  """list of versions for this package"""
  versions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering of the returned packages."""
    orderBy: gh_PackageVersionOrder = {direction: DESC, field: CREATED_AT}
  ): gh_PackageVersionConnection!
}

"""The connection type for Package."""
type gh_PackageConnection {
  """A list of edges."""
  edges: [gh_PackageEdge]
  """A list of nodes."""
  nodes: [gh_Package]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PackageEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Package
}

"""A file in a package version."""
type gh_PackageFile implements gh_Node {
  """The Node ID of the PackageFile object"""
  id: ID!
  """MD5 hash of the file."""
  md5: String
  """Name of the file."""
  name: String!
  """The package version this file belongs to."""
  packageVersion: gh_PackageVersion
  """SHA1 hash of the file."""
  sha1: String
  """SHA256 hash of the file."""
  sha256: String
  """Size of the file in bytes."""
  size: Int
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """URL to download the asset."""
  url: gh_URI
}

"""The connection type for PackageFile."""
type gh_PackageFileConnection {
  """A list of edges."""
  edges: [gh_PackageFileEdge]
  """A list of nodes."""
  nodes: [gh_PackageFile]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PackageFileEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PackageFile
}

"""Ways in which lists of package files can be ordered upon return."""
input gh_PackageFileOrder {
  """The direction in which to order package files by the specified field."""
  direction: gh_OrderDirection
  """The field in which to order package files by."""
  field: gh_PackageFileOrderField
}

"""Properties by which package file connections can be ordered."""
enum gh_PackageFileOrderField {
  """Order package files by creation time"""
  CREATED_AT
}

"""Ways in which lists of packages can be ordered upon return."""
input gh_PackageOrder {
  """The direction in which to order packages by the specified field."""
  direction: gh_OrderDirection
  """The field in which to order packages by."""
  field: gh_PackageOrderField
}

"""Properties by which package connections can be ordered."""
enum gh_PackageOrderField {
  """Order packages by creation time"""
  CREATED_AT
}

"""Represents an owner of a package."""
interface gh_PackageOwner {
  """The Node ID of the PackageOwner object"""
  id: ID!
  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Find packages by their names."""
    names: [String]
    """Ordering of the returned packages."""
    orderBy: gh_PackageOrder = {direction: DESC, field: CREATED_AT}
    """Filter registry package by type."""
    packageType: gh_PackageType
    """Find packages in a repository by ID."""
    repositoryId: ID
  ): gh_PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type gh_PackageStatistics {
  """Number of times the package was downloaded since it was created."""
  downloadsTotalCount: Int!
}

"""A version tag contains the mapping between a tag name and a version."""
type gh_PackageTag implements gh_Node {
  """The Node ID of the PackageTag object"""
  id: ID!
  """Identifies the tag name of the version."""
  name: String!
  """Version that the tag is associated with."""
  version: gh_PackageVersion
}

"""The possible types of a package."""
enum gh_PackageType {
  """A debian package."""
  DEBIAN
  """A docker image."""
  DOCKER @deprecated(reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC.")
  """A maven package."""
  MAVEN @deprecated(reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC.")
  """An npm package."""
  NPM @deprecated(reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC.")
  """A nuget package."""
  NUGET @deprecated(reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC.")
  """A python package."""
  PYPI
  """A rubygems package."""
  RUBYGEMS @deprecated(reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC.")
}

"""Information about a specific package version."""
type gh_PackageVersion implements gh_Node {
  """List of files associated with this package version"""
  files(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering of the returned package files."""
    orderBy: gh_PackageFileOrder = {direction: ASC, field: CREATED_AT}
  ): gh_PackageFileConnection!
  """The Node ID of the PackageVersion object"""
  id: ID!
  """The package associated with this version."""
  package: gh_Package
  """The platform this version was built for."""
  platform: String
  """Whether or not this version is a pre-release."""
  preRelease: Boolean!
  """The README of this package version."""
  readme: String
  """The release associated with this package version."""
  release: gh_Release
  """Statistics about package activity."""
  statistics: gh_PackageVersionStatistics
  """The package version summary."""
  summary: String
  """The version string."""
  version: String!
}

"""The connection type for PackageVersion."""
type gh_PackageVersionConnection {
  """A list of edges."""
  edges: [gh_PackageVersionEdge]
  """A list of nodes."""
  nodes: [gh_PackageVersion]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PackageVersionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PackageVersion
}

"""Ways in which lists of package versions can be ordered upon return."""
input gh_PackageVersionOrder {
  """
  The direction in which to order package versions by the specified field.
  """
  direction: gh_OrderDirection
  """The field in which to order package versions by."""
  field: gh_PackageVersionOrderField
}

"""Properties by which package version connections can be ordered."""
enum gh_PackageVersionOrderField {
  """Order package versions by creation time"""
  CREATED_AT
}

"""
Represents a object that contains package version activity statistics such as downloads.
"""
type gh_PackageVersionStatistics {
  """Number of times the package was downloaded since it was created."""
  downloadsTotalCount: Int!
}

"""Information about pagination in a connection."""
type gh_PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The possible types of patch statuses."""
enum gh_PatchStatus {
  """The file was added. Git status 'A'."""
  ADDED
  """The file's type was changed. Git status 'T'."""
  CHANGED
  """The file was copied. Git status 'C'."""
  COPIED
  """The file was deleted. Git status 'D'."""
  DELETED
  """The file's contents were changed. Git status 'M'."""
  MODIFIED
  """The file was renamed. Git status 'R'."""
  RENAMED
}

"""Types that can grant permissions on a repository to a user"""
union gh_PermissionGranter = gh_Organization | gh_Repository | gh_Team

"""A level of permission and source for a user's access to a repository."""
type gh_PermissionSource {
  """The organization the repository belongs to."""
  organization: gh_Organization!
  """The level of access this source has granted to the user."""
  permission: gh_DefaultRepositoryPermissionField!
  """The name of the role this source has granted to the user."""
  roleName: String
  """The source of this permission."""
  source: gh_PermissionGranter!
}

"""Autogenerated input type of PinIssue"""
input gh_PinIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the issue to be pinned"""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""Autogenerated return type of PinIssue"""
type gh_PinIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue that was pinned"""
  issue: gh_Issue
}

"""Types that can be pinned to a profile page."""
union gh_PinnableItem = gh_Gist | gh_Repository

"""The connection type for PinnableItem."""
type gh_PinnableItemConnection {
  """A list of edges."""
  edges: [gh_PinnableItemEdge]
  """A list of nodes."""
  nodes: [gh_PinnableItem]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PinnableItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PinnableItem
}

"""Represents items that can be pinned to a profile page or dashboard."""
enum gh_PinnableItemType {
  """A gist."""
  GIST
  """An issue."""
  ISSUE
  """An organization."""
  ORGANIZATION
  """A project."""
  PROJECT
  """A pull request."""
  PULL_REQUEST
  """A repository."""
  REPOSITORY
  """A team."""
  TEAM
  """A user."""
  USER
}

"""
A Pinned Discussion is a discussion pinned to a repository's index page.
"""
type gh_PinnedDiscussion implements gh_Node & gh_RepositoryNode {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The discussion that was pinned."""
  discussion: gh_Discussion!
  """Color stops of the chosen gradient"""
  gradientStopColors: [String!]!
  """The Node ID of the PinnedDiscussion object"""
  id: ID!
  """Background texture pattern"""
  pattern: gh_PinnedDiscussionPattern!
  """The actor that pinned this discussion."""
  pinnedBy: gh_Actor!
  """Preconfigured background gradient option"""
  preconfiguredGradient: gh_PinnedDiscussionGradient
  """The repository associated with this node."""
  repository: gh_Repository!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for PinnedDiscussion."""
type gh_PinnedDiscussionConnection {
  """A list of edges."""
  edges: [gh_PinnedDiscussionEdge]
  """A list of nodes."""
  nodes: [gh_PinnedDiscussion]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PinnedDiscussionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PinnedDiscussion
}

"""
Preconfigured gradients that may be used to style discussions pinned within a repository.
"""
enum gh_PinnedDiscussionGradient {
  """A gradient of blue to mint"""
  BLUE_MINT
  """A gradient of blue to purple"""
  BLUE_PURPLE
  """A gradient of pink to blue"""
  PINK_BLUE
  """A gradient of purple to coral"""
  PURPLE_CORAL
  """A gradient of red to orange"""
  RED_ORANGE
}

"""
Preconfigured background patterns that may be used to style discussions pinned within a repository.
"""
enum gh_PinnedDiscussionPattern {
  """An upward-facing chevron pattern"""
  CHEVRON_UP
  """A hollow dot pattern"""
  DOT
  """A solid dot pattern"""
  DOT_FILL
  """A heart pattern"""
  HEART_FILL
  """A plus sign pattern"""
  PLUS
  """A lightning bolt pattern"""
  ZAP
}

"""Represents a 'pinned' event on a given issue or pull request."""
type gh_PinnedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the PinnedEvent object"""
  id: ID!
  """Identifies the issue associated with the event."""
  issue: gh_Issue!
}

"""A Pinned Issue is a issue pinned to a repository's index page."""
type gh_PinnedIssue implements gh_Node {
  """Identifies the primary key from the database."""
  databaseId: Int
  """Identifies the primary key from the database as a BigInt."""
  fullDatabaseId: BigInt
  """The Node ID of the PinnedIssue object"""
  id: ID!
  """The issue that was pinned."""
  issue: gh_Issue!
  """The actor that pinned this issue."""
  pinnedBy: gh_Actor!
  """The repository that this issue was pinned to."""
  repository: gh_Repository!
}

"""The connection type for PinnedIssue."""
type gh_PinnedIssueConnection {
  """A list of edges."""
  edges: [gh_PinnedIssueEdge]
  """A list of nodes."""
  nodes: [gh_PinnedIssue]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PinnedIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PinnedIssue
}

"""An ISO-8601 encoded UTC date string with millisecond precision."""
scalar gh_PreciseDateTime

"""Audit log entry for a private_repository_forking.disable event."""
type gh_PrivateRepositoryForkingDisableAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the PrivateRepositoryForkingDisableAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a private_repository_forking.enable event."""
type gh_PrivateRepositoryForkingEnableAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the PrivateRepositoryForkingEnableAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""
A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own.
"""
type gh_ProfileItemShowcase {
  """Whether or not the owner has pinned any repositories or gists."""
  hasPinnedItems: Boolean!
  """
  The repositories and gists in the showcase. If the profile owner has any
  pinned items, those will be returned. Otherwise, the profile owner's popular
  repositories will be returned.
  """
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PinnableItemConnection!
}

"""Represents any entity on GitHub that has a profile page."""
interface gh_ProfileOwner {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """Filter to only a particular kind of pinnable item."""
    type: gh_PinnableItemType
  ): Boolean!
  """The public profile email."""
  email: String
  """The Node ID of the ProfileOwner object"""
  id: ID!
  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: gh_ProfileItemShowcase!
  """The public profile location."""
  location: String
  """The username used to login."""
  login: String!
  """The public profile name."""
  name: String
  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter the types of pinnable items that are returned."""
    types: [gh_PinnableItemType!]
  ): gh_PinnableItemConnection!
  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter the types of pinned items that are returned."""
    types: [gh_PinnableItemType!]
  ): gh_PinnableItemConnection!
  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!
  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!
  """The public profile website URL."""
  websiteUrl: gh_URI
}

"""
Projects manage issues, pull requests and notes within a project owner.
"""
type gh_Project implements gh_Closable & gh_Node & gh_Updatable {
  """The project's description body."""
  body: String
  """The projects description body rendered to HTML."""
  bodyHTML: gh_HTML!
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """List of columns in the project"""
  columns(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectColumnConnection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who originally created the project."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the Project object"""
  id: ID!
  """The project's name."""
  name: String!
  """The project's number."""
  number: Int!
  """
  The project's owner. Currently limited to repositories, organizations, and users.
  """
  owner: gh_ProjectOwner!
  """List of pending cards in this project"""
  pendingCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """A list of archived states to filter the cards by"""
    archivedStates: [gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectCardConnection!
  """Project progress details."""
  progress: gh_ProjectProgress!
  """The HTTP path for this project"""
  resourcePath: gh_URI!
  """Whether the project is open or closed."""
  state: gh_ProjectState!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this project"""
  url: gh_URI!
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
}

"""A card in a project."""
type gh_ProjectCard implements gh_Node {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  """
  column: gh_ProjectColumn
  """The card content item"""
  content: gh_ProjectCardItem
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created this card"""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ProjectCard object"""
  id: ID!
  """Whether the card is archived"""
  isArchived: Boolean!
  """The card note"""
  note: String
  """The project that contains this card."""
  project: gh_Project!
  """The HTTP path for this card"""
  resourcePath: gh_URI!
  """The state of ProjectCard"""
  state: gh_ProjectCardState
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this card"""
  url: gh_URI!
}

"""The possible archived states of a project card."""
enum gh_ProjectCardArchivedState {
  """A project card that is archived"""
  ARCHIVED
  """A project card that is not archived"""
  NOT_ARCHIVED
}

"""The connection type for ProjectCard."""
type gh_ProjectCardConnection {
  """A list of edges."""
  edges: [gh_ProjectCardEdge]
  """A list of nodes."""
  nodes: [gh_ProjectCard]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectCardEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectCard
}

"""An issue or PR and its owning repository to be used in a project card."""
input gh_ProjectCardImport {
  """The issue or pull request number."""
  number: Int!
  """Repository name with owner (owner/repository)."""
  repository: String!
}

"""Types that can be inside Project Cards."""
union gh_ProjectCardItem = gh_Issue | gh_PullRequest

"""Various content states of a ProjectCard"""
enum gh_ProjectCardState {
  """The card has content only."""
  CONTENT_ONLY
  """The card has a note only."""
  NOTE_ONLY
  """The card is redacted."""
  REDACTED
}

"""A column inside a project."""
type gh_ProjectColumn implements gh_Node {
  """List of cards in the column"""
  cards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """A list of archived states to filter the cards by"""
    archivedStates: [gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectCardConnection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ProjectColumn object"""
  id: ID!
  """The project column's name."""
  name: String!
  """The project that contains this column."""
  project: gh_Project!
  """The semantic purpose of the column"""
  purpose: gh_ProjectColumnPurpose
  """The HTTP path for this project column"""
  resourcePath: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this project column"""
  url: gh_URI!
}

"""The connection type for ProjectColumn."""
type gh_ProjectColumnConnection {
  """A list of edges."""
  edges: [gh_ProjectColumnEdge]
  """A list of nodes."""
  nodes: [gh_ProjectColumn]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectColumnEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectColumn
}

"""A project column and a list of its issues and PRs."""
input gh_ProjectColumnImport {
  """The name of the column."""
  columnName: String!
  """A list of issues and pull requests in the column."""
  issues: [gh_ProjectCardImport!]
  """The position of the column, starting from 0."""
  position: Int!
}

"""The semantic purpose of the column - todo, in progress, or done."""
enum gh_ProjectColumnPurpose {
  """The column contains cards which are complete"""
  DONE
  """The column contains cards which are currently being worked on"""
  IN_PROGRESS
  """The column contains cards still to be worked on"""
  TODO
}

"""A list of projects associated with the owner."""
type gh_ProjectConnection {
  """A list of edges."""
  edges: [gh_ProjectEdge]
  """A list of nodes."""
  nodes: [gh_Project]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Project
}

"""Ways in which lists of projects can be ordered upon return."""
input gh_ProjectOrder {
  """The direction in which to order projects by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order projects by."""
  field: gh_ProjectOrderField!
}

"""Properties by which project connections can be ordered."""
enum gh_ProjectOrderField {
  """Order projects by creation time"""
  CREATED_AT
  """Order projects by name"""
  NAME
  """Order projects by update time"""
  UPDATED_AT
}

"""Represents an owner of a Project."""
interface gh_ProjectOwner {
  """The Node ID of the ProjectOwner object"""
  id: ID!
  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): gh_Project
  """A list of projects under the owner."""
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for projects returned from the connection"""
    orderBy: gh_ProjectOrder
    """Query to search projects by, currently only searching by name."""
    search: String
    """A list of states to filter the projects by."""
    states: [gh_ProjectState!]
  ): gh_ProjectConnection!
  """The HTTP path listing owners projects"""
  projectsResourcePath: gh_URI!
  """The HTTP URL listing owners projects"""
  projectsUrl: gh_URI!
  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!
}

"""Project progress stats."""
type gh_ProjectProgress {
  """The number of done cards."""
  doneCount: Int!
  """The percentage of done cards."""
  donePercentage: Float!
  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!
  """The number of in-progress cards."""
  inProgressCount: Int!
  """The percentage of in-progress cards."""
  inProgressPercentage: Float!
  """The number of to do cards."""
  todoCount: Int!
  """The percentage of to do cards."""
  todoPercentage: Float!
}

"""State of the project; either 'open' or 'closed'"""
enum gh_ProjectState {
  """The project is closed."""
  CLOSED
  """The project is open."""
  OPEN
}

"""GitHub-provided templates for Projects"""
enum gh_ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2
  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN
  """Create a board with columns for To do, In progress and Done."""
  BASIC_KANBAN
  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type gh_ProjectV2 implements gh_Closable & gh_Node & gh_Updatable {
  """Returns true if the project is closed."""
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who originally created the project."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """A field of the project"""
  field(
    """The name of the field"""
    name: String!
  ): gh_ProjectV2FieldConfiguration
  """List of fields and their constraints in the project"""
  fields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for project v2 fields returned from the connection"""
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConfigurationConnection!
  """The Node ID of the ProjectV2 object"""
  id: ID!
  """List of items in the project"""
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for project v2 items returned from the connection"""
    orderBy: gh_ProjectV2ItemOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2ItemConnection!
  """The project's number."""
  number: Int!
  """The project's owner. Currently limited to organizations and users."""
  owner: gh_ProjectV2Owner!
  """Returns true if the project is public."""
  public: Boolean!
  """The project's readme."""
  readme: String
  """The repositories the project is linked to."""
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder = {direction: DESC, field: CREATED_AT}
  ): gh_RepositoryConnection!
  """The HTTP path for this project"""
  resourcePath: gh_URI!
  """The project's short description."""
  shortDescription: String
  """The teams the project is linked to."""
  teams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for teams returned from this connection."""
    orderBy: gh_TeamOrder = {direction: ASC, field: NAME}
  ): gh_TeamConnection!
  """Returns true if this project is a template."""
  template: Boolean!
  """The project's name."""
  title: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this project"""
  url: gh_URI!
  """A view of the project"""
  view(
    """The number of a view belonging to the project"""
    number: Int!
  ): gh_ProjectV2View
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """List of views in the project"""
  views(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for project v2 views returned from the connection"""
    orderBy: gh_ProjectV2ViewOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2ViewConnection!
  """A workflow of the project"""
  workflow(
    """The number of a workflow belonging to the project"""
    number: Int!
  ): gh_ProjectV2Workflow
  """List of the workflows in the project"""
  workflows(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for project v2 workflows returned from the connection"""
    orderBy: gh_ProjectV2WorkflowOrder = {direction: ASC, field: NAME}
  ): gh_ProjectV2WorkflowConnection!
}

"""Possible collaborators for a project."""
union gh_ProjectV2Actor = gh_Team | gh_User

"""The connection type for ProjectV2Actor."""
type gh_ProjectV2ActorConnection {
  """A list of edges."""
  edges: [gh_ProjectV2ActorEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2Actor]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2ActorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input gh_ProjectV2Collaborator {
  """The role to grant the collaborator"""
  role: gh_ProjectV2Roles!
  """The ID of the team as a collaborator."""
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  """The ID of the user as a collaborator."""
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""The connection type for ProjectV2."""
type gh_ProjectV2Connection {
  """A list of edges."""
  edges: [gh_ProjectV2Edge]
  """A list of nodes."""
  nodes: [gh_ProjectV2]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The type of a project field."""
enum gh_ProjectV2CustomFieldType {
  """Date"""
  DATE
  """Number"""
  NUMBER
  """Single Select"""
  SINGLE_SELECT
  """Text"""
  TEXT
}

"""An edge in a connection."""
type gh_ProjectV2Edge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2
}

"""A field inside a project."""
type gh_ProjectV2Field implements gh_Node & gh_ProjectV2FieldCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The field's type."""
  dataType: gh_ProjectV2FieldType!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ProjectV2Field object"""
  id: ID!
  """The project field's name."""
  name: String!
  """The project that contains this field."""
  project: gh_ProjectV2!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Common fields across different project field types"""
interface gh_ProjectV2FieldCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The field's type."""
  dataType: gh_ProjectV2FieldType!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ProjectV2FieldCommon object"""
  id: ID!
  """The project field's name."""
  name: String!
  """The project that contains this field."""
  project: gh_ProjectV2!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Configurations for project fields."""
union gh_ProjectV2FieldConfiguration = gh_ProjectV2Field | gh_ProjectV2IterationField | gh_ProjectV2SingleSelectField

"""The connection type for ProjectV2FieldConfiguration."""
type gh_ProjectV2FieldConfigurationConnection {
  """A list of edges."""
  edges: [gh_ProjectV2FieldConfigurationEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2FieldConfiguration]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2FieldConfigurationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2FieldConfiguration
}

"""The connection type for ProjectV2Field."""
type gh_ProjectV2FieldConnection {
  """A list of edges."""
  edges: [gh_ProjectV2FieldEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2Field]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2FieldEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2Field
}

"""Ordering options for project v2 field connections"""
input gh_ProjectV2FieldOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order the project v2 fields by."""
  field: gh_ProjectV2FieldOrderField!
}

"""Properties by which project v2 field connections can be ordered."""
enum gh_ProjectV2FieldOrderField {
  """Order project v2 fields by creation time"""
  CREATED_AT
  """Order project v2 fields by name"""
  NAME
  """Order project v2 fields by position"""
  POSITION
}

"""The type of a project field."""
enum gh_ProjectV2FieldType {
  """Assignees"""
  ASSIGNEES
  """Date"""
  DATE
  """Iteration"""
  ITERATION
  """Labels"""
  LABELS
  """Linked Pull Requests"""
  LINKED_PULL_REQUESTS
  """Milestone"""
  MILESTONE
  """Number"""
  NUMBER
  """Repository"""
  REPOSITORY
  """Reviewers"""
  REVIEWERS
  """Single Select"""
  SINGLE_SELECT
  """Text"""
  TEXT
  """Title"""
  TITLE
  """Tracked by"""
  TRACKED_BY
  """Tracks"""
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input gh_ProjectV2FieldValue {
  """The ISO 8601 date to set on the field."""
  date: Date
  """The id of the iteration to set on the field."""
  iterationId: String
  """The number to set on the field."""
  number: Float
  """The id of the single select option to set on the field."""
  singleSelectOptionId: String
  """The text to set on the field."""
  text: String
}

"""Ways in which to filter lists of projects."""
input gh_ProjectV2Filters {
  """List project v2 filtered by the state given."""
  state: gh_ProjectV2State
}

"""An item within a Project."""
type gh_ProjectV2Item implements gh_Node {
  """The content of the referenced draft issue, issue, or pull request"""
  content: gh_ProjectV2ItemContent
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """The name of the field to return the field value of"""
    name: String!
  ): gh_ProjectV2ItemFieldValue
  """The field values that are set on the item."""
  fieldValues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: gh_ProjectV2ItemFieldValueOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2ItemFieldValueConnection!
  """The Node ID of the ProjectV2Item object"""
  id: ID!
  """Whether the item is archived."""
  isArchived: Boolean!
  """The project that contains this item."""
  project: gh_ProjectV2!
  """The type of the item."""
  type: gh_ProjectV2ItemType!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for ProjectV2Item."""
type gh_ProjectV2ItemConnection {
  """A list of edges."""
  edges: [gh_ProjectV2ItemEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2Item]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Types that can be inside Project Items."""
union gh_ProjectV2ItemContent = gh_DraftIssue | gh_Issue | gh_PullRequest

"""An edge in a connection."""
type gh_ProjectV2ItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2Item
}

"""The value of a date field in a Project item."""
type gh_ProjectV2ItemFieldDateValue implements gh_Node & gh_ProjectV2ItemFieldValueCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """Date value for the field"""
  date: Date
  """The project field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The Node ID of the ProjectV2ItemFieldDateValue object"""
  id: ID!
  """The project item that contains this value."""
  item: gh_ProjectV2Item!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The value of an iteration field in a Project item."""
type gh_ProjectV2ItemFieldIterationValue implements gh_Node & gh_ProjectV2ItemFieldValueCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """The duration of the iteration in days."""
  duration: Int!
  """The project field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The Node ID of the ProjectV2ItemFieldIterationValue object"""
  id: ID!
  """The project item that contains this value."""
  item: gh_ProjectV2Item!
  """The ID of the iteration."""
  iterationId: String!
  """The start date of the iteration."""
  startDate: Date!
  """The title of the iteration."""
  title: String!
  """The title of the iteration, with HTML."""
  titleHTML: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The value of the labels field in a Project item."""
type gh_ProjectV2ItemFieldLabelValue {
  """The field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """Labels value of a field"""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_LabelConnection
}

"""The value of a milestone field in a Project item."""
type gh_ProjectV2ItemFieldMilestoneValue {
  """The field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """Milestone value of a field"""
  milestone: gh_Milestone
}

"""The value of a number field in a Project item."""
type gh_ProjectV2ItemFieldNumberValue implements gh_Node & gh_ProjectV2ItemFieldValueCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """The project field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The Node ID of the ProjectV2ItemFieldNumberValue object"""
  id: ID!
  """The project item that contains this value."""
  item: gh_ProjectV2Item!
  """Number as a float(8)"""
  number: Float
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The value of a pull request field in a Project item."""
type gh_ProjectV2ItemFieldPullRequestValue {
  """The field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The pull requests for this field"""
  pullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests."""
    orderBy: gh_PullRequestOrder = {direction: ASC, field: CREATED_AT}
  ): gh_PullRequestConnection
}

"""The value of a repository field in a Project item."""
type gh_ProjectV2ItemFieldRepositoryValue {
  """The field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The repository for this field."""
  repository: gh_Repository
}

"""The value of a reviewers field in a Project item."""
type gh_ProjectV2ItemFieldReviewerValue {
  """The field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The reviewers for this field."""
  reviewers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_RequestedReviewerConnection
}

"""The value of a single select field in a Project item."""
type gh_ProjectV2ItemFieldSingleSelectValue implements gh_Node & gh_ProjectV2ItemFieldValueCommon {
  """The color applied to the selected single-select option."""
  color: gh_ProjectV2SingleSelectFieldOptionColor!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String
  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String
  """The project field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The Node ID of the ProjectV2ItemFieldSingleSelectValue object"""
  id: ID!
  """The project item that contains this value."""
  item: gh_ProjectV2Item!
  """The name of the selected single select option."""
  name: String
  """The html name of the selected single select option."""
  nameHTML: String
  """The id of the selected single select option."""
  optionId: String
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The value of a text field in a Project item."""
type gh_ProjectV2ItemFieldTextValue implements gh_Node & gh_ProjectV2ItemFieldValueCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """The project field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The Node ID of the ProjectV2ItemFieldTextValue object"""
  id: ID!
  """The project item that contains this value."""
  item: gh_ProjectV2Item!
  """Text value of a field"""
  text: String
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The value of a user field in a Project item."""
type gh_ProjectV2ItemFieldUserValue {
  """The field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The users for this field"""
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection
}

"""Project field values"""
union gh_ProjectV2ItemFieldValue = gh_ProjectV2ItemFieldDateValue | gh_ProjectV2ItemFieldIterationValue | gh_ProjectV2ItemFieldLabelValue | gh_ProjectV2ItemFieldMilestoneValue | gh_ProjectV2ItemFieldNumberValue | gh_ProjectV2ItemFieldPullRequestValue | gh_ProjectV2ItemFieldRepositoryValue | gh_ProjectV2ItemFieldReviewerValue | gh_ProjectV2ItemFieldSingleSelectValue | gh_ProjectV2ItemFieldTextValue | gh_ProjectV2ItemFieldUserValue

"""Common fields across different project field value types"""
interface gh_ProjectV2ItemFieldValueCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created the item."""
  creator: gh_Actor
  """Identifies the primary key from the database."""
  databaseId: Int
  """The project field that contains this value."""
  field: gh_ProjectV2FieldConfiguration!
  """The Node ID of the ProjectV2ItemFieldValueCommon object"""
  id: ID!
  """The project item that contains this value."""
  item: gh_ProjectV2Item!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for ProjectV2ItemFieldValue."""
type gh_ProjectV2ItemFieldValueConnection {
  """A list of edges."""
  edges: [gh_ProjectV2ItemFieldValueEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2ItemFieldValue]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2ItemFieldValueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2ItemFieldValue
}

"""Ordering options for project v2 item field value connections"""
input gh_ProjectV2ItemFieldValueOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order the project v2 item field values by."""
  field: gh_ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum gh_ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""Ordering options for project v2 item connections"""
input gh_ProjectV2ItemOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order the project v2 items by."""
  field: gh_ProjectV2ItemOrderField!
}

"""Properties by which project v2 item connections can be ordered."""
enum gh_ProjectV2ItemOrderField {
  """Order project v2 items by the their position in the project"""
  POSITION
}

"""The type of a project item."""
enum gh_ProjectV2ItemType {
  """Draft Issue"""
  DRAFT_ISSUE
  """Issue"""
  ISSUE
  """Pull Request"""
  PULL_REQUEST
  """Redacted Item"""
  REDACTED
}

"""An iteration field inside a project."""
type gh_ProjectV2IterationField implements gh_Node & gh_ProjectV2FieldCommon {
  """Iteration configuration settings"""
  configuration: gh_ProjectV2IterationFieldConfiguration!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The field's type."""
  dataType: gh_ProjectV2FieldType!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ProjectV2IterationField object"""
  id: ID!
  """The project field's name."""
  name: String!
  """The project that contains this field."""
  project: gh_ProjectV2!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Iteration field configuration for a project."""
type gh_ProjectV2IterationFieldConfiguration {
  """The iteration's completed iterations"""
  completedIterations: [gh_ProjectV2IterationFieldIteration!]!
  """The iteration's duration in days"""
  duration: Int!
  """The iteration's iterations"""
  iterations: [gh_ProjectV2IterationFieldIteration!]!
  """The iteration's start day of the week"""
  startDay: Int!
}

"""Iteration field iteration settings for a project."""
type gh_ProjectV2IterationFieldIteration {
  """The iteration's duration in days"""
  duration: Int!
  """The iteration's ID."""
  id: String!
  """The iteration's start date"""
  startDate: Date!
  """The iteration's title."""
  title: String!
  """The iteration's html title."""
  titleHTML: String!
}

"""Ways in which lists of projects can be ordered upon return."""
input gh_ProjectV2Order {
  """The direction in which to order projects by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order projects by."""
  field: gh_ProjectV2OrderField!
}

"""Properties by which projects can be ordered."""
enum gh_ProjectV2OrderField {
  """The project's date and time of creation"""
  CREATED_AT
  """The project's number"""
  NUMBER
  """The project's title"""
  TITLE
  """The project's date and time of update"""
  UPDATED_AT
}

"""Represents an owner of a project."""
interface gh_ProjectV2Owner {
  """The Node ID of the ProjectV2Owner object"""
  id: ID!
  """Find a project by number."""
  projectV2(
    """The project number."""
    number: Int!
  ): gh_ProjectV2
  """A list of projects under the owner."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """A project to search for under the the owner."""
    query: String
  ): gh_ProjectV2Connection!
}

"""Recent projects for the owner."""
interface gh_ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2Connection!
}

"""The possible roles of a collaborator on a project."""
enum gh_ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN
  """The collaborator has no direct access to the project"""
  NONE
  """The collaborator can view the project"""
  READER
  """The collaborator can view and edit the project"""
  WRITER
}

"""A single select field inside a project."""
type gh_ProjectV2SingleSelectField implements gh_Node & gh_ProjectV2FieldCommon {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The field's type."""
  dataType: gh_ProjectV2FieldType!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ProjectV2SingleSelectField object"""
  id: ID!
  """The project field's name."""
  name: String!
  """Options for the single select field"""
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [gh_ProjectV2SingleSelectFieldOption!]!
  """The project that contains this field."""
  project: gh_ProjectV2!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Single select field option for a configuration for a project."""
type gh_ProjectV2SingleSelectFieldOption {
  """The option's display color."""
  color: gh_ProjectV2SingleSelectFieldOptionColor!
  """The option's plain-text description."""
  description: String!
  """The option's description, possibly containing HTML."""
  descriptionHTML: String!
  """The option's ID."""
  id: String!
  """The option's name."""
  name: String!
  """The option's html name."""
  nameHTML: String!
}

"""The display color of a single-select field option."""
enum gh_ProjectV2SingleSelectFieldOptionColor {
  """BLUE"""
  BLUE
  """GRAY"""
  GRAY
  """GREEN"""
  GREEN
  """ORANGE"""
  ORANGE
  """PINK"""
  PINK
  """PURPLE"""
  PURPLE
  """RED"""
  RED
  """YELLOW"""
  YELLOW
}

"""Represents a single select field option"""
input gh_ProjectV2SingleSelectFieldOptionInput {
  """The display color of the option"""
  color: gh_ProjectV2SingleSelectFieldOptionColor!
  """The description text of the option"""
  description: String!
  """The name of the option"""
  name: String!
}

"""Represents a sort by field and direction."""
type gh_ProjectV2SortBy {
  """The direction of the sorting. Possible values are ASC and DESC."""
  direction: gh_OrderDirection!
  """The field by which items are sorted."""
  field: gh_ProjectV2Field!
}

"""The connection type for ProjectV2SortBy."""
type gh_ProjectV2SortByConnection {
  """A list of edges."""
  edges: [gh_ProjectV2SortByEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2SortBy]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2SortByEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2SortBy
}

"""Represents a sort by field and direction."""
type gh_ProjectV2SortByField {
  """The direction of the sorting. Possible values are ASC and DESC."""
  direction: gh_OrderDirection!
  """The field by which items are sorted."""
  field: gh_ProjectV2FieldConfiguration!
}

"""The connection type for ProjectV2SortByField."""
type gh_ProjectV2SortByFieldConnection {
  """A list of edges."""
  edges: [gh_ProjectV2SortByFieldEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2SortByField]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2SortByFieldEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2SortByField
}

"""The possible states of a project v2."""
enum gh_ProjectV2State {
  """A project v2 that has been closed"""
  CLOSED
  """A project v2 that is still open"""
  OPEN
}

"""A view within a ProjectV2."""
type gh_ProjectV2View implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The view's visible fields."""
  fields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConfigurationConnection
  """The project view's filter."""
  filter: String
  """The view's group-by field."""
  groupBy(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConnection @deprecated(reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.")
  """The view's group-by field."""
  groupByFields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConfigurationConnection
  """The Node ID of the ProjectV2View object"""
  id: ID!
  """The project view's layout."""
  layout: gh_ProjectV2ViewLayout!
  """The project view's name."""
  name: String!
  """The project view's number."""
  number: Int!
  """The project that contains this view."""
  project: gh_ProjectV2!
  """The view's sort-by config."""
  sortBy(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2SortByConnection @deprecated(reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.")
  """The view's sort-by config."""
  sortByFields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2SortByFieldConnection
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The view's vertical-group-by field."""
  verticalGroupBy(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConnection @deprecated(reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.")
  """The view's vertical-group-by field."""
  verticalGroupByFields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConfigurationConnection
  """The view's visible fields."""
  visibleFields(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: gh_ProjectV2FieldOrder = {direction: ASC, field: POSITION}
  ): gh_ProjectV2FieldConnection @deprecated(reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.")
}

"""The connection type for ProjectV2View."""
type gh_ProjectV2ViewConnection {
  """A list of edges."""
  edges: [gh_ProjectV2ViewEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2View]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2ViewEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2View
}

"""The layout of a project v2 view."""
enum gh_ProjectV2ViewLayout {
  """Board layout"""
  BOARD_LAYOUT
  """Roadmap layout"""
  ROADMAP_LAYOUT
  """Table layout"""
  TABLE_LAYOUT
}

"""Ordering options for project v2 view connections"""
input gh_ProjectV2ViewOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order the project v2 views by."""
  field: gh_ProjectV2ViewOrderField!
}

"""Properties by which project v2 view connections can be ordered."""
enum gh_ProjectV2ViewOrderField {
  """Order project v2 views by creation time"""
  CREATED_AT
  """Order project v2 views by name"""
  NAME
  """Order project v2 views by position"""
  POSITION
}

"""A workflow inside a project."""
type gh_ProjectV2Workflow implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """Whether the workflow is enabled."""
  enabled: Boolean!
  """The Node ID of the ProjectV2Workflow object"""
  id: ID!
  """The name of the workflow."""
  name: String!
  """The number of the workflow."""
  number: Int!
  """The project that contains this workflow."""
  project: gh_ProjectV2!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for ProjectV2Workflow."""
type gh_ProjectV2WorkflowConnection {
  """A list of edges."""
  edges: [gh_ProjectV2WorkflowEdge]
  """A list of nodes."""
  nodes: [gh_ProjectV2Workflow]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ProjectV2WorkflowEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ProjectV2Workflow
}

"""Ordering options for project v2 workflows connections"""
input gh_ProjectV2WorkflowOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order the project v2 workflows by."""
  field: gh_ProjectV2WorkflowsOrderField!
}

"""Properties by which project workflows can be ordered."""
enum gh_ProjectV2WorkflowsOrderField {
  """The date and time of the workflow creation"""
  CREATED_AT
  """The name of the workflow"""
  NAME
  """The number of the workflow"""
  NUMBER
  """The date and time of the workflow update"""
  UPDATED_AT
}

"""A user's public key."""
type gh_PublicKey implements gh_Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime
  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime
  """The fingerprint for this PublicKey."""
  fingerprint: String!
  """The Node ID of the PublicKey object"""
  id: ID!
  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean
  """The public key string."""
  key: String!
  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""The connection type for PublicKey."""
type gh_PublicKeyConnection {
  """A list of edges."""
  edges: [gh_PublicKeyEdge]
  """A list of nodes."""
  nodes: [gh_PublicKey]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PublicKeyEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PublicKey
}

"""Autogenerated input type of PublishSponsorsTier"""
input gh_PublishSponsorsTierInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the draft tier to publish."""
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""Autogenerated return type of PublishSponsorsTier"""
type gh_PublishSponsorsTierPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The tier that was published."""
  sponsorsTier: gh_SponsorsTier
}

"""A repository pull request."""
type gh_PullRequest implements gh_Assignable & gh_Closable & gh_Comment & gh_Labelable & gh_Lockable & gh_Node & gh_ProjectV2Owner & gh_Reactable & gh_RepositoryNode & gh_Subscribable & gh_UniformResourceLocatable & gh_Updatable & gh_UpdatableComment {
  """Reason that the conversation was locked."""
  activeLockReason: gh_LockReason
  """The number of additions in this pull request."""
  additions: Int!
  """A list of Users assigned to this object."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: gh_AutoMergeRequest
  """Identifies the base Ref associated with the pull request."""
  baseRef: gh_Ref
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: gh_GitObjectID!
  """The repository associated with this pull request's base Ref."""
  baseRepository: gh_Repository
  """The body as Markdown."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """Whether or not the pull request is rebaseable."""
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")
  """The number of changed files in this pull request."""
  changedFiles: Int!
  """The HTTP path for the checks of this pull request."""
  checksResourcePath: gh_URI!
  """The HTTP URL for the checks of this pull request."""
  checksUrl: gh_URI!
  """`true` if the pull request is closed"""
  closed: Boolean!
  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
  """List of issues that were may be closed by this pull request"""
  closingIssuesReferences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issues returned from the connection"""
    orderBy: gh_IssueOrder
    """Return only manually linked Issues"""
    userLinkedOnly: Boolean = false
  ): gh_IssueConnection
  """A list of comments associated with the pull request."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issue comments returned from the connection."""
    orderBy: gh_IssueCommentOrder
  ): gh_IssueCommentConnection!
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PullRequestCommitConnection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The number of deletions in this pull request."""
  deletions: Int!
  """The actor who edited this pull request's body."""
  editor: gh_Actor
  """Lists the files changed within this pull request."""
  files(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PullRequestChangedFileConnection
  """Identifies the head Ref associated with the pull request."""
  headRef: gh_Ref
  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!
  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: gh_GitObjectID!
  """The repository associated with this pull request's head Ref."""
  headRepository: gh_Repository
  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: gh_RepositoryOwner
  """The hovercard information for this issue"""
  hovercard(
    """Whether or not to include notification contexts"""
    includeNotificationContexts: Boolean = true
  ): gh_Hovercard!
  """The Node ID of the PullRequest object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """The head and base repositories are different."""
  isCrossRepository: Boolean!
  """Identifies if the pull request is a draft."""
  isDraft: Boolean!
  """Is this pull request read by the viewer"""
  isReadByViewer: Boolean
  """A list of labels associated with the object."""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for labels returned from the connection."""
    orderBy: gh_LabelOrder = {direction: ASC, field: CREATED_AT}
  ): gh_LabelConnection
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """A list of latest reviews per user associated with the pull request."""
  latestOpinionatedReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Only return reviews from user who have write access to the repository"""
    writersOnly: Boolean = false
  ): gh_PullRequestReviewConnection
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PullRequestReviewConnection
  """`true` if the pull request is locked"""
  locked: Boolean!
  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean!
  """The commit that was created when this pull request was merged."""
  mergeCommit: gh_Commit
  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: gh_MergeQueueEntry
  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: gh_MergeStateStatus! @preview(toggledBy: "merge-info-preview")
  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: gh_MergeableState!
  """Whether or not the pull request was merged."""
  merged: Boolean!
  """The date and time that the pull request was merged."""
  mergedAt: DateTime
  """The actor who merged the pull request."""
  mergedBy: gh_Actor
  """Identifies the milestone associated with the pull request."""
  milestone: gh_Milestone
  """Identifies the pull request number."""
  number: Int!
  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """The permalink to the pull request."""
  permalink: gh_URI!
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: gh_Commit
  """List of project cards associated with this pull request."""
  projectCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """A list of archived states to filter the cards by"""
    archivedStates: [gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectCardConnection!
  """List of project items associated with this pull request."""
  projectItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Include archived items."""
    includeArchived: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2ItemConnection!
  """Find a project by number."""
  projectV2(
    """The project number."""
    number: Int!
  ): gh_ProjectV2
  """A list of projects under the owner."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """A project to search for under the the owner."""
    query: String
  ): gh_ProjectV2Connection!
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The HTTP path for this pull request."""
  resourcePath: gh_URI!
  """The HTTP path for reverting this pull request."""
  revertResourcePath: gh_URI!
  """The HTTP URL for reverting this pull request."""
  revertUrl: gh_URI!
  """The current status of this pull request with respect to code review."""
  reviewDecision: gh_PullRequestReviewDecision
  """A list of review requests associated with the pull request."""
  reviewRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ReviewRequestConnection
  """The list of all review threads for this pull request."""
  reviewThreads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PullRequestReviewThreadConnection!
  """A list of reviews associated with the pull request."""
  reviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Filter by author of the review."""
    author: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """A list of states to filter the reviews."""
    states: [gh_PullRequestReviewState!]
  ): gh_PullRequestReviewConnection
  """Identifies the state of the pull request."""
  state: gh_PullRequestState!
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [gh_SuggestedReviewer]!
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows filtering timeline events by a `since` timestamp."""
    since: DateTime
  ): gh_PullRequestTimelineConnection! @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Filter timeline items by type."""
    itemTypes: [gh_PullRequestTimelineItemsItemType!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter timeline items by a `since` timestamp."""
    since: DateTime
    """Skips the first _n_ elements in the list."""
    skip: Int
  ): gh_PullRequestTimelineItemsConnection!
  """Identifies the pull request title."""
  title: String!
  """Identifies the pull request title rendered to HTML."""
  titleHTML: gh_HTML!
  """Returns a count of how many comments this pull request has received."""
  totalCommentsCount: Int
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this pull request."""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Whether or not the viewer can apply suggestion."""
  viewerCanApplySuggestion: Boolean!
  """Indicates if the object can be closed by the viewer."""
  viewerCanClose: Boolean!
  """Check if the viewer can restore the deleted head ref."""
  viewerCanDeleteHeadRef: Boolean!
  """Whether or not the viewer can disable auto-merge"""
  viewerCanDisableAutoMerge: Boolean!
  """Can the viewer edit files within this pull request."""
  viewerCanEditFiles: Boolean!
  """Whether or not the viewer can enable auto-merge"""
  viewerCanEnableAutoMerge: Boolean!
  """
  Indicates whether the viewer can bypass branch protections and merge the pull request immediately
  """
  viewerCanMergeAsAdmin: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Indicates if the object can be reopened by the viewer."""
  viewerCanReopen: Boolean!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  """The latest review given from the viewer."""
  viewerLatestReview: gh_PullRequestReview
  """
  The person who has requested the viewer for review on this pull request.
  """
  viewerLatestReviewRequest: gh_ReviewRequest
  """The merge body text for the viewer and method."""
  viewerMergeBodyText(
    """The merge method for the message."""
    mergeType: gh_PullRequestMergeMethod
  ): String!
  """The merge headline text for the viewer and method."""
  viewerMergeHeadlineText(
    """The merge method for the message."""
    mergeType: gh_PullRequestMergeMethod
  ): String!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum gh_PullRequestBranchUpdateMethod {
  """Update branch via merge"""
  MERGE
  """Update branch via rebase"""
  REBASE
}

"""A file changed in a pull request."""
type gh_PullRequestChangedFile {
  """The number of additions to the file."""
  additions: Int!
  """How the file was changed in this PullRequest"""
  changeType: gh_PatchStatus!
  """The number of deletions to the file."""
  deletions: Int!
  """The path of the file."""
  path: String!
  """The state of the file for the viewer."""
  viewerViewedState: gh_FileViewedState!
}

"""The connection type for PullRequestChangedFile."""
type gh_PullRequestChangedFileConnection {
  """A list of edges."""
  edges: [gh_PullRequestChangedFileEdge]
  """A list of nodes."""
  nodes: [gh_PullRequestChangedFile]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PullRequestChangedFileEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestChangedFile
}

"""Represents a Git commit part of a pull request."""
type gh_PullRequestCommit implements gh_Node & gh_UniformResourceLocatable {
  """The Git commit object"""
  commit: gh_Commit!
  """The Node ID of the PullRequestCommit object"""
  id: ID!
  """The pull request this commit belongs to"""
  pullRequest: gh_PullRequest!
  """The HTTP path for this pull request commit"""
  resourcePath: gh_URI!
  """The HTTP URL for this pull request commit"""
  url: gh_URI!
}

"""Represents a commit comment thread part of a pull request."""
type gh_PullRequestCommitCommentThread implements gh_Node & gh_RepositoryNode {
  """The comments that exist in this thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CommitCommentConnection!
  """The commit the comments were made on."""
  commit: gh_Commit!
  """The Node ID of the PullRequestCommitCommentThread object"""
  id: ID!
  """The file the comments were made on."""
  path: String
  """The position in the diff for the commit that the comment was made on."""
  position: Int
  """The pull request this commit comment thread belongs to"""
  pullRequest: gh_PullRequest!
  """The repository associated with this node."""
  repository: gh_Repository!
}

"""The connection type for PullRequestCommit."""
type gh_PullRequestCommitConnection {
  """A list of edges."""
  edges: [gh_PullRequestCommitEdge]
  """A list of nodes."""
  nodes: [gh_PullRequestCommit]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PullRequestCommitEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestCommit
}

"""The connection type for PullRequest."""
type gh_PullRequestConnection {
  """A list of edges."""
  edges: [gh_PullRequestEdge]
  """A list of nodes."""
  nodes: [gh_PullRequest]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""This aggregates pull requests opened by a user within one repository."""
type gh_PullRequestContributionsByRepository {
  """The pull request contributions."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedPullRequestContributionConnection!
  """The repository in which the pull requests were opened."""
  repository: gh_Repository!
}

"""An edge in a connection."""
type gh_PullRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequest
}

"""
Represents available types of methods to use when merging a pull request.
"""
enum gh_PullRequestMergeMethod {
  """
  Add all commits from the head branch to the base branch with a merge commit.
  """
  MERGE
  """
  Add all commits from the head branch onto the base branch individually.
  """
  REBASE
  """
  Combine all commits from the head branch into a single commit in the base branch.
  """
  SQUASH
}

"""Ways in which lists of issues can be ordered upon return."""
input gh_PullRequestOrder {
  """The direction in which to order pull requests by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order pull requests by."""
  field: gh_PullRequestOrderField!
}

"""Properties by which pull_requests connections can be ordered."""
enum gh_PullRequestOrderField {
  """Order pull_requests by creation time"""
  CREATED_AT
  """Order pull_requests by update time"""
  UPDATED_AT
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type gh_PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!
  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!
  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!
  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!
  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input gh_PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!
  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!
  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!
  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!
  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""A review object for a given pull request."""
type gh_PullRequestReview implements gh_Comment & gh_Deletable & gh_Minimizable & gh_Node & gh_Reactable & gh_RepositoryNode & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """
  Indicates whether the author of this review has push access to the repository.
  """
  authorCanPushToRepository: Boolean!
  """Identifies the pull request review body."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body of this review rendered as plain text."""
  bodyText: String!
  """A list of review comments for the current pull request review."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PullRequestReviewCommentConnection!
  """Identifies the commit associated with this pull request review."""
  commit: gh_Commit
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the PullRequestReview object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """A list of teams that this review was made on behalf of."""
  onBehalfOf(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_TeamConnection!
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """Identifies the pull request associated with this pull request review."""
  pullRequest: gh_PullRequest!
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The repository associated with this node."""
  repository: gh_Repository!
  """The HTTP path permalink for this PullRequestReview."""
  resourcePath: gh_URI!
  """Identifies the current state of the pull request review."""
  state: gh_PullRequestReviewState!
  """Identifies when the Pull Request Review was submitted"""
  submittedAt: DateTime
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL permalink for this PullRequestReview."""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""A review comment associated with a given repository pull request."""
type gh_PullRequestReviewComment implements gh_Comment & gh_Deletable & gh_Minimizable & gh_Node & gh_Reactable & gh_RepositoryNode & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the subject of the comment."""
  authorAssociation: gh_CommentAuthorAssociation!
  """The comment body of this review comment."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The comment body of this review comment rendered as plain text."""
  bodyText: String!
  """Identifies the commit associated with the comment."""
  commit: gh_Commit
  """Identifies when the comment was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The diff hunk to which the comment applies."""
  diffHunk: String!
  """Identifies when the comment was created in a draft state."""
  draftedAt: DateTime!
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the PullRequestReviewComment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """The end line number on the file to which the comment applies"""
  line: Int
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String
  """Identifies the original commit associated with the comment."""
  originalCommit: gh_Commit
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int
  """The original line index in the diff to which the comment applies."""
  originalPosition: Int! @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")
  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int
  """Identifies when the comment body is outdated"""
  outdated: Boolean!
  """The path to which the comment applies."""
  path: String!
  """The line index in the diff to which the comment applies."""
  position: Int @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.")
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """The pull request associated with this review comment."""
  pullRequest: gh_PullRequest!
  """The pull request review associated with this review comment."""
  pullRequestReview: gh_PullRequestReview
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The comment this is a reply to."""
  replyTo: gh_PullRequestReviewComment
  """The repository associated with this node."""
  repository: gh_Repository!
  """The HTTP path permalink for this review comment."""
  resourcePath: gh_URI!
  """The start line number on the file to which the comment applies"""
  startLine: Int
  """Identifies the state of the comment."""
  state: gh_PullRequestReviewCommentState!
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: gh_PullRequestReviewThreadSubjectType!
  """Identifies when the comment was last updated."""
  updatedAt: DateTime!
  """The HTTP URL permalink for this review comment."""
  url: gh_URI!
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for PullRequestReviewComment."""
type gh_PullRequestReviewCommentConnection {
  """A list of edges."""
  edges: [gh_PullRequestReviewCommentEdge]
  """A list of nodes."""
  nodes: [gh_PullRequestReviewComment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PullRequestReviewCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestReviewComment
}

"""The possible states of a pull request review comment."""
enum gh_PullRequestReviewCommentState {
  """A comment that is part of a pending review"""
  PENDING
  """A comment that is part of a submitted review"""
  SUBMITTED
}

"""The connection type for PullRequestReview."""
type gh_PullRequestReviewConnection {
  """A list of edges."""
  edges: [gh_PullRequestReviewEdge]
  """A list of nodes."""
  nodes: [gh_PullRequestReview]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
This aggregates pull request reviews made by a user within one repository.
"""
type gh_PullRequestReviewContributionsByRepository {
  """The pull request review contributions."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for contributions returned from the connection."""
    orderBy: gh_ContributionOrder = {direction: DESC}
  ): gh_CreatedPullRequestReviewContributionConnection!
  """The repository in which the pull request reviews were made."""
  repository: gh_Repository!
}

"""The review status of a pull request."""
enum gh_PullRequestReviewDecision {
  """The pull request has received an approving review."""
  APPROVED
  """Changes have been requested on the pull request."""
  CHANGES_REQUESTED
  """A review is required before the pull request can be merged."""
  REVIEW_REQUIRED
}

"""An edge in a connection."""
type gh_PullRequestReviewEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestReview
}

"""The possible events to perform on a pull request review."""
enum gh_PullRequestReviewEvent {
  """Submit feedback and approve merging these changes."""
  APPROVE
  """Submit general feedback without explicit approval."""
  COMMENT
  """Dismiss review so it now longer effects merging."""
  DISMISS
  """Submit feedback that must be addressed before merging."""
  REQUEST_CHANGES
}

"""The possible states of a pull request review."""
enum gh_PullRequestReviewState {
  """A review allowing the pull request to merge."""
  APPROVED
  """A review blocking the pull request from merging."""
  CHANGES_REQUESTED
  """An informational review."""
  COMMENTED
  """A review that has been dismissed."""
  DISMISSED
  """A review that has not yet been submitted."""
  PENDING
}

"""A threaded list of comments for a given pull request."""
type gh_PullRequestReviewThread implements gh_Node {
  """A list of pull request comments associated with the thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Skips the first _n_ elements in the list."""
    skip: Int
  ): gh_PullRequestReviewCommentConnection!
  """The side of the diff on which this thread was placed."""
  diffSide: gh_DiffSide!
  """The Node ID of the PullRequestReviewThread object"""
  id: ID!
  """Whether or not the thread has been collapsed (resolved)"""
  isCollapsed: Boolean!
  """Indicates whether this thread was outdated by newer changes."""
  isOutdated: Boolean!
  """Whether this thread has been resolved"""
  isResolved: Boolean!
  """The line in the file to which this thread refers"""
  line: Int
  """The original line in the file to which this thread refers."""
  originalLine: Int
  """
  The original start line in the file to which this thread refers (multi-line only).
  """
  originalStartLine: Int
  """Identifies the file path of this thread."""
  path: String!
  """Identifies the pull request associated with this thread."""
  pullRequest: gh_PullRequest!
  """Identifies the repository associated with this thread."""
  repository: gh_Repository!
  """The user who resolved this thread"""
  resolvedBy: gh_User
  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: gh_DiffSide
  """
  The start line in the file to which this thread refers (multi-line only)
  """
  startLine: Int
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: gh_PullRequestReviewThreadSubjectType!
  """Indicates whether the current viewer can reply to this thread."""
  viewerCanReply: Boolean!
  """Whether or not the viewer can resolve this thread"""
  viewerCanResolve: Boolean!
  """Whether or not the viewer can unresolve this thread"""
  viewerCanUnresolve: Boolean!
}

"""Review comment threads for a pull request review."""
type gh_PullRequestReviewThreadConnection {
  """A list of edges."""
  edges: [gh_PullRequestReviewThreadEdge]
  """A list of nodes."""
  nodes: [gh_PullRequestReviewThread]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PullRequestReviewThreadEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestReviewThread
}

"""The possible subject types of a pull request review comment."""
enum gh_PullRequestReviewThreadSubjectType {
  """A comment that has been made against the file of a pull request"""
  FILE
  """A comment that has been made against the line of a pull request"""
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type gh_PullRequestRevisionMarker {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The last commit the viewer has seen."""
  lastSeenCommit: gh_Commit!
  """The pull request to which the marker belongs."""
  pullRequest: gh_PullRequest!
}

"""The possible states of a pull request."""
enum gh_PullRequestState {
  """A pull request that has been closed without being merged."""
  CLOSED
  """A pull request that has been closed by being merged."""
  MERGED
  """A pull request that is still open."""
  OPEN
}

"""A repository pull request template."""
type gh_PullRequestTemplate {
  """The body of the template"""
  body: String
  """The filename of the template"""
  filename: String
  """The repository the template belongs to"""
  repository: gh_Repository!
}

"""A threaded list of comments for a given pull request."""
type gh_PullRequestThread implements gh_Node {
  """A list of pull request comments associated with the thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Skips the first _n_ elements in the list."""
    skip: Int
  ): gh_PullRequestReviewCommentConnection!
  """The side of the diff on which this thread was placed."""
  diffSide: gh_DiffSide!
  """The Node ID of the PullRequestThread object"""
  id: ID!
  """Whether or not the thread has been collapsed (resolved)"""
  isCollapsed: Boolean!
  """Indicates whether this thread was outdated by newer changes."""
  isOutdated: Boolean!
  """Whether this thread has been resolved"""
  isResolved: Boolean!
  """The line in the file to which this thread refers"""
  line: Int
  """Identifies the file path of this thread."""
  path: String!
  """Identifies the pull request associated with this thread."""
  pullRequest: gh_PullRequest!
  """Identifies the repository associated with this thread."""
  repository: gh_Repository!
  """The user who resolved this thread"""
  resolvedBy: gh_User
  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: gh_DiffSide
  """The line of the first file diff in the thread."""
  startLine: Int
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: gh_PullRequestReviewThreadSubjectType!
  """Indicates whether the current viewer can reply to this thread."""
  viewerCanReply: Boolean!
  """Whether or not the viewer can resolve this thread"""
  viewerCanResolve: Boolean!
  """Whether or not the viewer can unresolve this thread"""
  viewerCanUnresolve: Boolean!
}

"""The connection type for PullRequestTimelineItem."""
type gh_PullRequestTimelineConnection {
  """A list of edges."""
  edges: [gh_PullRequestTimelineItemEdge]
  """A list of nodes."""
  nodes: [gh_PullRequestTimelineItem]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An item in a pull request timeline"""
union gh_PullRequestTimelineItem = gh_AssignedEvent | gh_BaseRefDeletedEvent | gh_BaseRefForcePushedEvent | gh_ClosedEvent | gh_Commit | gh_CommitCommentThread | gh_CrossReferencedEvent | gh_DemilestonedEvent | gh_DeployedEvent | gh_DeploymentEnvironmentChangedEvent | gh_HeadRefDeletedEvent | gh_HeadRefForcePushedEvent | gh_HeadRefRestoredEvent | gh_IssueComment | gh_LabeledEvent | gh_LockedEvent | gh_MergedEvent | gh_MilestonedEvent | gh_PullRequestReview | gh_PullRequestReviewComment | gh_PullRequestReviewThread | gh_ReferencedEvent | gh_RenamedTitleEvent | gh_ReopenedEvent | gh_ReviewDismissedEvent | gh_ReviewRequestRemovedEvent | gh_ReviewRequestedEvent | gh_SubscribedEvent | gh_UnassignedEvent | gh_UnlabeledEvent | gh_UnlockedEvent | gh_UnsubscribedEvent | gh_UserBlockedEvent

"""An edge in a connection."""
type gh_PullRequestTimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestTimelineItem
}

"""An item in a pull request timeline"""
union gh_PullRequestTimelineItems = gh_AddedToMergeQueueEvent | gh_AddedToProjectEvent | gh_AssignedEvent | gh_AutoMergeDisabledEvent | gh_AutoMergeEnabledEvent | gh_AutoRebaseEnabledEvent | gh_AutoSquashEnabledEvent | gh_AutomaticBaseChangeFailedEvent | gh_AutomaticBaseChangeSucceededEvent | gh_BaseRefChangedEvent | gh_BaseRefDeletedEvent | gh_BaseRefForcePushedEvent | gh_ClosedEvent | gh_CommentDeletedEvent | gh_ConnectedEvent | gh_ConvertToDraftEvent | gh_ConvertedNoteToIssueEvent | gh_ConvertedToDiscussionEvent | gh_CrossReferencedEvent | gh_DemilestonedEvent | gh_DeployedEvent | gh_DeploymentEnvironmentChangedEvent | gh_DisconnectedEvent | gh_HeadRefDeletedEvent | gh_HeadRefForcePushedEvent | gh_HeadRefRestoredEvent | gh_IssueComment | gh_LabeledEvent | gh_LockedEvent | gh_MarkedAsDuplicateEvent | gh_MentionedEvent | gh_MergedEvent | gh_MilestonedEvent | gh_MovedColumnsInProjectEvent | gh_PinnedEvent | gh_PullRequestCommit | gh_PullRequestCommitCommentThread | gh_PullRequestReview | gh_PullRequestReviewThread | gh_PullRequestRevisionMarker | gh_ReadyForReviewEvent | gh_ReferencedEvent | gh_RemovedFromMergeQueueEvent | gh_RemovedFromProjectEvent | gh_RenamedTitleEvent | gh_ReopenedEvent | gh_ReviewDismissedEvent | gh_ReviewRequestRemovedEvent | gh_ReviewRequestedEvent | gh_SubscribedEvent | gh_TransferredEvent | gh_UnassignedEvent | gh_UnlabeledEvent | gh_UnlockedEvent | gh_UnmarkedAsDuplicateEvent | gh_UnpinnedEvent | gh_UnsubscribedEvent | gh_UserBlockedEvent

"""The connection type for PullRequestTimelineItems."""
type gh_PullRequestTimelineItemsConnection {
  """A list of edges."""
  edges: [gh_PullRequestTimelineItemsEdge]
  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int!
  """A list of nodes."""
  nodes: [gh_PullRequestTimelineItems]
  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int!
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """Identifies the date and time when the timeline was last updated."""
  updatedAt: DateTime!
}

"""An edge in a connection."""
type gh_PullRequestTimelineItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PullRequestTimelineItems
}

"""The possible item types found in a timeline."""
enum gh_PullRequestTimelineItemsItemType {
  """Represents an 'added_to_merge_queue' event on a given pull request."""
  ADDED_TO_MERGE_QUEUE_EVENT
  """
  Represents a 'added_to_project' event on a given issue or pull request.
  """
  ADDED_TO_PROJECT_EVENT
  """Represents an 'assigned' event on any assignable object."""
  ASSIGNED_EVENT
  """
  Represents a 'automatic_base_change_failed' event on a given pull request.
  """
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT
  """
  Represents a 'automatic_base_change_succeeded' event on a given pull request.
  """
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT
  """Represents a 'auto_merge_disabled' event on a given pull request."""
  AUTO_MERGE_DISABLED_EVENT
  """Represents a 'auto_merge_enabled' event on a given pull request."""
  AUTO_MERGE_ENABLED_EVENT
  """Represents a 'auto_rebase_enabled' event on a given pull request."""
  AUTO_REBASE_ENABLED_EVENT
  """Represents a 'auto_squash_enabled' event on a given pull request."""
  AUTO_SQUASH_ENABLED_EVENT
  """
  Represents a 'base_ref_changed' event on a given issue or pull request.
  """
  BASE_REF_CHANGED_EVENT
  """Represents a 'base_ref_deleted' event on a given pull request."""
  BASE_REF_DELETED_EVENT
  """Represents a 'base_ref_force_pushed' event on a given pull request."""
  BASE_REF_FORCE_PUSHED_EVENT
  """Represents a 'closed' event on any `Closable`."""
  CLOSED_EVENT
  """Represents a 'comment_deleted' event on a given issue or pull request."""
  COMMENT_DELETED_EVENT
  """Represents a 'connected' event on a given issue or pull request."""
  CONNECTED_EVENT
  """
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  """
  CONVERTED_NOTE_TO_ISSUE_EVENT
  """Represents a 'converted_to_discussion' event on a given issue."""
  CONVERTED_TO_DISCUSSION_EVENT
  """Represents a 'convert_to_draft' event on a given pull request."""
  CONVERT_TO_DRAFT_EVENT
  """Represents a mention made by one issue or pull request to another."""
  CROSS_REFERENCED_EVENT
  """Represents a 'demilestoned' event on a given issue or pull request."""
  DEMILESTONED_EVENT
  """Represents a 'deployed' event on a given pull request."""
  DEPLOYED_EVENT
  """
  Represents a 'deployment_environment_changed' event on a given pull request.
  """
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
  """Represents a 'disconnected' event on a given issue or pull request."""
  DISCONNECTED_EVENT
  """Represents a 'head_ref_deleted' event on a given pull request."""
  HEAD_REF_DELETED_EVENT
  """Represents a 'head_ref_force_pushed' event on a given pull request."""
  HEAD_REF_FORCE_PUSHED_EVENT
  """Represents a 'head_ref_restored' event on a given pull request."""
  HEAD_REF_RESTORED_EVENT
  """Represents a comment on an Issue."""
  ISSUE_COMMENT
  """Represents a 'labeled' event on a given issue or pull request."""
  LABELED_EVENT
  """Represents a 'locked' event on a given issue or pull request."""
  LOCKED_EVENT
  """
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  """
  MARKED_AS_DUPLICATE_EVENT
  """Represents a 'mentioned' event on a given issue or pull request."""
  MENTIONED_EVENT
  """Represents a 'merged' event on a given pull request."""
  MERGED_EVENT
  """Represents a 'milestoned' event on a given issue or pull request."""
  MILESTONED_EVENT
  """
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  """
  MOVED_COLUMNS_IN_PROJECT_EVENT
  """Represents a 'pinned' event on a given issue or pull request."""
  PINNED_EVENT
  """Represents a Git commit part of a pull request."""
  PULL_REQUEST_COMMIT
  """Represents a commit comment thread part of a pull request."""
  PULL_REQUEST_COMMIT_COMMENT_THREAD
  """A review object for a given pull request."""
  PULL_REQUEST_REVIEW
  """A threaded list of comments for a given pull request."""
  PULL_REQUEST_REVIEW_THREAD
  """
  Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
  """
  PULL_REQUEST_REVISION_MARKER
  """Represents a 'ready_for_review' event on a given pull request."""
  READY_FOR_REVIEW_EVENT
  """Represents a 'referenced' event on a given `ReferencedSubject`."""
  REFERENCED_EVENT
  """Represents a 'removed_from_merge_queue' event on a given pull request."""
  REMOVED_FROM_MERGE_QUEUE_EVENT
  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT
  """Represents a 'renamed' event on a given issue or pull request"""
  RENAMED_TITLE_EVENT
  """Represents a 'reopened' event on any `Closable`."""
  REOPENED_EVENT
  """
  Represents a 'review_dismissed' event on a given issue or pull request.
  """
  REVIEW_DISMISSED_EVENT
  """Represents an 'review_requested' event on a given pull request."""
  REVIEW_REQUESTED_EVENT
  """Represents an 'review_request_removed' event on a given pull request."""
  REVIEW_REQUEST_REMOVED_EVENT
  """Represents a 'subscribed' event on a given `Subscribable`."""
  SUBSCRIBED_EVENT
  """Represents a 'transferred' event on a given issue or pull request."""
  TRANSFERRED_EVENT
  """Represents an 'unassigned' event on any assignable object."""
  UNASSIGNED_EVENT
  """Represents an 'unlabeled' event on a given issue or pull request."""
  UNLABELED_EVENT
  """Represents an 'unlocked' event on a given issue or pull request."""
  UNLOCKED_EVENT
  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT
  """Represents an 'unpinned' event on a given issue or pull request."""
  UNPINNED_EVENT
  """Represents an 'unsubscribed' event on a given `Subscribable`."""
  UNSUBSCRIBED_EVENT
  """Represents a 'user_blocked' event on a given user."""
  USER_BLOCKED_EVENT
}

"""The possible target states when updating a pull request."""
enum gh_PullRequestUpdateState {
  """A pull request that has been closed without being merged."""
  CLOSED
  """A pull request that is still open."""
  OPEN
}

"""A Git push."""
type gh_Push implements gh_Node {
  """The Node ID of the Push object"""
  id: ID!
  """The SHA after the push"""
  nextSha: gh_GitObjectID
  """The permalink for this push."""
  permalink: gh_URI!
  """The SHA before the push"""
  previousSha: gh_GitObjectID
  """The actor who pushed"""
  pusher: gh_Actor!
  """The repository that was pushed to"""
  repository: gh_Repository!
}

"""
A team, user, or app who has the ability to push to a protected branch.
"""
type gh_PushAllowance implements gh_Node {
  """The actor that can push."""
  actor: gh_PushAllowanceActor
  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: gh_BranchProtectionRule
  """The Node ID of the PushAllowance object"""
  id: ID!
}

"""Types that can be an actor."""
union gh_PushAllowanceActor = gh_App | gh_Team | gh_User

"""The connection type for PushAllowance."""
type gh_PushAllowanceConnection {
  """A list of edges."""
  edges: [gh_PushAllowanceEdge]
  """A list of nodes."""
  nodes: [gh_PushAllowance]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_PushAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_PushAllowance
}

"""Represents the client's rate limit."""
type gh_RateLimit {
  """The point cost for the current query counting against the rate limit."""
  cost: Int!
  """
  The maximum number of points the client is permitted to consume in a 60 minute window.
  """
  limit: Int!
  """The maximum number of nodes this query may return"""
  nodeCount: Int!
  """The number of points remaining in the current rate limit window."""
  remaining: Int!
  """
  The time at which the current rate limit window resets in UTC epoch seconds.
  """
  resetAt: DateTime!
  """The number of points used in the current rate limit window."""
  used: Int!
}

"""Represents a subject that can be reacted on."""
interface gh_Reactable {
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the Reactable object"""
  id: ID!
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
}

"""The connection type for User."""
type gh_ReactingUserConnection {
  """A list of edges."""
  edges: [gh_ReactingUserEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user that's made a reaction."""
type gh_ReactingUserEdge {
  """A cursor for use in pagination."""
  cursor: String!
  node: gh_User!
  """The moment when the user made the reaction."""
  reactedAt: DateTime!
}

"""An emoji reaction to a particular piece of content."""
type gh_Reaction implements gh_Node {
  """Identifies the emoji reaction."""
  content: gh_ReactionContent!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the Reaction object"""
  id: ID!
  """The reactable piece of content"""
  reactable: gh_Reactable!
  """Identifies the user who created this reaction."""
  user: gh_User
}

"""A list of reactions that have been left on the subject."""
type gh_ReactionConnection {
  """A list of edges."""
  edges: [gh_ReactionEdge]
  """A list of nodes."""
  nodes: [gh_Reaction]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""Emojis that can be attached to Issues, Pull Requests and Comments."""
enum gh_ReactionContent {
  """Represents the `:confused:` emoji."""
  CONFUSED
  """Represents the `:eyes:` emoji."""
  EYES
  """Represents the `:heart:` emoji."""
  HEART
  """Represents the `:hooray:` emoji."""
  HOORAY
  """Represents the `:laugh:` emoji."""
  LAUGH
  """Represents the `:rocket:` emoji."""
  ROCKET
  """Represents the `:-1:` emoji."""
  THUMBS_DOWN
  """Represents the `:+1:` emoji."""
  THUMBS_UP
}

"""An edge in a connection."""
type gh_ReactionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Reaction
}

"""A group of emoji reactions to a particular piece of content."""
type gh_ReactionGroup {
  """Identifies the emoji reaction."""
  content: gh_ReactionContent!
  """Identifies when the reaction was created."""
  createdAt: DateTime
  """
  Reactors to the reaction subject with the emotion represented by this reaction group.
  """
  reactors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ReactorConnection!
  """The subject that was reacted to."""
  subject: gh_Reactable!
  """
  Users who have reacted to the reaction subject with the emotion represented by this reaction group
  """
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ReactingUserConnection! @deprecated(reason: "Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.")
  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""Ways in which lists of reactions can be ordered upon return."""
input gh_ReactionOrder {
  """The direction in which to order reactions by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order reactions by."""
  field: gh_ReactionOrderField!
}

"""A list of fields that reactions can be ordered by."""
enum gh_ReactionOrderField {
  """Allows ordering a list of reactions by when they were created."""
  CREATED_AT
}

"""Types that can be assigned to reactions."""
union gh_Reactor = gh_Bot | gh_Mannequin | gh_Organization | gh_User

"""The connection type for Reactor."""
type gh_ReactorConnection {
  """A list of edges."""
  edges: [gh_ReactorEdge]
  """A list of nodes."""
  nodes: [gh_Reactor]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents an author of a reaction."""
type gh_ReactorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The author of the reaction."""
  node: gh_Reactor!
  """The moment when the user made the reaction."""
  reactedAt: DateTime!
}

"""Represents a 'ready_for_review' event on a given pull request."""
type gh_ReadyForReviewEvent implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ReadyForReviewEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """The HTTP path for this ready for review event."""
  resourcePath: gh_URI!
  """The HTTP URL for this ready for review event."""
  url: gh_URI!
}

"""Represents a Git reference."""
type gh_Ref implements gh_Node {
  """A list of pull requests with this ref as the head ref."""
  associatedPullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """The base ref name to filter the pull requests by."""
    baseRefName: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """The head ref name to filter the pull requests by."""
    headRefName: String
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the pull requests by."""
    states: [gh_PullRequestState!]
  ): gh_PullRequestConnection!
  """Branch protection rules for this ref"""
  branchProtectionRule: gh_BranchProtectionRule
  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """The head ref to compare against."""
    headRef: String!
  ): gh_Comparison
  """The Node ID of the Ref object"""
  id: ID!
  """The ref name."""
  name: String!
  """The ref's prefix, such as `refs/heads/` or `refs/tags/`."""
  prefix: String!
  """Branch protection rules that are viewable by non-admins"""
  refUpdateRule: gh_RefUpdateRule
  """The repository the ref belongs to."""
  repository: gh_Repository!
  """The object the ref points to. Returns null when object does not exist."""
  target: gh_GitObject
}

"""The connection type for Ref."""
type gh_RefConnection {
  """A list of edges."""
  edges: [gh_RefEdge]
  """A list of nodes."""
  nodes: [gh_Ref]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RefEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Ref
}

"""Parameters to be used for the ref_name condition"""
type gh_RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!
  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""Parameters to be used for the ref_name condition"""
input gh_RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!
  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""Ways in which lists of git refs can be ordered upon return."""
input gh_RefOrder {
  """The direction in which to order refs by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order refs by."""
  field: gh_RefOrderField!
}

"""Properties by which ref connections can be ordered."""
enum gh_RefOrderField {
  """Order refs by their alphanumeric name"""
  ALPHABETICAL
  """Order refs by underlying commit date if the ref prefix is refs/tags/"""
  TAG_COMMIT_DATE
}

"""A ref update"""
input gh_RefUpdate @preview(toggledBy: "update-refs-preview") {
  """The value this ref should be updated to."""
  afterOid: gh_GitObjectID!
  """The value this ref needs to point to before the update."""
  beforeOid: gh_GitObjectID
  """Force a non fast-forward update."""
  force: Boolean = false
  """
  The fully qualified name of the ref to be update. For example `refs/heads/branch-name`
  """
  name: gh_GitRefname!
}

"""Branch protection rules that are enforced on the viewer."""
type gh_RefUpdateRule {
  """Can this branch be deleted."""
  allowsDeletions: Boolean!
  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean!
  """Can matching branches be created."""
  blocksCreations: Boolean!
  """Identifies the protection rule pattern."""
  pattern: String!
  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int
  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]
  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean!
  """Are conversations required to be resolved before merging."""
  requiresConversationResolution: Boolean!
  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean!
  """Are commits required to be signed."""
  requiresSignatures: Boolean!
  """Is the viewer allowed to dismiss reviews."""
  viewerAllowedToDismissReviews: Boolean!
  """Can the viewer push to the branch"""
  viewerCanPush: Boolean!
}

"""Represents a 'referenced' event on a given `ReferencedSubject`."""
type gh_ReferencedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the commit associated with the 'referenced' event."""
  commit: gh_Commit
  """Identifies the repository associated with the 'referenced' event."""
  commitRepository: gh_Repository!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ReferencedEvent object"""
  id: ID!
  """Reference originated in a different repository."""
  isCrossRepository: Boolean!
  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  isDirectReference: Boolean!
  """Object referenced by event."""
  subject: gh_ReferencedSubject!
}

"""Any referencable object"""
union gh_ReferencedSubject = gh_Issue | gh_PullRequest

"""
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
input gh_RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise on which to set an identity provider."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
}

"""
Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
type gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The identity provider for the enterprise."""
  identityProvider: gh_EnterpriseIdentityProvider
}

"""Autogenerated input type of RegenerateVerifiableDomainToken"""
input gh_RegenerateVerifiableDomainTokenInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the verifiable domain to regenerate the verification token of.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""Autogenerated return type of RegenerateVerifiableDomainToken"""
type gh_RegenerateVerifiableDomainTokenPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The verification token that was generated."""
  verificationToken: String
}

"""Autogenerated input type of RejectDeployments"""
input gh_RejectDeploymentsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Optional comment for rejecting deployments"""
  comment: String = ""
  """The ids of environments to reject deployments"""
  environmentIds: [ID!]!
  """The node ID of the workflow run containing the pending deployments."""
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""Autogenerated return type of RejectDeployments"""
type gh_RejectDeploymentsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The affected deployments."""
  deployments: [gh_Deployment!]
}

"""A release contains the content for a release."""
type gh_Release implements gh_Node & gh_Reactable & gh_UniformResourceLocatable {
  """The author of the release"""
  author: gh_User
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The description of the release."""
  description: String
  """The description of this release rendered to HTML."""
  descriptionHTML: gh_HTML
  """The Node ID of the Release object"""
  id: ID!
  """Whether or not the release is a draft"""
  isDraft: Boolean!
  """Whether or not the release is the latest releast"""
  isLatest: Boolean!
  """Whether or not the release is a prerelease"""
  isPrerelease: Boolean!
  """A list of users mentioned in the release description"""
  mentions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection
  """The title of the release."""
  name: String
  """Identifies the date and time when the release was created."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """List of releases assets which are dependent on this release."""
  releaseAssets(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """A list of names to filter the assets by."""
    name: String
  ): gh_ReleaseAssetConnection!
  """The repository that the release belongs to."""
  repository: gh_Repository!
  """The HTTP path for this issue"""
  resourcePath: gh_URI!
  """
  A description of the release, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): gh_HTML
  """The Git tag the release points to"""
  tag: gh_Ref
  """The tag commit for this release."""
  tagCommit: gh_Commit
  """The name of the release's Git tag"""
  tagName: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this issue"""
  url: gh_URI!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
}

"""A release asset contains the content for a release asset."""
type gh_ReleaseAsset implements gh_Node {
  """The asset's content-type"""
  contentType: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The number of times this asset was downloaded"""
  downloadCount: Int!
  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: gh_URI!
  """The Node ID of the ReleaseAsset object"""
  id: ID!
  """Identifies the title of the release asset."""
  name: String!
  """Release that the asset is associated with"""
  release: gh_Release
  """The size (in bytes) of the asset"""
  size: Int!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The user that performed the upload"""
  uploadedBy: gh_User!
  """Identifies the URL of the release asset."""
  url: gh_URI!
}

"""The connection type for ReleaseAsset."""
type gh_ReleaseAssetConnection {
  """A list of edges."""
  edges: [gh_ReleaseAssetEdge]
  """A list of nodes."""
  nodes: [gh_ReleaseAsset]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ReleaseAssetEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ReleaseAsset
}

"""The connection type for Release."""
type gh_ReleaseConnection {
  """A list of edges."""
  edges: [gh_ReleaseEdge]
  """A list of nodes."""
  nodes: [gh_Release]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Release
}

"""Ways in which lists of releases can be ordered upon return."""
input gh_ReleaseOrder {
  """The direction in which to order releases by the specified field."""
  direction: gh_OrderDirection!
  """The field in which to order releases by."""
  field: gh_ReleaseOrderField!
}

"""Properties by which release connections can be ordered."""
enum gh_ReleaseOrderField {
  """Order releases by creation time"""
  CREATED_AT
  """Order releases alphabetically by name"""
  NAME
}

"""Autogenerated input type of RemoveAssigneesFromAssignable"""
input gh_RemoveAssigneesFromAssignableInput {
  """The id of the assignable object to remove assignees from."""
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")
  """The id of users to remove as assignees."""
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveAssigneesFromAssignable"""
type gh_RemoveAssigneesFromAssignablePayload {
  """The item that was unassigned."""
  assignable: gh_Assignable
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of RemoveEnterpriseAdmin"""
input gh_RemoveEnterpriseAdminInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Enterprise ID from which to remove the administrator."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of the user to remove as an administrator."""
  login: String!
}

"""Autogenerated return type of RemoveEnterpriseAdmin"""
type gh_RemoveEnterpriseAdminPayload {
  """The user who was removed as an administrator."""
  admin: gh_User
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated enterprise."""
  enterprise: gh_Enterprise
  """A message confirming the result of removing an administrator."""
  message: String
  """The viewer performing the mutation."""
  viewer: gh_User
}

"""Autogenerated input type of RemoveEnterpriseIdentityProvider"""
input gh_RemoveEnterpriseIdentityProviderInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise from which to remove the identity provider."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
}

"""Autogenerated return type of RemoveEnterpriseIdentityProvider"""
type gh_RemoveEnterpriseIdentityProviderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The identity provider that was removed from the enterprise."""
  identityProvider: gh_EnterpriseIdentityProvider
}

"""Autogenerated input type of RemoveEnterpriseMember"""
input gh_RemoveEnterpriseMemberInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise from which the user should be removed."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The ID of the user to remove from the enterprise."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""Autogenerated return type of RemoveEnterpriseMember"""
type gh_RemoveEnterpriseMemberPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated enterprise."""
  enterprise: gh_Enterprise
  """The user that was removed from the enterprise."""
  user: gh_User
  """The viewer performing the mutation."""
  viewer: gh_User
}

"""Autogenerated input type of RemoveEnterpriseOrganization"""
input gh_RemoveEnterpriseOrganizationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise from which the organization should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The ID of the organization to remove from the enterprise."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of RemoveEnterpriseOrganization"""
type gh_RemoveEnterpriseOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated enterprise."""
  enterprise: gh_Enterprise
  """The organization that was removed from the enterprise."""
  organization: gh_Organization
  """The viewer performing the mutation."""
  viewer: gh_User
}

"""Autogenerated input type of RemoveEnterpriseSupportEntitlement"""
input gh_RemoveEnterpriseSupportEntitlementInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of a member who will lose the support entitlement."""
  login: String!
}

"""Autogenerated return type of RemoveEnterpriseSupportEntitlement"""
type gh_RemoveEnterpriseSupportEntitlementPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A message confirming the result of removing the support entitlement."""
  message: String
}

"""Autogenerated input type of RemoveLabelsFromLabelable"""
input gh_RemoveLabelsFromLabelableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ids of labels to remove."""
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])
  """The id of the Labelable to remove labels from."""
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""Autogenerated return type of RemoveLabelsFromLabelable"""
type gh_RemoveLabelsFromLabelablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Labelable the labels were removed from."""
  labelable: gh_Labelable
}

"""Autogenerated input type of RemoveOutsideCollaborator"""
input gh_RemoveOutsideCollaboratorInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the organization to remove the outside collaborator from."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  """The ID of the outside collaborator to remove."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""Autogenerated return type of RemoveOutsideCollaborator"""
type gh_RemoveOutsideCollaboratorPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The user that was removed as an outside collaborator."""
  removedUser: gh_User
}

"""Autogenerated input type of RemoveReaction"""
input gh_RemoveReactionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of the emoji reaction to remove."""
  content: gh_ReactionContent!
  """The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: ["CommitComment", "Discussion", "DiscussionComment", "Issue", "IssueComment", "PullRequest", "PullRequestReview", "PullRequestReviewComment", "Release", "TeamDiscussion", "TeamDiscussionComment"], abstractType: "Reactable")
}

"""Autogenerated return type of RemoveReaction"""
type gh_RemoveReactionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The reaction object."""
  reaction: gh_Reaction
  """The reaction groups for the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """The reactable subject."""
  subject: gh_Reactable
}

"""Autogenerated input type of RemoveStar"""
input gh_RemoveStarInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Starrable ID to unstar."""
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""Autogenerated return type of RemoveStar"""
type gh_RemoveStarPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The starrable."""
  starrable: gh_Starrable
}

"""Autogenerated input type of RemoveUpvote"""
input gh_RemoveUpvoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion or comment to remove upvote."""
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""Autogenerated return type of RemoveUpvote"""
type gh_RemoveUpvotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The votable subject."""
  subject: gh_Votable
}

"""Represents a 'removed_from_merge_queue' event on a given pull request."""
type gh_RemovedFromMergeQueueEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: gh_Commit
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The user who removed this Pull Request from the merge queue"""
  enqueuer: gh_User
  """The Node ID of the RemovedFromMergeQueueEvent object"""
  id: ID!
  """The merge queue where this pull request was removed from."""
  mergeQueue: gh_MergeQueue
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest
  """The reason this pull request was removed from the queue."""
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type gh_RemovedFromProjectEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the RemovedFromProjectEvent object"""
  id: ID!
  """Project referenced by event."""
  project: gh_Project @preview(toggledBy: "starfox-preview")
  """Column name referenced by this project event."""
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""Represents a 'renamed' event on a given issue or pull request"""
type gh_RenamedTitleEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the current title of the issue or pull request."""
  currentTitle: String!
  """The Node ID of the RenamedTitleEvent object"""
  id: ID!
  """Identifies the previous title of the issue or pull request."""
  previousTitle: String!
  """Subject that was renamed."""
  subject: gh_RenamedTitleSubject!
}

"""An object which has a renamable title"""
union gh_RenamedTitleSubject = gh_Issue | gh_PullRequest

"""Autogenerated input type of ReopenDiscussion"""
input gh_ReopenDiscussionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the discussion to be reopened."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""Autogenerated return type of ReopenDiscussion"""
type gh_ReopenDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion that was reopened."""
  discussion: gh_Discussion
}

"""Autogenerated input type of ReopenIssue"""
input gh_ReopenIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the issue to be opened."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""Autogenerated return type of ReopenIssue"""
type gh_ReopenIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue that was opened."""
  issue: gh_Issue
}

"""Autogenerated input type of ReopenPullRequest"""
input gh_ReopenPullRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the pull request to be reopened."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of ReopenPullRequest"""
type gh_ReopenPullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that was reopened."""
  pullRequest: gh_PullRequest
}

"""Represents a 'reopened' event on any `Closable`."""
type gh_ReopenedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Object that was reopened."""
  closable: gh_Closable!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ReopenedEvent object"""
  id: ID!
  """The reason the issue state was changed to open."""
  stateReason: gh_IssueStateReason
}

"""Audit log entry for a repo.access event."""
type gh_RepoAccessAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoAccessAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """The visibility of the repository"""
  visibility: gh_RepoAccessAuditEntryVisibility
}

"""The privacy of a repository"""
enum gh_RepoAccessAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.add_member event."""
type gh_RepoAddMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoAddMemberAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """The visibility of the repository"""
  visibility: gh_RepoAddMemberAuditEntryVisibility
}

"""The privacy of a repository"""
enum gh_RepoAddMemberAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.add_topic event."""
type gh_RepoAddTopicAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData & gh_TopicAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoAddTopicAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The name of the topic added to the repository"""
  topic: gh_Topic
  """The name of the topic added to the repository"""
  topicName: String
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.archived event."""
type gh_RepoArchivedAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoArchivedAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """The visibility of the repository"""
  visibility: gh_RepoArchivedAuditEntryVisibility
}

"""The privacy of a repository"""
enum gh_RepoArchivedAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.change_merge_setting event."""
type gh_RepoChangeMergeSettingAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoChangeMergeSettingAuditEntry object"""
  id: ID!
  """
  Whether the change was to enable (true) or disable (false) the merge type
  """
  isEnabled: Boolean
  """The merge method affected by the change"""
  mergeType: gh_RepoChangeMergeSettingAuditEntryMergeType
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The merge options available for pull requests to this repository."""
enum gh_RepoChangeMergeSettingAuditEntryMergeType {
  """The pull request is added to the base branch in a merge commit."""
  MERGE
  """
  Commits from the pull request are added onto the base branch individually without a merge commit.
  """
  REBASE
  """
  The pull request's commits are squashed into a single commit before they are merged to the base branch.
  """
  SQUASH
}

"""Audit log entry for a repo.config.disable_anonymous_git_access event."""
type gh_RepoConfigDisableAnonymousGitAccessAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.disable_collaborators_only event."""
type gh_RepoConfigDisableCollaboratorsOnlyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.disable_contributors_only event."""
type gh_RepoConfigDisableContributorsOnlyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.disable_sockpuppet_disallowed event."""
type gh_RepoConfigDisableSockpuppetDisallowedAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.enable_anonymous_git_access event."""
type gh_RepoConfigEnableAnonymousGitAccessAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.enable_collaborators_only event."""
type gh_RepoConfigEnableCollaboratorsOnlyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.enable_contributors_only event."""
type gh_RepoConfigEnableContributorsOnlyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.enable_sockpuppet_disallowed event."""
type gh_RepoConfigEnableSockpuppetDisallowedAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.lock_anonymous_git_access event."""
type gh_RepoConfigLockAnonymousGitAccessAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.config.unlock_anonymous_git_access event."""
type gh_RepoConfigUnlockAnonymousGitAccessAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repo.create event."""
type gh_RepoCreateAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The name of the parent repository for this forked repository."""
  forkParentName: String
  """The name of the root repository for this network."""
  forkSourceName: String
  """The Node ID of the RepoCreateAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """The visibility of the repository"""
  visibility: gh_RepoCreateAuditEntryVisibility
}

"""The privacy of a repository"""
enum gh_RepoCreateAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.destroy event."""
type gh_RepoDestroyAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoDestroyAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """The visibility of the repository"""
  visibility: gh_RepoDestroyAuditEntryVisibility
}

"""The privacy of a repository"""
enum gh_RepoDestroyAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.remove_member event."""
type gh_RepoRemoveMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoRemoveMemberAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
  """The visibility of the repository"""
  visibility: gh_RepoRemoveMemberAuditEntryVisibility
}

"""The privacy of a repository"""
enum gh_RepoRemoveMemberAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.remove_topic event."""
type gh_RepoRemoveTopicAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData & gh_TopicAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the RepoRemoveTopicAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The name of the topic added to the repository"""
  topic: gh_Topic
  """The name of the topic added to the repository"""
  topicName: String
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The reasons a piece of content can be reported or minimized."""
enum gh_ReportedContentClassifiers {
  """An abusive or harassing piece of content"""
  ABUSE
  """A duplicated piece of content"""
  DUPLICATE
  """An irrelevant piece of content"""
  OFF_TOPIC
  """An outdated piece of content"""
  OUTDATED
  """The content has been resolved"""
  RESOLVED
  """A spammy piece of content"""
  SPAM
}

"""A repository contains the content for a project."""
type gh_Repository implements gh_Node & gh_PackageOwner & gh_ProjectOwner & gh_ProjectV2Recent & gh_RepositoryInfo & gh_Starrable & gh_Subscribable & gh_UniformResourceLocatable {
  """
  Whether or not a pull request head branch that is behind its base branch can
  always be updated even if it is not required to be up to date before merging.
  """
  allowUpdateBranch: Boolean!
  """Identifies the date and time when the repository was archived."""
  archivedAt: DateTime
  """A list of users that can be assigned to issues in this repository."""
  assignableUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filters users with query on user name and login."""
    query: String
  ): gh_UserConnection!
  """
  Whether or not Auto-merge can be enabled on pull requests in this repository.
  """
  autoMergeAllowed: Boolean!
  """A list of branch protection rules for this repository."""
  branchProtectionRules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_BranchProtectionRuleConnection!
  """Returns the code of conduct for this repository"""
  codeOfConduct: gh_CodeOfConduct
  """Information extracted from the repository's `CODEOWNERS` file."""
  codeowners(
    """The ref name used to return the associated `CODEOWNERS` file."""
    refName: String
  ): gh_RepositoryCodeowners
  """A list of collaborators associated with the repository."""
  collaborators(
    """Collaborators affiliation level with a repository."""
    affiliation: gh_CollaboratorAffiliation
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The login of one specific collaborator."""
    login: String
    """Filters users with query on user name and login"""
    query: String
  ): gh_RepositoryCollaboratorConnection
  """A list of commit comments associated with the repository."""
  commitComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CommitCommentConnection!
  """Returns a list of contact links associated to the repository"""
  contactLinks: [gh_RepositoryContactLink!]
  """Returns the contributing guidelines for this repository."""
  contributingGuidelines: gh_ContributingGuidelines
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Ref associated with the repository's default branch."""
  defaultBranchRef: gh_Ref
  """
  Whether or not branches are automatically deleted when merged in this repository.
  """
  deleteBranchOnMerge: Boolean!
  """A list of dependency manifests contained in the repository"""
  dependencyGraphManifests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Cursor to paginate dependencies"""
    dependenciesAfter: String
    """Number of dependencies to fetch"""
    dependenciesFirst: Int
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Flag to scope to only manifests with dependencies"""
    withDependencies: Boolean
  ): gh_DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview")
  """A list of deploy keys that are on this repository."""
  deployKeys(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeployKeyConnection!
  """Deployments associated with the repository"""
  deployments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Environments to list deployments for"""
    environments: [String!]
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for deployments returned from the connection."""
    orderBy: gh_DeploymentOrder = {direction: ASC, field: CREATED_AT}
  ): gh_DeploymentConnection!
  """The description of the repository."""
  description: String
  """The description of the repository rendered to HTML."""
  descriptionHTML: gh_HTML!
  """Returns a single discussion from the current repository by number."""
  discussion(
    """The number for the discussion to be returned."""
    number: Int!
  ): gh_Discussion
  """A list of discussion categories that are available in the repository."""
  discussionCategories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filter by categories that are assignable by the viewer."""
    filterByAssignable: Boolean = false
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DiscussionCategoryConnection!
  """A discussion category by slug."""
  discussionCategory(
    """The slug of the discussion category to be returned."""
    slug: String!
  ): gh_DiscussionCategory
  """A list of discussions that have been opened in the repository."""
  discussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Only show answered or unanswered discussions"""
    answered: Boolean = null
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Only include discussions that belong to the category with this ID."""
    categoryId: ID = null
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for discussions returned from the connection."""
    orderBy: gh_DiscussionOrder = {direction: DESC, field: UPDATED_AT}
    """A list of states to filter the discussions by."""
    states: [gh_DiscussionState!] = []
  ): gh_DiscussionConnection!
  """The number of kilobytes this repository occupies on disk."""
  diskUsage: Int
  """
  Returns a single active environment from the current repository by name.
  """
  environment(
    """The name of the environment to be returned."""
    name: String!
  ): gh_Environment
  """A list of environments that are in this repository."""
  environments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the environments"""
    orderBy: gh_Environments = {direction: ASC, field: NAME}
  ): gh_EnvironmentConnection!
  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!
  """Whether this repository allows forks."""
  forkingAllowed: Boolean!
  """A list of direct forked repositories."""
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [gh_RepositoryAffiliation]
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [gh_RepositoryAffiliation] = [OWNER, COLLABORATOR]
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
  ): gh_RepositoryConnection!
  """The funding links for this repository"""
  fundingLinks: [gh_FundingLink!]!
  """Indicates if the repository has the Discussions feature enabled."""
  hasDiscussionsEnabled: Boolean!
  """Indicates if the repository has issues feature enabled."""
  hasIssuesEnabled: Boolean!
  """Indicates if the repository has the Projects feature enabled."""
  hasProjectsEnabled: Boolean!
  """Whether vulnerability alerts are enabled for the repository."""
  hasVulnerabilityAlertsEnabled: Boolean!
  """Indicates if the repository has wiki feature enabled."""
  hasWikiEnabled: Boolean!
  """The repository's URL."""
  homepageUrl: gh_URI
  """The Node ID of the Repository object"""
  id: ID!
  """The interaction ability settings for this repository."""
  interactionAbility: gh_RepositoryInteractionAbility
  """Indicates if the repository is unmaintained."""
  isArchived: Boolean!
  """Returns true if blank issue creation is allowed"""
  isBlankIssuesEnabled: Boolean!
  """Returns whether or not this repository disabled."""
  isDisabled: Boolean!
  """Returns whether or not this repository is empty."""
  isEmpty: Boolean!
  """Identifies if the repository is a fork."""
  isFork: Boolean!
  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!
  """Indicates if the repository has been locked or not."""
  isLocked: Boolean!
  """Identifies if the repository is a mirror."""
  isMirror: Boolean!
  """Identifies if the repository is private or internal."""
  isPrivate: Boolean!
  """Returns true if this repository has a security policy"""
  isSecurityPolicyEnabled: Boolean
  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!
  """Is this repository a user configuration repository?"""
  isUserConfigurationRepository: Boolean!
  """Returns a single issue from the current repository by number."""
  issue(
    """The number for the issue to be returned."""
    number: Int!
  ): gh_Issue
  """
  Returns a single issue-like object from the current repository by number.
  """
  issueOrPullRequest(
    """The number for the issue to be returned."""
    number: Int!
  ): gh_IssueOrPullRequest
  """Returns a list of issue templates associated to the repository"""
  issueTemplates: [gh_IssueTemplate!]
  """A list of issues that have been opened in the repository."""
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filtering options for issues returned from the connection."""
    filterBy: gh_IssueFilters
    """Returns the first _n_ elements from the list."""
    first: Int
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issues returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the issues by."""
    states: [gh_IssueState!]
  ): gh_IssueConnection!
  """Returns a single label by name"""
  label(
    """Label name"""
    name: String!
  ): gh_Label
  """A list of labels associated with the repository."""
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for labels returned from the connection."""
    orderBy: gh_LabelOrder = {direction: ASC, field: CREATED_AT}
    """If provided, searches labels by name and description."""
    query: String
  ): gh_LabelConnection
  """
  A list containing a breakdown of the language composition of the repository.
  """
  languages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_LanguageOrder
  ): gh_LanguageConnection
  """Get the latest release for the repository if one exists."""
  latestRelease: gh_Release
  """The license associated with the repository"""
  licenseInfo: gh_License
  """The reason the repository has been locked."""
  lockReason: gh_RepositoryLockReason
  """
  A list of Users that can be mentioned in the context of the repository.
  """
  mentionableUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filters users with query on user name and login"""
    query: String
  ): gh_UserConnection!
  """Whether or not PRs are merged with a merge commit on this repository."""
  mergeCommitAllowed: Boolean!
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: gh_MergeCommitMessage!
  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: gh_MergeCommitTitle!
  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """The name of the branch to get the merge queue for. Case sensitive."""
    branch: String
  ): gh_MergeQueue
  """Returns a single milestone from the current repository by number."""
  milestone(
    """The number for the milestone to be returned."""
    number: Int!
  ): gh_Milestone
  """A list of milestones associated with the repository."""
  milestones(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for milestones."""
    orderBy: gh_MilestoneOrder
    """Filters milestones with a query on the title"""
    query: String
    """Filter by the state of the milestones."""
    states: [gh_MilestoneState!]
  ): gh_MilestoneConnection
  """The repository's original mirror URL."""
  mirrorUrl: gh_URI
  """The name of the repository."""
  name: String!
  """The repository's name with owner."""
  nameWithOwner: String!
  """A Git object in the repository"""
  object(
    """A Git revision expression suitable for rev-parse"""
    expression: String
    """The Git object ID"""
    oid: gh_GitObjectID
  ): gh_GitObject
  """The image used to represent this repository in Open Graph data."""
  openGraphImageUrl: gh_URI!
  """The User owner of the repository."""
  owner: gh_RepositoryOwner!
  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Find packages by their names."""
    names: [String]
    """Ordering of the returned packages."""
    orderBy: gh_PackageOrder = {direction: DESC, field: CREATED_AT}
    """Filter registry package by type."""
    packageType: gh_PackageType
    """Find packages in a repository by ID."""
    repositoryId: ID
  ): gh_PackageConnection!
  """The repository parent, if this is a fork."""
  parent: gh_Repository
  """A list of discussions that have been pinned in this repository."""
  pinnedDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PinnedDiscussionConnection!
  """A list of pinned issues for this repository."""
  pinnedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PinnedIssueConnection
  """The primary language of the repository's code."""
  primaryLanguage: gh_Language
  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): gh_Project
  """
  Finds and returns the Project according to the provided Project number.
  """
  projectV2(
    """The Project number."""
    number: Int!
  ): gh_ProjectV2
  """A list of projects under the owner."""
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for projects returned from the connection"""
    orderBy: gh_ProjectOrder
    """Query to search projects by, currently only searching by name."""
    search: String
    """A list of states to filter the projects by."""
    states: [gh_ProjectState!]
  ): gh_ProjectConnection!
  """The HTTP path listing the repository's projects"""
  projectsResourcePath: gh_URI!
  """The HTTP URL listing the repository's projects"""
  projectsUrl: gh_URI!
  """List of projects linked to this repository."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """A project to search for linked to the repo."""
    query: String
  ): gh_ProjectV2Connection!
  """Returns a single pull request from the current repository by number."""
  pullRequest(
    """The number for the pull request to be returned."""
    number: Int!
  ): gh_PullRequest
  """Returns a list of pull request templates associated to the repository"""
  pullRequestTemplates: [gh_PullRequestTemplate!]
  """A list of pull requests that have been opened in the repository."""
  pullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """The base ref name to filter the pull requests by."""
    baseRefName: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """The head ref name to filter the pull requests by."""
    headRefName: String
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the pull requests by."""
    states: [gh_PullRequestState!]
  ): gh_PullRequestConnection!
  """Identifies the date and time when the repository was last pushed to."""
  pushedAt: DateTime
  """Whether or not rebase-merging is enabled on this repository."""
  rebaseMergeAllowed: Boolean!
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2Connection!
  """Fetch a given ref from the repository"""
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): gh_Ref
  """Fetch a list of refs from the repository"""
  refs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """DEPRECATED: use orderBy. The ordering direction."""
    direction: gh_OrderDirection
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for refs returned from the connection."""
    orderBy: gh_RefOrder
    """Filters refs with query on name"""
    query: String
    """A ref name prefix like `refs/heads/`, `refs/tags/`, etc."""
    refPrefix: String!
  ): gh_RefConnection
  """Lookup a single release given various criteria."""
  release(
    """The name of the Tag the Release was created from"""
    tagName: String!
  ): gh_Release
  """List of releases which are dependent on this repository."""
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_ReleaseOrder
  ): gh_ReleaseConnection!
  """A list of applied repository-topic associations for this repository."""
  repositoryTopics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_RepositoryTopicConnection!
  """The HTTP path for this repository"""
  resourcePath: gh_URI!
  """Returns a single ruleset from the current repository by ID."""
  ruleset(
    """The ID of the ruleset to be returned."""
    databaseId: Int!
    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): gh_RepositoryRuleset
  """A list of rulesets for this repository."""
  rulesets(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_RepositoryRulesetConnection
  """The security policy URL."""
  securityPolicyUrl: gh_URI
  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): gh_HTML!
  """Whether or not squash-merging is enabled on this repository."""
  squashMergeAllowed: Boolean!
  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: gh_SquashMergeCommitMessage!
  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: gh_SquashMergeCommitTitle!
  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean! @deprecated(reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.")
  """The SSH URL to clone this repository"""
  sshUrl: gh_GitSSHRemote!
  """Returns a count of how many stargazers there are on this object"""
  stargazerCount: Int!
  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_StarOrder
  ): gh_StargazerConnection!
  """
  Returns a list of all submodules in this repository parsed from the
  .gitmodules file as of the default branch's HEAD commit.
  """
  submodules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_SubmoduleConnection!
  """Temporary authentication token for cloning this repository."""
  tempCloneToken: String
  """The repository from which this repository was generated, if any."""
  templateRepository: gh_Repository
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this repository"""
  url: gh_URI!
  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!
  """Indicates whether the viewer has admin permissions on this repository."""
  viewerCanAdminister: Boolean!
  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """Indicates whether the viewer can update the topics of this repository."""
  viewerCanUpdateTopics: Boolean!
  """The last commit email for the viewer."""
  viewerDefaultCommitEmail: String
  """
  The last used merge method by the viewer or the default for the repository.
  """
  viewerDefaultMergeMethod: gh_PullRequestMergeMethod!
  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
  """
  The users permission level on the repository. Will return null if authenticated as an GitHub App.
  """
  viewerPermission: gh_RepositoryPermission
  """A list of emails this viewer can commit with."""
  viewerPossibleCommitEmails: [String!]
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
  """Indicates the repository's visibility level."""
  visibility: gh_RepositoryVisibility!
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """The number for the vulnerability alert to be returned."""
    number: Int!
  ): gh_RepositoryVulnerabilityAlert
  """A list of vulnerability alerts that are on this repository."""
  vulnerabilityAlerts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filter by the scope of the alert's dependency"""
    dependencyScopes: [gh_RepositoryVulnerabilityAlertDependencyScope!]
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter by the state of the alert"""
    states: [gh_RepositoryVulnerabilityAlertState!]
  ): gh_RepositoryVulnerabilityAlertConnection
  """A list of users watching the repository."""
  watchers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserConnection!
  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""The affiliation of a user to a repository"""
enum gh_RepositoryAffiliation {
  """Repositories that the user has been added to as a collaborator."""
  COLLABORATOR
  """
  Repositories that the user has access to through being a member of an
  organization. This includes every repository on every team that the user is on.
  """
  ORGANIZATION_MEMBER
  """Repositories that are owned by the authenticated user."""
  OWNER
}

"""Metadata for an audit entry with action repo.*"""
interface gh_RepositoryAuditEntryData {
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
}

"""Information extracted from a repository's `CODEOWNERS` file."""
type gh_RepositoryCodeowners {
  """
  Any problems that were encountered while parsing the `CODEOWNERS` file.
  """
  errors: [gh_RepositoryCodeownersError!]!
}

"""An error in a `CODEOWNERS` file."""
type gh_RepositoryCodeownersError {
  """The column number where the error occurs."""
  column: Int!
  """A short string describing the type of error."""
  kind: String!
  """The line number where the error occurs."""
  line: Int!
  """
  A complete description of the error, combining information from other fields.
  """
  message: String!
  """The path to the file when the error occurs."""
  path: String!
  """The content of the line where the error occurs."""
  source: String!
  """A suggestion of how to fix the error."""
  suggestion: String
}

"""The connection type for User."""
type gh_RepositoryCollaboratorConnection {
  """A list of edges."""
  edges: [gh_RepositoryCollaboratorEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user who is a collaborator of a repository."""
type gh_RepositoryCollaboratorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  node: gh_User!
  """The permission the user has on the repository."""
  permission: gh_RepositoryPermission!
  """A list of sources for the user's access to the repository."""
  permissionSources: [gh_PermissionSource!]
}

"""A list of repositories owned by the subject."""
type gh_RepositoryConnection {
  """A list of edges."""
  edges: [gh_RepositoryEdge]
  """A list of nodes."""
  nodes: [gh_Repository]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  totalDiskUsage: Int!
}

"""A repository contact link."""
type gh_RepositoryContactLink {
  """The contact link purpose."""
  about: String!
  """The contact link name."""
  name: String!
  """The contact link URL."""
  url: gh_URI!
}

"""The reason a repository is listed as 'contributed'."""
enum gh_RepositoryContributionType {
  """Created a commit"""
  COMMIT
  """Created an issue"""
  ISSUE
  """Created a pull request"""
  PULL_REQUEST
  """Reviewed a pull request"""
  PULL_REQUEST_REVIEW
  """Created the repository"""
  REPOSITORY
}

"""Represents an author of discussions in repositories."""
interface gh_RepositoryDiscussionAuthor {
  """Discussions this user has started."""
  repositoryDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for discussions returned from the connection."""
    orderBy: gh_DiscussionOrder = {direction: DESC, field: CREATED_AT}
    """Filter discussions to only those in a specific repository."""
    repositoryId: ID
    """A list of states to filter the discussions by."""
    states: [gh_DiscussionState!] = []
  ): gh_DiscussionConnection!
}

"""Represents an author of discussion comments in repositories."""
interface gh_RepositoryDiscussionCommentAuthor {
  """Discussion comments this user has authored."""
  repositoryDiscussionComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false
    """Filter discussion comments to only those in a specific repository."""
    repositoryId: ID
  ): gh_DiscussionCommentConnection!
}

"""An edge in a connection."""
type gh_RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Repository
}

"""Parameters to be used for the repository_id condition"""
type gh_RepositoryIdConditionTarget {
  """One of these repo IDs must match the repo."""
  repositoryIds: [ID!]!
}

"""Parameters to be used for the repository_id condition"""
input gh_RepositoryIdConditionTargetInput {
  """One of these repo IDs must match the repo."""
  repositoryIds: [ID!]!
}

"""A subset of repository info."""
interface gh_RepositoryInfo {
  """Identifies the date and time when the repository was archived."""
  archivedAt: DateTime
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The description of the repository."""
  description: String
  """The description of the repository rendered to HTML."""
  descriptionHTML: gh_HTML!
  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!
  """Indicates if the repository has the Discussions feature enabled."""
  hasDiscussionsEnabled: Boolean!
  """Indicates if the repository has issues feature enabled."""
  hasIssuesEnabled: Boolean!
  """Indicates if the repository has the Projects feature enabled."""
  hasProjectsEnabled: Boolean!
  """Indicates if the repository has wiki feature enabled."""
  hasWikiEnabled: Boolean!
  """The repository's URL."""
  homepageUrl: gh_URI
  """Indicates if the repository is unmaintained."""
  isArchived: Boolean!
  """Identifies if the repository is a fork."""
  isFork: Boolean!
  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!
  """Indicates if the repository has been locked or not."""
  isLocked: Boolean!
  """Identifies if the repository is a mirror."""
  isMirror: Boolean!
  """Identifies if the repository is private or internal."""
  isPrivate: Boolean!
  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!
  """The license associated with the repository"""
  licenseInfo: gh_License
  """The reason the repository has been locked."""
  lockReason: gh_RepositoryLockReason
  """The repository's original mirror URL."""
  mirrorUrl: gh_URI
  """The name of the repository."""
  name: String!
  """The repository's name with owner."""
  nameWithOwner: String!
  """The image used to represent this repository in Open Graph data."""
  openGraphImageUrl: gh_URI!
  """The User owner of the repository."""
  owner: gh_RepositoryOwner!
  """Identifies the date and time when the repository was last pushed to."""
  pushedAt: DateTime
  """The HTTP path for this repository"""
  resourcePath: gh_URI!
  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): gh_HTML!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this repository"""
  url: gh_URI!
  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!
  """Indicates the repository's visibility level."""
  visibility: gh_RepositoryVisibility!
}

"""Repository interaction limit that applies to this object."""
type gh_RepositoryInteractionAbility {
  """The time the currently active limit expires."""
  expiresAt: DateTime
  """The current limit that is enabled on this object."""
  limit: gh_RepositoryInteractionLimit!
  """The origin of the currently active interaction limit."""
  origin: gh_RepositoryInteractionLimitOrigin!
}

"""A repository interaction limit."""
enum gh_RepositoryInteractionLimit {
  """
  Users that are not collaborators will not be able to interact with the repository.
  """
  COLLABORATORS_ONLY
  """
  Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
  """
  CONTRIBUTORS_ONLY
  """
  Users that have recently created their account will be unable to interact with the repository.
  """
  EXISTING_USERS
  """No interaction limits are enabled."""
  NO_LIMIT
}

"""The length for a repository interaction limit to be enabled for."""
enum gh_RepositoryInteractionLimitExpiry {
  """The interaction limit will expire after 1 day."""
  ONE_DAY
  """The interaction limit will expire after 1 month."""
  ONE_MONTH
  """The interaction limit will expire after 1 week."""
  ONE_WEEK
  """The interaction limit will expire after 6 months."""
  SIX_MONTHS
  """The interaction limit will expire after 3 days."""
  THREE_DAYS
}

"""Indicates where an interaction limit is configured."""
enum gh_RepositoryInteractionLimitOrigin {
  """A limit that is configured at the organization level."""
  ORGANIZATION
  """A limit that is configured at the repository level."""
  REPOSITORY
  """A limit that is configured at the user-wide level."""
  USER
}

"""An invitation for a user to be added to a repository."""
type gh_RepositoryInvitation implements gh_Node {
  """The email address that received the invitation."""
  email: String
  """The Node ID of the RepositoryInvitation object"""
  id: ID!
  """The user who received the invitation."""
  invitee: gh_User
  """The user who created the invitation."""
  inviter: gh_User!
  """The permalink for this repository invitation."""
  permalink: gh_URI!
  """The permission granted on this repository by this invitation."""
  permission: gh_RepositoryPermission!
  """The Repository the user is invited to."""
  repository: gh_RepositoryInfo
}

"""A list of repository invitations."""
type gh_RepositoryInvitationConnection {
  """A list of edges."""
  edges: [gh_RepositoryInvitationEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryInvitation]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RepositoryInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryInvitation
}

"""Ordering options for repository invitation connections."""
input gh_RepositoryInvitationOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order repository invitations by."""
  field: gh_RepositoryInvitationOrderField!
}

"""Properties by which repository invitation connections can be ordered."""
enum gh_RepositoryInvitationOrderField {
  """Order repository invitations by creation time"""
  CREATED_AT
}

"""The possible reasons a given repository could be in a locked state."""
enum gh_RepositoryLockReason {
  """The repository is locked due to a billing related reason."""
  BILLING
  """The repository is locked due to a migration."""
  MIGRATING
  """The repository is locked due to a move."""
  MOVING
  """The repository is locked due to a rename."""
  RENAME
  """The repository is locked due to a trade controls related reason."""
  TRADE_RESTRICTION
  """The repository is locked due to an ownership transfer."""
  TRANSFERRING_OWNERSHIP
}

"""A GitHub Enterprise Importer (GEI) repository migration."""
type gh_RepositoryMigration implements gh_Migration & gh_Node {
  """The migration flag to continue on error."""
  continueOnError: Boolean!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: String
  """The reason the migration failed."""
  failureReason: String
  """The Node ID of the RepositoryMigration object"""
  id: ID!
  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: gh_URI
  """The migration source."""
  migrationSource: gh_MigrationSource!
  """The target repository name."""
  repositoryName: String!
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sourceUrl: gh_URI!
  """The migration state."""
  state: gh_MigrationState!
  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""The connection type for RepositoryMigration."""
type gh_RepositoryMigrationConnection {
  """A list of edges."""
  edges: [gh_RepositoryMigrationEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryMigration]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a repository migration."""
type gh_RepositoryMigrationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryMigration
}

"""Ordering options for repository migrations."""
input gh_RepositoryMigrationOrder {
  """The ordering direction."""
  direction: gh_RepositoryMigrationOrderDirection!
  """The field to order repository migrations by."""
  field: gh_RepositoryMigrationOrderField!
}

"""
Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
"""
enum gh_RepositoryMigrationOrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""Properties by which repository migrations can be ordered."""
enum gh_RepositoryMigrationOrderField {
  """Order mannequins why when they were created."""
  CREATED_AT
}

"""Parameters to be used for the repository_name condition"""
type gh_RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!
  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!
  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""Parameters to be used for the repository_name condition"""
input gh_RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!
  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!
  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""Represents a object that belongs to a repository."""
interface gh_RepositoryNode {
  """The repository associated with this node."""
  repository: gh_Repository!
}

"""Ordering options for repository connections"""
input gh_RepositoryOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order repositories by."""
  field: gh_RepositoryOrderField!
}

"""Properties by which repository connections can be ordered."""
enum gh_RepositoryOrderField {
  """Order repositories by creation time"""
  CREATED_AT
  """Order repositories by name"""
  NAME
  """Order repositories by push time"""
  PUSHED_AT
  """Order repositories by number of stargazers"""
  STARGAZERS
  """Order repositories by update time"""
  UPDATED_AT
}

"""Represents an owner of a Repository."""
interface gh_RepositoryOwner {
  """A URL pointing to the owner's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """The Node ID of the RepositoryOwner object"""
  id: ID!
  """The username used to login."""
  login: String!
  """A list of repositories that the user owns."""
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [gh_RepositoryAffiliation]
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean
    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean
    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [gh_RepositoryAffiliation] = [OWNER, COLLABORATOR]
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
  ): gh_RepositoryConnection!
  """Find Repository."""
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true
    """Name of Repository to find."""
    name: String!
  ): gh_Repository
  """The HTTP URL for the owner."""
  resourcePath: gh_URI!
  """The HTTP URL for the owner."""
  url: gh_URI!
}

"""The access level to a repository"""
enum gh_RepositoryPermission {
  """
  Can read, clone, and push to this repository. Can also manage issues, pull
  requests, and repository settings, including adding collaborators
  """
  ADMIN
  """
  Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
  """
  MAINTAIN
  """
  Can read and clone this repository. Can also open and comment on issues and pull requests
  """
  READ
  """
  Can read and clone this repository. Can also manage issues and pull requests
  """
  TRIAGE
  """
  Can read, clone, and push to this repository. Can also manage issues and pull requests
  """
  WRITE
}

"""The privacy of a repository"""
enum gh_RepositoryPrivacy {
  """Private"""
  PRIVATE
  """Public"""
  PUBLIC
}

"""A repository rule."""
type gh_RepositoryRule implements gh_Node {
  """The Node ID of the RepositoryRule object"""
  id: ID!
  """The parameters for this rule."""
  parameters: gh_RuleParameters
  """The repository ruleset associated with this rule configuration"""
  repositoryRuleset: gh_RepositoryRuleset
  """The type of rule."""
  type: gh_RepositoryRuleType!
}

"""Set of conditions that determine if a ruleset will evaluate"""
type gh_RepositoryRuleConditions {
  """Configuration for the ref_name condition"""
  refName: gh_RefNameConditionTarget
  """Configuration for the repository_id condition"""
  repositoryId: gh_RepositoryIdConditionTarget
  """Configuration for the repository_name condition"""
  repositoryName: gh_RepositoryNameConditionTarget
}

"""Specifies the conditions required for a ruleset to evaluate"""
input gh_RepositoryRuleConditionsInput {
  """Configuration for the ref_name condition"""
  refName: gh_RefNameConditionTargetInput
  """Configuration for the repository_id condition"""
  repositoryId: gh_RepositoryIdConditionTargetInput
  """Configuration for the repository_name condition"""
  repositoryName: gh_RepositoryNameConditionTargetInput
}

"""The connection type for RepositoryRule."""
type gh_RepositoryRuleConnection {
  """A list of edges."""
  edges: [gh_RepositoryRuleEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryRule]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RepositoryRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryRule
}

"""Specifies the attributes for a new or updated rule."""
input gh_RepositoryRuleInput {
  """Optional ID of this rule when updating"""
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])
  """The parameters for the rule."""
  parameters: gh_RuleParametersInput
  """The type of rule to create."""
  type: gh_RepositoryRuleType!
}

"""The rule types supported in rulesets"""
enum gh_RepositoryRuleType {
  """Authorization"""
  AUTHORIZATION
  """Branch name pattern"""
  BRANCH_NAME_PATTERN
  """Committer email pattern"""
  COMMITTER_EMAIL_PATTERN
  """Commit author email pattern"""
  COMMIT_AUTHOR_EMAIL_PATTERN
  """Commit message pattern"""
  COMMIT_MESSAGE_PATTERN
  """Only allow users with bypass permission to create matching refs."""
  CREATION
  """Only allow users with bypass permissions to delete matching refs."""
  DELETION
  """Branch is read-only. Users cannot push to the branch."""
  LOCK_BRANCH
  """Max ref updates"""
  MAX_REF_UPDATES
  """Merges must be performed via a merge queue."""
  MERGE_QUEUE
  """Merge queue locked ref"""
  MERGE_QUEUE_LOCKED_REF
  """Prevent users with push access from force pushing to refs."""
  NON_FAST_FORWARD
  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST
  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS
  """Prevent merge commits from being pushed to matching refs."""
  REQUIRED_LINEAR_HISTORY
  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION
  """Commits pushed to matching refs must have verified signatures."""
  REQUIRED_SIGNATURES
  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS
  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS
  """Commits pushed to matching refs must have verified signatures."""
  RULESET_REQUIRED_SIGNATURES
  """Secret scanning"""
  SECRET_SCANNING
  """Tag"""
  TAG
  """Tag name pattern"""
  TAG_NAME_PATTERN
  """Only allow users with bypass permission to update matching refs."""
  UPDATE
  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS
  """Workflow files cannot be modified."""
  WORKFLOW_UPDATES
}

"""A repository ruleset."""
type gh_RepositoryRuleset implements gh_Node {
  """The actors that can bypass this ruleset"""
  bypassActors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_RepositoryRulesetBypassActorConnection
  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: gh_RepositoryRuleConditions!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The enforcement level of this ruleset"""
  enforcement: gh_RuleEnforcement!
  """The Node ID of the RepositoryRuleset object"""
  id: ID!
  """Name of the ruleset."""
  name: String!
  """List of rules."""
  rules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The type of rule."""
    type: gh_RepositoryRuleType
  ): gh_RepositoryRuleConnection
  """Source of ruleset."""
  source: gh_RuleSource!
  """Target of the ruleset."""
  target: gh_RepositoryRulesetTarget
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type gh_RepositoryRulesetBypassActor implements gh_Node {
  """The actor that can bypass rules."""
  actor: gh_BypassActor
  """The mode for the bypass actor"""
  bypassMode: gh_RepositoryRulesetBypassActorBypassMode
  """The Node ID of the RepositoryRulesetBypassActor object"""
  id: ID!
  """This actor represents the ability for an organization owner to bypass"""
  organizationAdmin: Boolean!
  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int
  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String
  """Identifies the ruleset associated with the allowed actor"""
  repositoryRuleset: gh_RepositoryRuleset
}

"""The bypass mode for a specific actor on a ruleset."""
enum gh_RepositoryRulesetBypassActorBypassMode {
  """The actor can always bypass rules"""
  ALWAYS
  """The actor can only bypass rules via a pull request"""
  PULL_REQUEST
}

"""The connection type for RepositoryRulesetBypassActor."""
type gh_RepositoryRulesetBypassActorConnection {
  """A list of edges."""
  edges: [gh_RepositoryRulesetBypassActorEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryRulesetBypassActor]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RepositoryRulesetBypassActorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input gh_RepositoryRulesetBypassActorInput {
  """For Team and Integration bypasses, the Team or Integration ID"""
  actorId: ID
  """The bypass mode for this actor."""
  bypassMode: gh_RepositoryRulesetBypassActorBypassMode!
  """For organization owner bypasses, true"""
  organizationAdmin: Boolean
  """For role bypasses, the role database ID"""
  repositoryRoleDatabaseId: Int
}

"""The connection type for RepositoryRuleset."""
type gh_RepositoryRulesetConnection {
  """A list of edges."""
  edges: [gh_RepositoryRulesetEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryRuleset]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RepositoryRulesetEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryRuleset
}

"""The targets supported for rulesets"""
enum gh_RepositoryRulesetTarget {
  """Branch"""
  BRANCH
  """Tag"""
  TAG
}

"""A repository-topic connects a repository to a topic."""
type gh_RepositoryTopic implements gh_Node & gh_UniformResourceLocatable {
  """The Node ID of the RepositoryTopic object"""
  id: ID!
  """The HTTP path for this repository-topic."""
  resourcePath: gh_URI!
  """The topic."""
  topic: gh_Topic!
  """The HTTP URL for this repository-topic."""
  url: gh_URI!
}

"""The connection type for RepositoryTopic."""
type gh_RepositoryTopicConnection {
  """A list of edges."""
  edges: [gh_RepositoryTopicEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryTopic]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RepositoryTopicEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryTopic
}

"""The repository's visibility level."""
enum gh_RepositoryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL
  """The repository is visible only to those with explicit access."""
  PRIVATE
  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repository_visibility_change.disable event."""
type gh_RepositoryVisibilityChangeDisableAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a repository_visibility_change.enable event."""
type gh_RepositoryVisibilityChangeEnableAuditEntry implements gh_AuditEntry & gh_EnterpriseAuditEntryData & gh_Node & gh_OrganizationAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: gh_URI
  """The slug of the enterprise."""
  enterpriseSlug: String
  """The HTTP URL for this enterprise."""
  enterpriseUrl: gh_URI
  """The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object"""
  id: ID!
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""
A Dependabot alert for a repository with a dependency affected by a security vulnerability.
"""
type gh_RepositoryVulnerabilityAlert implements gh_Node & gh_RepositoryNode {
  """When was the alert auto-dismissed?"""
  autoDismissedAt: DateTime
  """When was the alert created?"""
  createdAt: DateTime!
  """The associated Dependabot update"""
  dependabotUpdate: gh_DependabotUpdate
  """The scope of an alert's dependency"""
  dependencyScope: gh_RepositoryVulnerabilityAlertDependencyScope
  """Comment explaining the reason the alert was dismissed"""
  dismissComment: String
  """The reason the alert was dismissed"""
  dismissReason: String
  """When was the alert dismissed?"""
  dismissedAt: DateTime
  """The user who dismissed the alert"""
  dismisser: gh_User
  """When was the alert fixed?"""
  fixedAt: DateTime
  """The Node ID of the RepositoryVulnerabilityAlert object"""
  id: ID!
  """Identifies the alert number."""
  number: Int!
  """The associated repository"""
  repository: gh_Repository!
  """The associated security advisory"""
  securityAdvisory: gh_SecurityAdvisory
  """The associated security vulnerability"""
  securityVulnerability: gh_SecurityVulnerability
  """Identifies the state of the alert."""
  state: gh_RepositoryVulnerabilityAlertState!
  """The vulnerable manifest filename"""
  vulnerableManifestFilename: String!
  """The vulnerable manifest path"""
  vulnerableManifestPath: String!
  """The vulnerable requirements"""
  vulnerableRequirements: String
}

"""The connection type for RepositoryVulnerabilityAlert."""
type gh_RepositoryVulnerabilityAlertConnection {
  """A list of edges."""
  edges: [gh_RepositoryVulnerabilityAlertEdge]
  """A list of nodes."""
  nodes: [gh_RepositoryVulnerabilityAlert]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The possible scopes of an alert's dependency."""
enum gh_RepositoryVulnerabilityAlertDependencyScope {
  """A dependency that is only used in development"""
  DEVELOPMENT
  """A dependency that is leveraged during application runtime"""
  RUNTIME
}

"""An edge in a connection."""
type gh_RepositoryVulnerabilityAlertEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RepositoryVulnerabilityAlert
}

"""The possible states of an alert"""
enum gh_RepositoryVulnerabilityAlertState {
  """An alert that has been automatically closed by Dependabot."""
  AUTO_DISMISSED
  """An alert that has been manually closed by a user."""
  DISMISSED
  """An alert that has been resolved by a code change."""
  FIXED
  """An alert that is still open."""
  OPEN
}

"""Autogenerated input type of RequestReviews"""
input gh_RequestReviewsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the pull request to modify."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  """The Node IDs of the team to request."""
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])
  """Add users to the set rather than replace."""
  union: Boolean = false
  """The Node IDs of the user to request."""
  userIds: [ID!] @possibleTypes(concreteTypes: ["User"])
}

"""Autogenerated return type of RequestReviews"""
type gh_RequestReviewsPayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that is getting requests."""
  pullRequest: gh_PullRequest
  """The edge from the pull request to the requested reviewers."""
  requestedReviewersEdge: gh_UserEdge
}

"""The possible states that can be requested when creating a check run."""
enum gh_RequestableCheckStatusState {
  """The check suite or run has been completed."""
  COMPLETED
  """The check suite or run is in progress."""
  IN_PROGRESS
  """The check suite or run is in pending state."""
  PENDING
  """The check suite or run has been queued."""
  QUEUED
  """The check suite or run is in waiting state."""
  WAITING
}

"""Types that can be requested reviewers."""
union gh_RequestedReviewer = gh_Bot | gh_Mannequin | gh_Team | gh_User

"""The connection type for RequestedReviewer."""
type gh_RequestedReviewerConnection {
  """A list of edges."""
  edges: [gh_RequestedReviewerEdge]
  """A list of nodes."""
  nodes: [gh_RequestedReviewer]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_RequestedReviewerEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_RequestedReviewer
}

"""Represents a type that can be required by a pull request for merging."""
interface gh_RequirableByPullRequest {
  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """The id of the pull request this is required for"""
    pullRequestId: ID
    """The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type gh_RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input gh_RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type gh_RequiredStatusCheckDescription {
  """The App that must provide this status in order for it to be accepted."""
  app: gh_App
  """The name of this status."""
  context: String!
}

"""Specifies the attributes for a new or updated required status check."""
input gh_RequiredStatusCheckInput {
  """
  The ID of the App that must set the status in order for it to be accepted.
  Omit this value to use whichever app has recently been setting this status, or
  use "any" to allow any app to set the status.
  """
  appId: ID
  """
  Status check context that must pass for commits to be accepted to the matching branch.
  """
  context: String!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type gh_RequiredStatusChecksParameters {
  """Status checks that are required."""
  requiredStatusChecks: [gh_StatusCheckConfiguration!]!
  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input gh_RequiredStatusChecksParametersInput {
  """Status checks that are required."""
  requiredStatusChecks: [gh_StatusCheckConfigurationInput!]!
  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""Autogenerated input type of RerequestCheckSuite"""
input gh_RerequestCheckSuiteInput {
  """The Node ID of the check suite."""
  checkSuiteId: ID! @possibleTypes(concreteTypes: ["CheckSuite"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of RerequestCheckSuite"""
type gh_RerequestCheckSuitePayload {
  """The requested check suite."""
  checkSuite: gh_CheckSuite
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of ResolveReviewThread"""
input gh_ResolveReviewThreadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the thread to resolve"""
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""Autogenerated return type of ResolveReviewThread"""
type gh_ResolveReviewThreadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The thread to resolve."""
  thread: gh_PullRequestReviewThread
}

"""Represents a private contribution a user made on GitHub."""
type gh_RestrictedContribution implements gh_Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!
  """When this contribution was made."""
  occurredAt: DateTime!
  """The HTTP path for this contribution."""
  resourcePath: gh_URI!
  """The HTTP URL for this contribution."""
  url: gh_URI!
  """The user who made this contribution."""
  user: gh_User!
}

"""Autogenerated input type of RetireSponsorsTier"""
input gh_RetireSponsorsTierInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the published tier to retire."""
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""Autogenerated return type of RetireSponsorsTier"""
type gh_RetireSponsorsTierPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The tier that was retired."""
  sponsorsTier: gh_SponsorsTier
}

"""Autogenerated input type of RevertPullRequest"""
input gh_RevertPullRequestInput {
  """The description of the revert pull request."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Indicates whether the revert pull request should be a draft."""
  draft: Boolean = false
  """The ID of the pull request to revert."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  """The title of the revert pull request."""
  title: String
}

"""Autogenerated return type of RevertPullRequest"""
type gh_RevertPullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The pull request that was reverted."""
  pullRequest: gh_PullRequest
  """The new pull request that reverts the input pull request."""
  revertPullRequest: gh_PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type gh_ReviewDismissalAllowance implements gh_Node {
  """The actor that can dismiss."""
  actor: gh_ReviewDismissalAllowanceActor
  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: gh_BranchProtectionRule
  """The Node ID of the ReviewDismissalAllowance object"""
  id: ID!
}

"""Types that can be an actor."""
union gh_ReviewDismissalAllowanceActor = gh_App | gh_Team | gh_User

"""The connection type for ReviewDismissalAllowance."""
type gh_ReviewDismissalAllowanceConnection {
  """A list of edges."""
  edges: [gh_ReviewDismissalAllowanceEdge]
  """A list of nodes."""
  nodes: [gh_ReviewDismissalAllowance]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ReviewDismissalAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type gh_ReviewDismissedEvent implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String
  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String
  """The Node ID of the ReviewDismissedEvent object"""
  id: ID!
  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: gh_PullRequestReviewState!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """Identifies the commit which caused the review to become stale."""
  pullRequestCommit: gh_PullRequestCommit
  """The HTTP path for this review dismissed event."""
  resourcePath: gh_URI!
  """Identifies the review associated with the 'review_dismissed' event."""
  review: gh_PullRequestReview
  """The HTTP URL for this review dismissed event."""
  url: gh_URI!
}

"""A request for a user to review a pull request."""
type gh_ReviewRequest implements gh_Node {
  """Whether this request was created for a code owner"""
  asCodeOwner: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the ReviewRequest object"""
  id: ID!
  """Identifies the pull request associated with this review request."""
  pullRequest: gh_PullRequest!
  """The reviewer that is requested."""
  requestedReviewer: gh_RequestedReviewer
}

"""The connection type for ReviewRequest."""
type gh_ReviewRequestConnection {
  """A list of edges."""
  edges: [gh_ReviewRequestEdge]
  """A list of nodes."""
  nodes: [gh_ReviewRequest]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_ReviewRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_ReviewRequest
}

"""Represents an 'review_request_removed' event on a given pull request."""
type gh_ReviewRequestRemovedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ReviewRequestRemovedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """Identifies the reviewer whose review request was removed."""
  requestedReviewer: gh_RequestedReviewer
}

"""Represents an 'review_requested' event on a given pull request."""
type gh_ReviewRequestedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the ReviewRequestedEvent object"""
  id: ID!
  """PullRequest referenced by event."""
  pullRequest: gh_PullRequest!
  """Identifies the reviewer whose review was requested."""
  requestedReviewer: gh_RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type gh_ReviewStatusHovercardContext implements gh_HovercardContext {
  """A string describing this context"""
  message: String!
  """An octicon to accompany this context"""
  octicon: String!
  """The current status of the pull request with respect to code review."""
  reviewDecision: gh_PullRequestReviewDecision
}

"""Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole"""
input gh_RevokeEnterpriseOrganizationsMigratorRoleInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of the user to revoke the migrator role"""
  login: String!
}

"""Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole"""
type gh_RevokeEnterpriseOrganizationsMigratorRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_OrganizationConnection
}

"""Autogenerated input type of RevokeMigratorRole"""
input gh_RevokeMigratorRoleInput {
  """The user login or Team slug to revoke the migrator role from."""
  actor: String!
  """Specifies the type of the actor, can be either USER or TEAM."""
  actorType: gh_ActorType!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the organization that the user/team belongs to."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of RevokeMigratorRole"""
type gh_RevokeMigratorRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Did the operation succeed?"""
  success: Boolean
}

"""Possible roles a user may have in relation to an organization."""
enum gh_RoleInOrganization {
  """A user who is a direct member of the organization."""
  DIRECT_MEMBER
  """A user with full administrative access to the organization."""
  OWNER
  """A user who is unaffiliated with the organization."""
  UNAFFILIATED
}

"""The level of enforcement for a rule or ruleset."""
enum gh_RuleEnforcement {
  """Rules will be enforced"""
  ACTIVE
  """Do not evaluate or enforce rules"""
  DISABLED
  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""Types which can be parameters for `RepositoryRule` objects."""
union gh_RuleParameters = gh_BranchNamePatternParameters | gh_CommitAuthorEmailPatternParameters | gh_CommitMessagePatternParameters | gh_CommitterEmailPatternParameters | gh_PullRequestParameters | gh_RequiredDeploymentsParameters | gh_RequiredStatusChecksParameters | gh_TagNamePatternParameters | gh_UpdateParameters | gh_WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input gh_RuleParametersInput {
  """Parameters used for the `branch_name_pattern` rule type"""
  branchNamePattern: gh_BranchNamePatternParametersInput
  """Parameters used for the `commit_author_email_pattern` rule type"""
  commitAuthorEmailPattern: gh_CommitAuthorEmailPatternParametersInput
  """Parameters used for the `commit_message_pattern` rule type"""
  commitMessagePattern: gh_CommitMessagePatternParametersInput
  """Parameters used for the `committer_email_pattern` rule type"""
  committerEmailPattern: gh_CommitterEmailPatternParametersInput
  """Parameters used for the `pull_request` rule type"""
  pullRequest: gh_PullRequestParametersInput
  """Parameters used for the `required_deployments` rule type"""
  requiredDeployments: gh_RequiredDeploymentsParametersInput
  """Parameters used for the `required_status_checks` rule type"""
  requiredStatusChecks: gh_RequiredStatusChecksParametersInput
  """Parameters used for the `tag_name_pattern` rule type"""
  tagNamePattern: gh_TagNamePatternParametersInput
  """Parameters used for the `update` rule type"""
  update: gh_UpdateParametersInput
  """Parameters used for the `workflows` rule type"""
  workflows: gh_WorkflowsParametersInput
}

"""Types which can have `RepositoryRule` objects."""
union gh_RuleSource = gh_Organization | gh_Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum gh_SamlDigestAlgorithm {
  """SHA1"""
  SHA1
  """SHA256"""
  SHA256
  """SHA384"""
  SHA384
  """SHA512"""
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum gh_SamlSignatureAlgorithm {
  """RSA-SHA1"""
  RSA_SHA1
  """RSA-SHA256"""
  RSA_SHA256
  """RSA-SHA384"""
  RSA_SHA384
  """RSA-SHA512"""
  RSA_SHA512
}

"""A Saved Reply is text a user can use to reply quickly."""
type gh_SavedReply implements gh_Node {
  """The body of the saved reply."""
  body: String!
  """The saved reply body rendered to HTML."""
  bodyHTML: gh_HTML!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the SavedReply object"""
  id: ID!
  """The title of the saved reply."""
  title: String!
  """The user that saved this reply."""
  user: gh_Actor
}

"""The connection type for SavedReply."""
type gh_SavedReplyConnection {
  """A list of edges."""
  edges: [gh_SavedReplyEdge]
  """A list of nodes."""
  nodes: [gh_SavedReply]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SavedReplyEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SavedReply
}

"""Ordering options for saved reply connections."""
input gh_SavedReplyOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order saved replies by."""
  field: gh_SavedReplyOrderField!
}

"""Properties by which saved reply connections can be ordered."""
enum gh_SavedReplyOrderField {
  """Order saved reply by when they were updated."""
  UPDATED_AT
}

"""The results of a search."""
union gh_SearchResultItem = gh_App | gh_Discussion | gh_Issue | gh_MarketplaceListing | gh_Organization | gh_PullRequest | gh_Repository | gh_User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type gh_SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!
  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!
  """A list of edges."""
  edges: [gh_SearchResultItemEdge]
  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!
  """A list of nodes."""
  nodes: [gh_SearchResultItem]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!
  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!
  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""An edge in a connection."""
type gh_SearchResultItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SearchResultItem
  """Text matches on the result found."""
  textMatches: [gh_TextMatch]
}

"""Represents the individual results of a search."""
enum gh_SearchType {
  """Returns matching discussions in repositories."""
  DISCUSSION
  """Returns results matching issues in repositories."""
  ISSUE
  """Returns results matching repositories."""
  REPOSITORY
  """Returns results matching users and organizations on GitHub."""
  USER
}

"""A GitHub Security Advisory"""
type gh_SecurityAdvisory implements gh_Node {
  """The classification of the advisory"""
  classification: gh_SecurityAdvisoryClassification!
  """The CVSS associated with this advisory"""
  cvss: gh_CVSS!
  """CWEs associated with this Advisory"""
  cwes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CWEConnection!
  """Identifies the primary key from the database."""
  databaseId: Int
  """This is a long plaintext description of the advisory"""
  description: String!
  """The GitHub Security Advisory ID"""
  ghsaId: String!
  """The Node ID of the SecurityAdvisory object"""
  id: ID!
  """A list of identifiers for this advisory"""
  identifiers: [gh_SecurityAdvisoryIdentifier!]!
  """The permalink for the advisory's dependabot alerts page"""
  notificationsPermalink: gh_URI
  """The organization that originated the advisory"""
  origin: String!
  """The permalink for the advisory"""
  permalink: gh_URI
  """When the advisory was published"""
  publishedAt: DateTime!
  """A list of references for this advisory"""
  references: [gh_SecurityAdvisoryReference!]!
  """The severity of the advisory"""
  severity: gh_SecurityAdvisorySeverity!
  """A short plaintext summary of the advisory"""
  summary: String!
  """When the advisory was last updated"""
  updatedAt: DateTime!
  """Vulnerabilities associated with this Advisory"""
  vulnerabilities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """A list of advisory classifications to filter vulnerabilities by."""
    classifications: [gh_SecurityAdvisoryClassification!]
    """An ecosystem to filter vulnerabilities by."""
    ecosystem: gh_SecurityAdvisoryEcosystem
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the returned topics."""
    orderBy: gh_SecurityVulnerabilityOrder = {direction: DESC, field: UPDATED_AT}
    """A package name to filter vulnerabilities by."""
    package: String
    """A list of severities to filter vulnerabilities by."""
    severities: [gh_SecurityAdvisorySeverity!]
  ): gh_SecurityVulnerabilityConnection!
  """When the advisory was withdrawn, if it has been withdrawn"""
  withdrawnAt: DateTime
}

"""Classification of the advisory."""
enum gh_SecurityAdvisoryClassification {
  """Classification of general advisories."""
  GENERAL
  """Classification of malware advisories."""
  MALWARE
}

"""The connection type for SecurityAdvisory."""
type gh_SecurityAdvisoryConnection {
  """A list of edges."""
  edges: [gh_SecurityAdvisoryEdge]
  """A list of nodes."""
  nodes: [gh_SecurityAdvisory]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The possible ecosystems of a security vulnerability's package."""
enum gh_SecurityAdvisoryEcosystem {
  """GitHub Actions"""
  ACTIONS
  """PHP packages hosted at packagist.org"""
  COMPOSER
  """Erlang/Elixir packages hosted at hex.pm"""
  ERLANG
  """Go modules"""
  GO
  """Java artifacts hosted at the Maven central repository"""
  MAVEN
  """JavaScript packages hosted at npmjs.com"""
  NPM
  """.NET packages hosted at the NuGet Gallery"""
  NUGET
  """Python packages hosted at PyPI.org"""
  PIP
  """Dart packages hosted at pub.dev"""
  PUB
  """Ruby gems hosted at RubyGems.org"""
  RUBYGEMS
  """Rust crates"""
  RUST
  """Swift packages"""
  SWIFT
}

"""An edge in a connection."""
type gh_SecurityAdvisoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SecurityAdvisory
}

"""A GitHub Security Advisory Identifier"""
type gh_SecurityAdvisoryIdentifier {
  """The identifier type, e.g. GHSA, CVE"""
  type: String!
  """The identifier"""
  value: String!
}

"""An advisory identifier to filter results on."""
input gh_SecurityAdvisoryIdentifierFilter {
  """The identifier type."""
  type: gh_SecurityAdvisoryIdentifierType!
  """The identifier string. Supports exact or partial matching."""
  value: String!
}

"""Identifier formats available for advisories."""
enum gh_SecurityAdvisoryIdentifierType {
  """Common Vulnerabilities and Exposures Identifier."""
  CVE
  """GitHub Security Advisory ID."""
  GHSA
}

"""Ordering options for security advisory connections"""
input gh_SecurityAdvisoryOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order security advisories by."""
  field: gh_SecurityAdvisoryOrderField!
}

"""Properties by which security advisory connections can be ordered."""
enum gh_SecurityAdvisoryOrderField {
  """Order advisories by publication time"""
  PUBLISHED_AT
  """Order advisories by update time"""
  UPDATED_AT
}

"""An individual package"""
type gh_SecurityAdvisoryPackage {
  """The ecosystem the package belongs to, e.g. RUBYGEMS, NPM"""
  ecosystem: gh_SecurityAdvisoryEcosystem!
  """The package name"""
  name: String!
}

"""An individual package version"""
type gh_SecurityAdvisoryPackageVersion {
  """The package name or version"""
  identifier: String!
}

"""A GitHub Security Advisory Reference"""
type gh_SecurityAdvisoryReference {
  """A publicly accessible reference"""
  url: gh_URI!
}

"""Severity of the vulnerability."""
enum gh_SecurityAdvisorySeverity {
  """Critical."""
  CRITICAL
  """High."""
  HIGH
  """Low."""
  LOW
  """Moderate."""
  MODERATE
}

"""An individual vulnerability within an Advisory"""
type gh_SecurityVulnerability {
  """The Advisory associated with this Vulnerability"""
  advisory: gh_SecurityAdvisory!
  """The first version containing a fix for the vulnerability"""
  firstPatchedVersion: gh_SecurityAdvisoryPackageVersion
  """A description of the vulnerable package"""
  package: gh_SecurityAdvisoryPackage!
  """The severity of the vulnerability within this package"""
  severity: gh_SecurityAdvisorySeverity!
  """When the vulnerability was last updated"""
  updatedAt: DateTime!
  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""The connection type for SecurityVulnerability."""
type gh_SecurityVulnerabilityConnection {
  """A list of edges."""
  edges: [gh_SecurityVulnerabilityEdge]
  """A list of nodes."""
  nodes: [gh_SecurityVulnerability]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SecurityVulnerabilityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SecurityVulnerability
}

"""Ordering options for security vulnerability connections"""
input gh_SecurityVulnerabilityOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order security vulnerabilities by."""
  field: gh_SecurityVulnerabilityOrderField!
}

"""Properties by which security vulnerability connections can be ordered."""
enum gh_SecurityVulnerabilityOrderField {
  """Order vulnerability by update time"""
  UPDATED_AT
}

"""Autogenerated input type of SetEnterpriseIdentityProvider"""
input gh_SetEnterpriseIdentityProviderInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: gh_SamlDigestAlgorithm!
  """The ID of the enterprise on which to set an identity provider."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!
  """The Issuer Entity ID for the SAML identity provider"""
  issuer: String
  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: gh_SamlSignatureAlgorithm!
  """The URL endpoint for the identity provider's SAML SSO."""
  ssoUrl: gh_URI!
}

"""Autogenerated return type of SetEnterpriseIdentityProvider"""
type gh_SetEnterpriseIdentityProviderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The identity provider for the enterprise."""
  identityProvider: gh_EnterpriseIdentityProvider
}

"""Autogenerated input type of SetOrganizationInteractionLimit"""
input gh_SetOrganizationInteractionLimitInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """When this limit should expire."""
  expiry: gh_RepositoryInteractionLimitExpiry
  """The limit to set."""
  limit: gh_RepositoryInteractionLimit!
  """The ID of the organization to set a limit for."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of SetOrganizationInteractionLimit"""
type gh_SetOrganizationInteractionLimitPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The organization that the interaction limit was set for."""
  organization: gh_Organization
}

"""Autogenerated input type of SetRepositoryInteractionLimit"""
input gh_SetRepositoryInteractionLimitInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """When this limit should expire."""
  expiry: gh_RepositoryInteractionLimitExpiry
  """The limit to set."""
  limit: gh_RepositoryInteractionLimit!
  """The ID of the repository to set a limit for."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of SetRepositoryInteractionLimit"""
type gh_SetRepositoryInteractionLimitPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository that the interaction limit was set for."""
  repository: gh_Repository
}

"""Autogenerated input type of SetUserInteractionLimit"""
input gh_SetUserInteractionLimitInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """When this limit should expire."""
  expiry: gh_RepositoryInteractionLimitExpiry
  """The limit to set."""
  limit: gh_RepositoryInteractionLimit!
  """The ID of the user to set a limit for."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""Autogenerated return type of SetUserInteractionLimit"""
type gh_SetUserInteractionLimitPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The user that the interaction limit was set for."""
  user: gh_User
}

"""Represents an S/MIME signature on a Commit or Tag."""
type gh_SmimeSignature implements gh_GitSignature {
  """Email used to sign this object."""
  email: String!
  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!
  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!
  """ASCII-armored signature header from object."""
  signature: String!
  """GitHub user corresponding to the email signing this commit."""
  signer: gh_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: gh_GitSignatureState!
  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""Social media profile associated with a user."""
type gh_SocialAccount {
  """Name of the social media account as it appears on the profile."""
  displayName: String!
  """Software or company that hosts the social media account."""
  provider: gh_SocialAccountProvider!
  """URL of the social media account."""
  url: gh_URI!
}

"""The connection type for SocialAccount."""
type gh_SocialAccountConnection {
  """A list of edges."""
  edges: [gh_SocialAccountEdge]
  """A list of nodes."""
  nodes: [gh_SocialAccount]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SocialAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SocialAccount
}

"""Software or company that hosts social media accounts."""
enum gh_SocialAccountProvider {
  """Social media and networking website."""
  FACEBOOK
  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC
  """Fork of Mastodon with a greater focus on local posting."""
  HOMETOWN
  """Social media website with a focus on photo and video sharing."""
  INSTAGRAM
  """Professional networking website."""
  LINKEDIN
  """Open-source federated microblogging service."""
  MASTODON
  """JavaScript package registry."""
  NPM
  """Social news aggregation and discussion website."""
  REDDIT
  """Live-streaming service."""
  TWITCH
  """Microblogging website."""
  TWITTER
  """Online video platform."""
  YOUTUBE
}

"""Entities that can sponsor others via GitHub Sponsors"""
union gh_Sponsor = gh_Organization | gh_User

"""The connection type for Sponsor."""
type gh_SponsorConnection {
  """A list of edges."""
  edges: [gh_SponsorEdge]
  """A list of nodes."""
  nodes: [gh_Sponsor]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type gh_SponsorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input gh_SponsorOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order sponsor entities by."""
  field: gh_SponsorOrderField!
}

"""Properties by which sponsor connections can be ordered."""
enum gh_SponsorOrderField {
  """Order sponsorable entities by login (username)."""
  LOGIN
  """Order sponsors by their relevance to the viewer."""
  RELEVANCE
}

"""Entities that can sponsor or be sponsored through GitHub Sponsors."""
interface gh_Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!
  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!
  """Whether the given account is sponsoring this user/organization."""
  isSponsoredBy(
    """The target account's login."""
    accountLogin: String!
  ): Boolean!
  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!
  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!
  """List of users and organizations this entity is sponsoring."""
  sponsoring(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: gh_SponsorOrder = {direction: DESC, field: RELEVANCE}
  ): gh_SponsorConnection!
  """List of sponsors for this user or organization."""
  sponsors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for sponsors returned from the connection."""
    orderBy: gh_SponsorOrder = {direction: DESC, field: RELEVANCE}
    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): gh_SponsorConnection!
  """Events involving this sponsorable, such as new sponsorships."""
  sponsorsActivities(
    """Filter activities to only the specified actions."""
    actions: [gh_SponsorsActivityAction!] = []
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false
    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for activity returned from the connection."""
    orderBy: gh_SponsorsActivityOrder = {direction: DESC, field: TIMESTAMP}
    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: gh_SponsorsActivityPeriod = MONTH
    """Filter activities to those that occurred on or after this time."""
    since: DateTime
    """Filter activities to those that occurred before this time."""
    until: DateTime
  ): gh_SponsorsActivityConnection!
  """The GitHub Sponsors listing for this user or organization."""
  sponsorsListing: gh_SponsorsListing
  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): gh_Sponsorship
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): gh_Sponsorship
  """List of sponsorship updates sent from this sponsorable to sponsors."""
  sponsorshipNewsletters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for sponsorship updates returned from the connection."""
    orderBy: gh_SponsorshipNewsletterOrder = {direction: DESC, field: CREATED_AT}
  ): gh_SponsorshipNewsletterConnection!
  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
  """The sponsorships where this user or organization is the funder."""
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """Filter payments to those that occurred on or after this time."""
    since: DateTime
    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []
    """Filter payments to those that occurred before this time."""
    until: DateTime
  ): Int
  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!
  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!
}

"""Entities that can be sponsored via GitHub Sponsors"""
union gh_SponsorableItem = gh_Organization | gh_User

"""The connection type for SponsorableItem."""
type gh_SponsorableItemConnection {
  """A list of edges."""
  edges: [gh_SponsorableItemEdge]
  """A list of nodes."""
  nodes: [gh_SponsorableItem]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SponsorableItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input gh_SponsorableOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order sponsorable entities by."""
  field: gh_SponsorableOrderField!
}

"""Properties by which sponsorable connections can be ordered."""
enum gh_SponsorableOrderField {
  """Order sponsorable entities by login (username)."""
  LOGIN
}

"""An event related to sponsorship activity."""
type gh_SponsorsActivity implements gh_Node {
  """What action this activity indicates took place."""
  action: gh_SponsorsActivityAction!
  """The sponsor's current privacy level."""
  currentPrivacyLevel: gh_SponsorshipPrivacy
  """The Node ID of the SponsorsActivity object"""
  id: ID!
  """The platform that was used to pay for the sponsorship."""
  paymentSource: gh_SponsorshipPaymentSource
  """The tier that the sponsorship used to use, for tier change events."""
  previousSponsorsTier: gh_SponsorsTier
  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: gh_Sponsor
  """The user or organization that is being sponsored, the maintainer."""
  sponsorable: gh_Sponsorable!
  """The associated sponsorship tier."""
  sponsorsTier: gh_SponsorsTier
  """The timestamp of this event."""
  timestamp: DateTime
  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""The possible actions that GitHub Sponsors activities can represent."""
enum gh_SponsorsActivityAction {
  """The activity was cancelling a sponsorship."""
  CANCELLED_SPONSORSHIP
  """The activity was starting a sponsorship."""
  NEW_SPONSORSHIP
  """The activity was scheduling a downgrade or cancellation."""
  PENDING_CHANGE
  """The activity was funds being refunded to the sponsor or GitHub."""
  REFUND
  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED
  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""The connection type for SponsorsActivity."""
type gh_SponsorsActivityConnection {
  """A list of edges."""
  edges: [gh_SponsorsActivityEdge]
  """A list of nodes."""
  nodes: [gh_SponsorsActivity]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SponsorsActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SponsorsActivity
}

"""Ordering options for GitHub Sponsors activity connections."""
input gh_SponsorsActivityOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order activity by."""
  field: gh_SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum gh_SponsorsActivityOrderField {
  """Order activities by when they happened."""
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum gh_SponsorsActivityPeriod {
  """Don't restrict the activity to any date range, include all activity."""
  ALL
  """The previous calendar day."""
  DAY
  """The previous thirty days."""
  MONTH
  """The previous seven days."""
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum gh_SponsorsCountryOrRegionCode {
  """Andorra"""
  AD
  """United Arab Emirates"""
  AE
  """Afghanistan"""
  AF
  """Antigua and Barbuda"""
  AG
  """Anguilla"""
  AI
  """Albania"""
  AL
  """Armenia"""
  AM
  """Angola"""
  AO
  """Antarctica"""
  AQ
  """Argentina"""
  AR
  """American Samoa"""
  AS
  """Austria"""
  AT
  """Australia"""
  AU
  """Aruba"""
  AW
  """Åland"""
  AX
  """Azerbaijan"""
  AZ
  """Bosnia and Herzegovina"""
  BA
  """Barbados"""
  BB
  """Bangladesh"""
  BD
  """Belgium"""
  BE
  """Burkina Faso"""
  BF
  """Bulgaria"""
  BG
  """Bahrain"""
  BH
  """Burundi"""
  BI
  """Benin"""
  BJ
  """Saint Barthélemy"""
  BL
  """Bermuda"""
  BM
  """Brunei Darussalam"""
  BN
  """Bolivia"""
  BO
  """Bonaire, Sint Eustatius and Saba"""
  BQ
  """Brazil"""
  BR
  """Bahamas"""
  BS
  """Bhutan"""
  BT
  """Bouvet Island"""
  BV
  """Botswana"""
  BW
  """Belarus"""
  BY
  """Belize"""
  BZ
  """Canada"""
  CA
  """Cocos (Keeling) Islands"""
  CC
  """Congo (Kinshasa)"""
  CD
  """Central African Republic"""
  CF
  """Congo (Brazzaville)"""
  CG
  """Switzerland"""
  CH
  """Côte d'Ivoire"""
  CI
  """Cook Islands"""
  CK
  """Chile"""
  CL
  """Cameroon"""
  CM
  """China"""
  CN
  """Colombia"""
  CO
  """Costa Rica"""
  CR
  """Cape Verde"""
  CV
  """Curaçao"""
  CW
  """Christmas Island"""
  CX
  """Cyprus"""
  CY
  """Czech Republic"""
  CZ
  """Germany"""
  DE
  """Djibouti"""
  DJ
  """Denmark"""
  DK
  """Dominica"""
  DM
  """Dominican Republic"""
  DO
  """Algeria"""
  DZ
  """Ecuador"""
  EC
  """Estonia"""
  EE
  """Egypt"""
  EG
  """Western Sahara"""
  EH
  """Eritrea"""
  ER
  """Spain"""
  ES
  """Ethiopia"""
  ET
  """Finland"""
  FI
  """Fiji"""
  FJ
  """Falkland Islands"""
  FK
  """Micronesia"""
  FM
  """Faroe Islands"""
  FO
  """France"""
  FR
  """Gabon"""
  GA
  """United Kingdom"""
  GB
  """Grenada"""
  GD
  """Georgia"""
  GE
  """French Guiana"""
  GF
  """Guernsey"""
  GG
  """Ghana"""
  GH
  """Gibraltar"""
  GI
  """Greenland"""
  GL
  """Gambia"""
  GM
  """Guinea"""
  GN
  """Guadeloupe"""
  GP
  """Equatorial Guinea"""
  GQ
  """Greece"""
  GR
  """South Georgia and South Sandwich Islands"""
  GS
  """Guatemala"""
  GT
  """Guam"""
  GU
  """Guinea-Bissau"""
  GW
  """Guyana"""
  GY
  """Hong Kong"""
  HK
  """Heard and McDonald Islands"""
  HM
  """Honduras"""
  HN
  """Croatia"""
  HR
  """Haiti"""
  HT
  """Hungary"""
  HU
  """Indonesia"""
  ID
  """Ireland"""
  IE
  """Israel"""
  IL
  """Isle of Man"""
  IM
  """India"""
  IN
  """British Indian Ocean Territory"""
  IO
  """Iraq"""
  IQ
  """Iran"""
  IR
  """Iceland"""
  IS
  """Italy"""
  IT
  """Jersey"""
  JE
  """Jamaica"""
  JM
  """Jordan"""
  JO
  """Japan"""
  JP
  """Kenya"""
  KE
  """Kyrgyzstan"""
  KG
  """Cambodia"""
  KH
  """Kiribati"""
  KI
  """Comoros"""
  KM
  """Saint Kitts and Nevis"""
  KN
  """Korea, South"""
  KR
  """Kuwait"""
  KW
  """Cayman Islands"""
  KY
  """Kazakhstan"""
  KZ
  """Laos"""
  LA
  """Lebanon"""
  LB
  """Saint Lucia"""
  LC
  """Liechtenstein"""
  LI
  """Sri Lanka"""
  LK
  """Liberia"""
  LR
  """Lesotho"""
  LS
  """Lithuania"""
  LT
  """Luxembourg"""
  LU
  """Latvia"""
  LV
  """Libya"""
  LY
  """Morocco"""
  MA
  """Monaco"""
  MC
  """Moldova"""
  MD
  """Montenegro"""
  ME
  """Saint Martin (French part)"""
  MF
  """Madagascar"""
  MG
  """Marshall Islands"""
  MH
  """Macedonia"""
  MK
  """Mali"""
  ML
  """Myanmar"""
  MM
  """Mongolia"""
  MN
  """Macau"""
  MO
  """Northern Mariana Islands"""
  MP
  """Martinique"""
  MQ
  """Mauritania"""
  MR
  """Montserrat"""
  MS
  """Malta"""
  MT
  """Mauritius"""
  MU
  """Maldives"""
  MV
  """Malawi"""
  MW
  """Mexico"""
  MX
  """Malaysia"""
  MY
  """Mozambique"""
  MZ
  """Namibia"""
  NA
  """New Caledonia"""
  NC
  """Niger"""
  NE
  """Norfolk Island"""
  NF
  """Nigeria"""
  NG
  """Nicaragua"""
  NI
  """Netherlands"""
  NL
  """Norway"""
  NO
  """Nepal"""
  NP
  """Nauru"""
  NR
  """Niue"""
  NU
  """New Zealand"""
  NZ
  """Oman"""
  OM
  """Panama"""
  PA
  """Peru"""
  PE
  """French Polynesia"""
  PF
  """Papua New Guinea"""
  PG
  """Philippines"""
  PH
  """Pakistan"""
  PK
  """Poland"""
  PL
  """Saint Pierre and Miquelon"""
  PM
  """Pitcairn"""
  PN
  """Puerto Rico"""
  PR
  """Palestine"""
  PS
  """Portugal"""
  PT
  """Palau"""
  PW
  """Paraguay"""
  PY
  """Qatar"""
  QA
  """Reunion"""
  RE
  """Romania"""
  RO
  """Serbia"""
  RS
  """Russian Federation"""
  RU
  """Rwanda"""
  RW
  """Saudi Arabia"""
  SA
  """Solomon Islands"""
  SB
  """Seychelles"""
  SC
  """Sudan"""
  SD
  """Sweden"""
  SE
  """Singapore"""
  SG
  """Saint Helena"""
  SH
  """Slovenia"""
  SI
  """Svalbard and Jan Mayen Islands"""
  SJ
  """Slovakia"""
  SK
  """Sierra Leone"""
  SL
  """San Marino"""
  SM
  """Senegal"""
  SN
  """Somalia"""
  SO
  """Suriname"""
  SR
  """South Sudan"""
  SS
  """Sao Tome and Principe"""
  ST
  """El Salvador"""
  SV
  """Sint Maarten (Dutch part)"""
  SX
  """Swaziland"""
  SZ
  """Turks and Caicos Islands"""
  TC
  """Chad"""
  TD
  """French Southern Lands"""
  TF
  """Togo"""
  TG
  """Thailand"""
  TH
  """Tajikistan"""
  TJ
  """Tokelau"""
  TK
  """Timor-Leste"""
  TL
  """Turkmenistan"""
  TM
  """Tunisia"""
  TN
  """Tonga"""
  TO
  """Türkiye"""
  TR
  """Trinidad and Tobago"""
  TT
  """Tuvalu"""
  TV
  """Taiwan"""
  TW
  """Tanzania"""
  TZ
  """Ukraine"""
  UA
  """Uganda"""
  UG
  """United States Minor Outlying Islands"""
  UM
  """United States of America"""
  US
  """Uruguay"""
  UY
  """Uzbekistan"""
  UZ
  """Vatican City"""
  VA
  """Saint Vincent and the Grenadines"""
  VC
  """Venezuela"""
  VE
  """Virgin Islands, British"""
  VG
  """Virgin Islands, U.S."""
  VI
  """Vietnam"""
  VN
  """Vanuatu"""
  VU
  """Wallis and Futuna Islands"""
  WF
  """Samoa"""
  WS
  """Yemen"""
  YE
  """Mayotte"""
  YT
  """South Africa"""
  ZA
  """Zambia"""
  ZM
  """Zimbabwe"""
  ZW
}

"""
A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
"""
type gh_SponsorsGoal {
  """A description of the goal from the maintainer."""
  description: String
  """What the objective of this goal is."""
  kind: gh_SponsorsGoalKind!
  """The percentage representing how complete this goal is, between 0-100."""
  percentComplete: Int!
  """
  What the goal amount is. Represents an amount in USD for monthly sponsorship
  amount goals. Represents a count of unique sponsors for total sponsors count goals.
  """
  targetValue: Int!
  """A brief summary of the kind and target value of this goal."""
  title: String!
}

"""The different kinds of goals a GitHub Sponsors member can have."""
enum gh_SponsorsGoalKind {
  """
  The goal is about getting a certain amount in USD from sponsorships each month.
  """
  MONTHLY_SPONSORSHIP_AMOUNT
  """The goal is about reaching a certain number of sponsors."""
  TOTAL_SPONSORS_COUNT
}

"""A GitHub Sponsors listing."""
type gh_SponsorsListing implements gh_Node {
  """
  The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
  """
  activeGoal: gh_SponsorsGoal
  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: gh_StripeConnectAccount
  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String
  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The HTTP path for the Sponsors dashboard for this Sponsors listing."""
  dashboardResourcePath: gh_URI!
  """The HTTP URL for the Sponsors dashboard for this Sponsors listing."""
  dashboardUrl: gh_URI!
  """The records featured on the GitHub Sponsors profile."""
  featuredItems(
    """The types of featured items to return."""
    featureableTypes: [gh_SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [gh_SponsorsListingFeaturedItem!]!
  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: gh_Organization
  """The full description of the listing."""
  fullDescription: String!
  """The full description of the listing rendered to HTML."""
  fullDescriptionHTML: gh_HTML!
  """The Node ID of the SponsorsListing object"""
  id: ID!
  """Whether this listing is publicly visible."""
  isPublic: Boolean!
  """The listing's full name."""
  name: String!
  """A future date on which this listing is eligible to receive a payout."""
  nextPayoutDate: Date
  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  residenceCountryOrRegion: String
  """The HTTP path for this Sponsors listing."""
  resourcePath: gh_URI!
  """The short description of the listing."""
  shortDescription: String!
  """The short name of the listing."""
  slug: String!
  """
  The entity this listing represents who can be sponsored on GitHub Sponsors.
  """
  sponsorable: gh_Sponsorable!
  """The tiers for this GitHub Sponsors profile."""
  tiers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Sponsors tiers returned from the connection."""
    orderBy: gh_SponsorsTierOrder = {direction: ASC, field: MONTHLY_PRICE_IN_CENTS}
  ): gh_SponsorsTierConnection
  """The HTTP URL for this Sponsors listing."""
  url: gh_URI!
}

"""A record that can be featured on a GitHub Sponsors profile."""
union gh_SponsorsListingFeatureableItem = gh_Repository | gh_User

"""A record that is promoted on a GitHub Sponsors profile."""
type gh_SponsorsListingFeaturedItem implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  description: String
  """The record that is featured on the GitHub Sponsors profile."""
  featureable: gh_SponsorsListingFeatureableItem!
  """The Node ID of the SponsorsListingFeaturedItem object"""
  id: ID!
  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  position: Int!
  """The GitHub Sponsors profile that features this record."""
  sponsorsListing: gh_SponsorsListing!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum gh_SponsorsListingFeaturedItemFeatureableType {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY
  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  USER
}

"""A GitHub Sponsors tier associated with a GitHub Sponsors listing."""
type gh_SponsorsTier implements gh_Node {
  """
  SponsorsTier information only visible to users that can administer the associated Sponsors listing.
  """
  adminInfo: gh_SponsorsTierAdminInfo
  """
  Get a different tier for this tier's maintainer that is at the same frequency
  as this tier but with an equal or lesser cost. Returns the published tier with
  the monthly price closest to this tier's without going over.
  """
  closestLesserValueTier: gh_SponsorsTier
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The description of the tier."""
  description: String!
  """The tier description rendered to HTML"""
  descriptionHTML: gh_HTML!
  """The Node ID of the SponsorsTier object"""
  id: ID!
  """
  Whether this tier was chosen at checkout time by the sponsor rather than
  defined ahead of time by the maintainer who manages the Sponsors listing.
  """
  isCustomAmount: Boolean!
  """Whether this tier is only for use with one-time sponsorships."""
  isOneTime: Boolean!
  """How much this tier costs per month in cents."""
  monthlyPriceInCents: Int!
  """How much this tier costs per month in USD."""
  monthlyPriceInDollars: Int!
  """The name of the tier."""
  name: String!
  """The sponsors listing that this tier belongs to."""
  sponsorsListing: gh_SponsorsListing!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
"""
type gh_SponsorsTierAdminInfo {
  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  isDraft: Boolean!
  """
  Indicates whether this tier is published to the associated GitHub Sponsors
  profile. Published tiers are visible to anyone who can see the GitHub Sponsors
  profile, and are available for use in sponsorships if the GitHub Sponsors
  profile is publicly visible.
  """
  isPublished: Boolean!
  """
  Indicates whether this tier has been retired from the associated GitHub
  Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
  profile and cannot be chosen for new sponsorships. Existing sponsorships may
  still use retired tiers if the sponsor selected the tier before it was retired.
  """
  isRetired: Boolean!
  """The sponsorships using this tier."""
  sponsorships(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    includePrivate: Boolean = false
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
}

"""The connection type for SponsorsTier."""
type gh_SponsorsTierConnection {
  """A list of edges."""
  edges: [gh_SponsorsTierEdge]
  """A list of nodes."""
  nodes: [gh_SponsorsTier]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SponsorsTierEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SponsorsTier
}

"""Ordering options for Sponsors tiers connections."""
input gh_SponsorsTierOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order tiers by."""
  field: gh_SponsorsTierOrderField!
}

"""Properties by which Sponsors tiers connections can be ordered."""
enum gh_SponsorsTierOrderField {
  """Order tiers by creation time."""
  CREATED_AT
  """Order tiers by their monthly price in cents"""
  MONTHLY_PRICE_IN_CENTS
}

"""A sponsorship relationship between a sponsor and a maintainer"""
type gh_Sponsorship implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the Sponsorship object"""
  id: ID!
  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!
  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  isOneTimePayment: Boolean!
  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  isSponsorOptedIntoEmail: Boolean
  """The entity that is being sponsored"""
  maintainer: gh_User! @deprecated(reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.")
  """The platform that was most recently used to pay for the sponsorship."""
  paymentSource: gh_SponsorshipPaymentSource
  """The privacy level for this sponsorship."""
  privacyLevel: gh_SponsorshipPrivacy!
  """
  The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
  """
  sponsor: gh_User @deprecated(reason: "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.")
  """
  The user or organization that is sponsoring, if you have permission to view them.
  """
  sponsorEntity: gh_Sponsor
  """The entity that is being sponsored"""
  sponsorable: gh_Sponsorable!
  """The associated sponsorship tier"""
  tier: gh_SponsorsTier
  """
  Identifies the date and time when the current tier was chosen for this sponsorship.
  """
  tierSelectedAt: DateTime
}

"""The connection type for Sponsorship."""
type gh_SponsorshipConnection {
  """A list of edges."""
  edges: [gh_SponsorshipEdge]
  """A list of nodes."""
  nodes: [gh_Sponsorship]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
  """
  The total amount in cents of all recurring sponsorships in the connection
  whose amount you can view. Does not include one-time sponsorships.
  """
  totalRecurringMonthlyPriceInCents: Int!
  """
  The total amount in USD of all recurring sponsorships in the connection whose
  amount you can view. Does not include one-time sponsorships.
  """
  totalRecurringMonthlyPriceInDollars: Int!
}

"""An edge in a connection."""
type gh_SponsorshipEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Sponsorship
}

"""
An update sent to sponsors of a user or organization on GitHub Sponsors.
"""
type gh_SponsorshipNewsletter implements gh_Node {
  """The author of the newsletter."""
  author: gh_User
  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  body: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the SponsorshipNewsletter object"""
  id: ID!
  """Indicates if the newsletter has been made available to sponsors."""
  isPublished: Boolean!
  """The user or organization this newsletter is from."""
  sponsorable: gh_Sponsorable!
  """The subject of the newsletter, what it's about."""
  subject: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""The connection type for SponsorshipNewsletter."""
type gh_SponsorshipNewsletterConnection {
  """A list of edges."""
  edges: [gh_SponsorshipNewsletterEdge]
  """A list of nodes."""
  nodes: [gh_SponsorshipNewsletter]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SponsorshipNewsletterEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_SponsorshipNewsletter
}

"""Ordering options for sponsorship newsletter connections."""
input gh_SponsorshipNewsletterOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order sponsorship newsletters by."""
  field: gh_SponsorshipNewsletterOrderField!
}

"""Properties by which sponsorship update connections can be ordered."""
enum gh_SponsorshipNewsletterOrderField {
  """Order sponsorship newsletters by when they were created."""
  CREATED_AT
}

"""Ordering options for sponsorship connections."""
input gh_SponsorshipOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order sponsorship by."""
  field: gh_SponsorshipOrderField!
}

"""Properties by which sponsorship connections can be ordered."""
enum gh_SponsorshipOrderField {
  """Order sponsorship by creation time."""
  CREATED_AT
}

"""How payment was made for funding a GitHub Sponsors sponsorship."""
enum gh_SponsorshipPaymentSource {
  """Payment was made through GitHub."""
  GITHUB
  """Payment was made through Patreon."""
  PATREON
}

"""The privacy of a sponsorship"""
enum gh_SponsorshipPrivacy {
  """Private"""
  PRIVATE
  """Public"""
  PUBLIC
}

"""The possible default commit messages for squash merges."""
enum gh_SquashMergeCommitMessage {
  """Default to a blank commit message."""
  BLANK
  """Default to the branch's commit messages."""
  COMMIT_MESSAGES
  """Default to the pull request's body."""
  PR_BODY
}

"""The possible default commit titles for squash merges."""
enum gh_SquashMergeCommitTitle {
  """
  Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  """
  COMMIT_OR_PR_TITLE
  """Default to the pull request's title."""
  PR_TITLE
}

"""Represents an SSH signature on a Commit or Tag."""
type gh_SshSignature implements gh_GitSignature {
  """Email used to sign this object."""
  email: String!
  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!
  """Hex-encoded fingerprint of the key that signed this object."""
  keyFingerprint: String
  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!
  """ASCII-armored signature header from object."""
  signature: String!
  """GitHub user corresponding to the email signing this commit."""
  signer: gh_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: gh_GitSignatureState!
  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""Ways in which star connections can be ordered."""
input gh_StarOrder {
  """The direction in which to order nodes."""
  direction: gh_OrderDirection!
  """The field in which to order nodes by."""
  field: gh_StarOrderField!
}

"""Properties by which star connections can be ordered."""
enum gh_StarOrderField {
  """Allows ordering a list of stars by when they were created."""
  STARRED_AT
}

"""The connection type for User."""
type gh_StargazerConnection {
  """A list of edges."""
  edges: [gh_StargazerEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user that's starred a repository."""
type gh_StargazerEdge {
  """A cursor for use in pagination."""
  cursor: String!
  node: gh_User!
  """Identifies when the item was starred."""
  starredAt: DateTime!
}

"""Things that can be starred."""
interface gh_Starrable {
  """The Node ID of the Starrable object"""
  id: ID!
  """Returns a count of how many stargazers there are on this object"""
  stargazerCount: Int!
  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_StarOrder
  ): gh_StargazerConnection!
  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""The connection type for Repository."""
type gh_StarredRepositoryConnection {
  """A list of edges."""
  edges: [gh_StarredRepositoryEdge]
  """
  Is the list of stars for this user truncated? This is true for users that have many stars.
  """
  isOverLimit: Boolean!
  """A list of nodes."""
  nodes: [gh_Repository]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a starred repository."""
type gh_StarredRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  node: gh_Repository!
  """Identifies when the item was starred."""
  starredAt: DateTime!
}

"""Autogenerated input type of StartOrganizationMigration"""
input gh_StartOrganizationMigrationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The migration source access token."""
  sourceAccessToken: String!
  """The URL of the organization to migrate."""
  sourceOrgUrl: gh_URI!
  """The ID of the enterprise the target organization belongs to."""
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The name of the target organization."""
  targetOrgName: String!
}

"""Autogenerated return type of StartOrganizationMigration"""
type gh_StartOrganizationMigrationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new organization migration."""
  orgMigration: gh_OrganizationMigration
}

"""Autogenerated input type of StartRepositoryMigration"""
input gh_StartRepositoryMigrationInput {
  """The migration source access token."""
  accessToken: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether to continue the migration on error. Defaults to `true`."""
  continueOnError: Boolean
  """The signed URL to access the user-uploaded git archive."""
  gitArchiveUrl: String
  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String
  """Whether to lock the source repository."""
  lockSource: Boolean
  """The signed URL to access the user-uploaded metadata archive."""
  metadataArchiveUrl: String
  """The ID of the organization that will own the imported repository."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
  """The name of the imported repository."""
  repositoryName: String!
  """Whether to skip migrating releases for the repository."""
  skipReleases: Boolean
  """The ID of the migration source."""
  sourceId: ID! @possibleTypes(concreteTypes: ["MigrationSource"])
  """The URL of the source repository."""
  sourceRepositoryUrl: gh_URI
  """The visibility of the imported repository."""
  targetRepoVisibility: String
}

"""Autogenerated return type of StartRepositoryMigration"""
type gh_StartRepositoryMigrationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new repository migration."""
  repositoryMigration: gh_RepositoryMigration
}

"""Represents a commit status."""
type gh_Status implements gh_Node {
  """A list of status contexts and check runs for this commit."""
  combinedContexts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_StatusCheckRollupContextConnection!
  """The commit this status is attached to."""
  commit: gh_Commit
  """Looks up an individual status context by context name."""
  context(
    """The context name."""
    name: String!
  ): gh_StatusContext
  """The individual status contexts for this commit."""
  contexts: [gh_StatusContext!]!
  """The Node ID of the Status object"""
  id: ID!
  """The combined commit status."""
  state: gh_StatusState!
}

"""Required status check"""
type gh_StatusCheckConfiguration {
  """The status check context name that must be present on the commit."""
  context: String!
  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""Required status check"""
input gh_StatusCheckConfigurationInput {
  """The status check context name that must be present on the commit."""
  context: String!
  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""Represents the rollup for both the check runs and status for a commit."""
type gh_StatusCheckRollup implements gh_Node {
  """The commit the status and check runs are attached to."""
  commit: gh_Commit
  """A list of status contexts and check runs for this commit."""
  contexts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_StatusCheckRollupContextConnection!
  """The Node ID of the StatusCheckRollup object"""
  id: ID!
  """The combined status for the commit."""
  state: gh_StatusState!
}

"""Types that can be inside a StatusCheckRollup context."""
union gh_StatusCheckRollupContext = gh_CheckRun | gh_StatusContext

"""The connection type for StatusCheckRollupContext."""
type gh_StatusCheckRollupContextConnection {
  """The number of check runs in this rollup."""
  checkRunCount: Int!
  """Counts of check runs by state."""
  checkRunCountsByState: [gh_CheckRunStateCount!]
  """A list of edges."""
  edges: [gh_StatusCheckRollupContextEdge]
  """A list of nodes."""
  nodes: [gh_StatusCheckRollupContext]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """The number of status contexts in this rollup."""
  statusContextCount: Int!
  """Counts of status contexts by state."""
  statusContextCountsByState: [gh_StatusContextStateCount!]
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_StatusCheckRollupContextEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_StatusCheckRollupContext
}

"""Represents an individual commit status context"""
type gh_StatusContext implements gh_Node & gh_RequirableByPullRequest {
  """
  The avatar of the OAuth application or the user that created the status
  """
  avatarUrl(
    """The size of the resulting square image."""
    size: Int = 40
  ): gh_URI
  """This commit this status context is attached to."""
  commit: gh_Commit
  """The name of this status context."""
  context: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The actor who created this status context."""
  creator: gh_Actor
  """The description for this status context."""
  description: String
  """The Node ID of the StatusContext object"""
  id: ID!
  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """The id of the pull request this is required for"""
    pullRequestId: ID
    """The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
  """The state of this status context."""
  state: gh_StatusState!
  """The URL for this status context."""
  targetUrl: gh_URI
}

"""Represents a count of the state of a status context."""
type gh_StatusContextStateCount {
  """The number of statuses with this state."""
  count: Int!
  """The state of a status context."""
  state: gh_StatusState!
}

"""The possible commit status states."""
enum gh_StatusState {
  """Status is errored."""
  ERROR
  """Status is expected."""
  EXPECTED
  """Status is failing."""
  FAILURE
  """Status is pending."""
  PENDING
  """Status is successful."""
  SUCCESS
}

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type gh_StripeConnectAccount {
  """The account number used to identify this Stripe Connect account."""
  accountId: String!
  """
  The name of the country or region of an external account, such as a bank
  account, tied to the Stripe Connect account. Will only return a value when
  queried by the maintainer of the associated GitHub Sponsors profile
  themselves, or by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String
  """
  The name of the country or region of the Stripe Connect account. Will only
  return a value when queried by the maintainer of the associated GitHub
  Sponsors profile themselves, or by an admin of the sponsorable organization.
  """
  countryOrRegion: String
  """
  Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
  """
  isActive: Boolean!
  """
  The GitHub Sponsors profile associated with this Stripe Connect account.
  """
  sponsorsListing: gh_SponsorsListing!
  """The URL to access this Stripe Connect account on Stripe's website."""
  stripeDashboardUrl: gh_URI!
}

"""Autogenerated input type of SubmitPullRequestReview"""
input gh_SubmitPullRequestReviewInput {
  """The text field to set on the Pull Request Review."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The event to send to the Pull Request Review."""
  event: gh_PullRequestReviewEvent!
  """The Pull Request ID to submit any pending reviews."""
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])
  """The Pull Request Review ID to submit."""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""Autogenerated return type of SubmitPullRequestReview"""
type gh_SubmitPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The submitted pull request review."""
  pullRequestReview: gh_PullRequestReview
}

"""
A pointer to a repository at a specific revision embedded inside another repository.
"""
type gh_Submodule {
  """The branch of the upstream submodule for tracking updates"""
  branch: String
  """The git URL of the submodule repository"""
  gitUrl: gh_URI!
  """The name of the submodule in .gitmodules"""
  name: String!
  """The name of the submodule in .gitmodules (Base64-encoded)"""
  nameRaw: gh_Base64String!
  """The path in the superproject that this submodule is located in"""
  path: String!
  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: gh_Base64String!
  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  subprojectCommitOid: gh_GitObjectID
}

"""The connection type for Submodule."""
type gh_SubmoduleConnection {
  """A list of edges."""
  edges: [gh_SubmoduleEdge]
  """A list of nodes."""
  nodes: [gh_Submodule]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_SubmoduleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Submodule
}

"""Entities that can be subscribed to for web and email notifications."""
interface gh_Subscribable {
  """The Node ID of the Subscribable object"""
  id: ID!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
}

"""Entities that can be subscribed to for web and email notifications."""
interface gh_SubscribableThread {
  """The Node ID of the SubscribableThread object"""
  id: ID!
  """Identifies the viewer's thread subscription form action."""
  viewerThreadSubscriptionFormAction: gh_ThreadSubscriptionFormAction
  """Identifies the viewer's thread subscription status."""
  viewerThreadSubscriptionStatus: gh_ThreadSubscriptionState
}

"""Represents a 'subscribed' event on a given `Subscribable`."""
type gh_SubscribedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the SubscribedEvent object"""
  id: ID!
  """Object referenced by event."""
  subscribable: gh_Subscribable!
}

"""The possible states of a subscription."""
enum gh_SubscriptionState {
  """The User is never notified."""
  IGNORED
  """The User is notified of all conversations."""
  SUBSCRIBED
  """The User is only notified when participating or @mentioned."""
  UNSUBSCRIBED
}

"""
A suggestion to review a pull request based on a user's commit history and review comments.
"""
type gh_SuggestedReviewer {
  """Is this suggestion based on past commits?"""
  isAuthor: Boolean!
  """Is this suggestion based on past review comments?"""
  isCommenter: Boolean!
  """Identifies the user suggested to review the pull request."""
  reviewer: gh_User!
}

"""Represents a Git tag."""
type gh_Tag implements gh_GitObject & gh_Node {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!
  """The HTTP path for this Git object"""
  commitResourcePath: gh_URI!
  """The HTTP URL for this Git object"""
  commitUrl: gh_URI!
  """The Node ID of the Tag object"""
  id: ID!
  """The Git tag message."""
  message: String
  """The Git tag name."""
  name: String!
  """The Git object ID"""
  oid: gh_GitObjectID!
  """The Repository the Git object belongs to"""
  repository: gh_Repository!
  """Details about the tag author."""
  tagger: gh_GitActor
  """The Git object the tag points to."""
  target: gh_GitObject!
}

"""Parameters to be used for the tag_name_pattern rule"""
type gh_TagNamePatternParameters {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean!
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""Parameters to be used for the tag_name_pattern rule"""
input gh_TagNamePatternParametersInput {
  """How this rule will appear to users."""
  name: String
  """If true, the rule will fail if the pattern matches."""
  negate: Boolean
  """The operator to use for matching."""
  operator: String!
  """The pattern to match with."""
  pattern: String!
}

"""A team of users in an organization."""
type gh_Team implements gh_MemberStatusable & gh_Node & gh_Subscribable {
  """A list of teams that are ancestors of this team."""
  ancestors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_TeamConnection!
  """A URL pointing to the team's avatar."""
  avatarUrl(
    """The size in pixels of the resulting square image."""
    size: Int = 400
  ): gh_URI
  """List of child teams belonging to this team"""
  childTeams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Whether to list immediate child teams or all descendant child teams."""
    immediateOnly: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_TeamOrder
    """User logins to filter by"""
    userLogins: [String!]
  ): gh_TeamConnection!
  """The slug corresponding to the organization and team."""
  combinedSlug: String!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The description of the team."""
  description: String
  """Find a team discussion by its number."""
  discussion(
    """The sequence number of the discussion to find."""
    number: Int!
  ): gh_TeamDiscussion
  """A list of team discussions."""
  discussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If provided, filters discussions according to whether or not they are pinned.
    """
    isPinned: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_TeamDiscussionOrder
  ): gh_TeamDiscussionConnection!
  """The HTTP path for team discussions"""
  discussionsResourcePath: gh_URI!
  """The HTTP URL for team discussions"""
  discussionsUrl: gh_URI!
  """The HTTP path for editing this team"""
  editTeamResourcePath: gh_URI!
  """The HTTP URL for editing this team"""
  editTeamUrl: gh_URI!
  """The Node ID of the Team object"""
  id: ID!
  """A list of pending invitations for users to this team"""
  invitations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_OrganizationInvitationConnection
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for user statuses returned from the connection."""
    orderBy: gh_UserStatusOrder = {direction: DESC, field: UPDATED_AT}
  ): gh_UserStatusConnection!
  """A list of users who are members of this team."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter by membership type"""
    membership: gh_TeamMembershipType = ALL
    """Order for the connection."""
    orderBy: gh_TeamMemberOrder
    """The search string to look for."""
    query: String
    """Filter by team member role"""
    role: gh_TeamMemberRole
  ): gh_TeamMemberConnection!
  """The HTTP path for the team' members"""
  membersResourcePath: gh_URI!
  """The HTTP URL for the team' members"""
  membersUrl: gh_URI!
  """The name of the team."""
  name: String!
  """The HTTP path creating a new team"""
  newTeamResourcePath: gh_URI!
  """The HTTP URL creating a new team"""
  newTeamUrl: gh_URI!
  """The notification setting that the team has set."""
  notificationSetting: gh_TeamNotificationSetting!
  """The organization that owns this team."""
  organization: gh_Organization!
  """The parent team of the team."""
  parentTeam: gh_Team
  """The level of privacy the team has."""
  privacy: gh_TeamPrivacy!
  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """The Project number."""
    number: Int!
  ): gh_ProjectV2
  """List of projects this team has collaborator access to."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filtering options for projects returned from this connection"""
    filterBy: gh_ProjectV2Filters = {}
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """The query to search projects by."""
    query: String = ""
  ): gh_ProjectV2Connection!
  """A list of repositories this team has access to."""
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for the connection."""
    orderBy: gh_TeamRepositoryOrder
    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): gh_TeamRepositoryConnection!
  """The HTTP path for this team's repositories"""
  repositoriesResourcePath: gh_URI!
  """The HTTP URL for this team's repositories"""
  repositoriesUrl: gh_URI!
  """The HTTP path for this team"""
  resourcePath: gh_URI!
  """What algorithm is used for review assignment for this team"""
  reviewRequestDelegationAlgorithm: gh_TeamReviewAssignmentAlgorithm @preview(toggledBy: "stone-crop-preview")
  """True if review assignment is enabled for this team"""
  reviewRequestDelegationEnabled: Boolean! @preview(toggledBy: "stone-crop-preview")
  """How many team members are required for review assignment for this team"""
  reviewRequestDelegationMemberCount: Int @preview(toggledBy: "stone-crop-preview")
  """
  When assigning team members via delegation, whether the entire team should be notified as well.
  """
  reviewRequestDelegationNotifyTeam: Boolean! @preview(toggledBy: "stone-crop-preview")
  """The slug corresponding to the team."""
  slug: String!
  """The HTTP path for this team's teams"""
  teamsResourcePath: gh_URI!
  """The HTTP URL for this team's teams"""
  teamsUrl: gh_URI!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this team"""
  url: gh_URI!
  """Team is adminable by the viewer."""
  viewerCanAdminister: Boolean!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
}

"""Audit log entry for a team.add_member event."""
type gh_TeamAddMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_TeamAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the TeamAddMemberAuditEntry object"""
  id: ID!
  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a team.add_repository event."""
type gh_TeamAddRepositoryAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData & gh_TeamAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the TeamAddRepositoryAuditEntry object"""
  id: ID!
  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Metadata for an audit entry with action team.*"""
interface gh_TeamAuditEntryData {
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
}

"""Audit log entry for a team.change_parent_team event."""
type gh_TeamChangeParentTeamAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_TeamAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the TeamChangeParentTeamAuditEntry object"""
  id: ID!
  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The new parent team."""
  parentTeam: gh_Team
  """The name of the new parent team"""
  parentTeamName: String
  """The name of the former parent team"""
  parentTeamNameWas: String
  """The HTTP path for the parent team"""
  parentTeamResourcePath: gh_URI
  """The HTTP URL for the parent team"""
  parentTeamUrl: gh_URI
  """The former parent team."""
  parentTeamWas: gh_Team
  """The HTTP path for the previous parent team"""
  parentTeamWasResourcePath: gh_URI
  """The HTTP URL for the previous parent team"""
  parentTeamWasUrl: gh_URI
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The connection type for Team."""
type gh_TeamConnection {
  """A list of edges."""
  edges: [gh_TeamEdge]
  """A list of nodes."""
  nodes: [gh_Team]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A team discussion."""
type gh_TeamDiscussion implements gh_Comment & gh_Deletable & gh_Node & gh_Reactable & gh_Subscribable & gh_UniformResourceLocatable & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the discussion's team."""
  authorAssociation: gh_CommentAuthorAssociation! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The body as Markdown."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """Identifies the discussion body hash."""
  bodyVersion: String! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """A list of comments on this discussion."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    When provided, filters the connection such that results begin with the comment with this number.
    """
    fromComment: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_TeamDiscussionCommentOrder
  ): gh_TeamDiscussionCommentConnection! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The HTTP path for discussion comments"""
  commentsResourcePath: gh_URI! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The HTTP URL for discussion comments"""
  commentsUrl: gh_URI! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the TeamDiscussion object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """Whether or not the discussion is pinned."""
  isPinned: Boolean! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """Identifies the discussion within its team."""
  number: Int! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The HTTP path for this discussion"""
  resourcePath: gh_URI! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The team that defines the context of this discussion."""
  team: gh_Team! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The title of the discussion"""
  title: String! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this discussion"""
  url: gh_URI! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Whether or not the current viewer can pin this discussion."""
  viewerCanPin: Boolean! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: gh_SubscriptionState
}

"""A comment on a team discussion."""
type gh_TeamDiscussionComment implements gh_Comment & gh_Deletable & gh_Node & gh_Reactable & gh_UniformResourceLocatable & gh_Updatable & gh_UpdatableComment {
  """The actor who authored the comment."""
  author: gh_Actor
  """Author's association with the comment's team."""
  authorAssociation: gh_CommentAuthorAssociation! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The body as Markdown."""
  body: String!
  """The body rendered to HTML."""
  bodyHTML: gh_HTML!
  """The body rendered to text."""
  bodyText: String!
  """The current version of the body content."""
  bodyVersion: String! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The discussion this comment is about."""
  discussion: gh_TeamDiscussion! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """The actor who edited the comment."""
  editor: gh_Actor
  """The Node ID of the TeamDiscussionComment object"""
  id: ID!
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!
  """The moment the editor made the last edit"""
  lastEditedAt: DateTime
  """Identifies the comment number."""
  number: Int! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Identifies when the comment was published at."""
  publishedAt: DateTime
  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [gh_ReactionGroup!]
  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Allows filtering Reactions by emoji."""
    content: gh_ReactionContent
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Allows specifying the order in which reactions are returned."""
    orderBy: gh_ReactionOrder
  ): gh_ReactionConnection!
  """The HTTP path for this comment"""
  resourcePath: gh_URI! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this comment"""
  url: gh_URI! @deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserContentEditConnection
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
  """Can user react to this subject"""
  viewerCanReact: Boolean!
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for TeamDiscussionComment."""
type gh_TeamDiscussionCommentConnection {
  """A list of edges."""
  edges: [gh_TeamDiscussionCommentEdge]
  """A list of nodes."""
  nodes: [gh_TeamDiscussionComment]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_TeamDiscussionCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_TeamDiscussionComment
}

"""Ways in which team discussion comment connections can be ordered."""
input gh_TeamDiscussionCommentOrder {
  """The direction in which to order nodes."""
  direction: gh_OrderDirection!
  """The field by which to order nodes."""
  field: gh_TeamDiscussionCommentOrderField!
}

"""
Properties by which team discussion comment connections can be ordered.
"""
enum gh_TeamDiscussionCommentOrderField {
  """
  Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
  """
  NUMBER
}

"""The connection type for TeamDiscussion."""
type gh_TeamDiscussionConnection {
  """A list of edges."""
  edges: [gh_TeamDiscussionEdge]
  """A list of nodes."""
  nodes: [gh_TeamDiscussion]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_TeamDiscussionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_TeamDiscussion
}

"""Ways in which team discussion connections can be ordered."""
input gh_TeamDiscussionOrder {
  """The direction in which to order nodes."""
  direction: gh_OrderDirection!
  """The field by which to order nodes."""
  field: gh_TeamDiscussionOrderField!
}

"""Properties by which team discussion connections can be ordered."""
enum gh_TeamDiscussionOrderField {
  """Allows chronological ordering of team discussions."""
  CREATED_AT
}

"""An edge in a connection."""
type gh_TeamEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_Team
}

"""The connection type for User."""
type gh_TeamMemberConnection {
  """A list of edges."""
  edges: [gh_TeamMemberEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user who is a member of a team."""
type gh_TeamMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The HTTP path to the organization's member access page."""
  memberAccessResourcePath: gh_URI!
  """The HTTP URL to the organization's member access page."""
  memberAccessUrl: gh_URI!
  node: gh_User!
  """The role the member has on the team."""
  role: gh_TeamMemberRole!
}

"""Ordering options for team member connections"""
input gh_TeamMemberOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order team members by."""
  field: gh_TeamMemberOrderField!
}

"""Properties by which team member connections can be ordered."""
enum gh_TeamMemberOrderField {
  """Order team members by creation time"""
  CREATED_AT
  """Order team members by login"""
  LOGIN
}

"""The possible team member roles; either 'maintainer' or 'member'."""
enum gh_TeamMemberRole {
  """A team maintainer has permission to add and remove team members."""
  MAINTAINER
  """A team member has no administrative permissions on the team."""
  MEMBER
}

"""
Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
"""
enum gh_TeamMembershipType {
  """Includes immediate and child team members for the team."""
  ALL
  """Includes only child team members for the team."""
  CHILD_TEAM
  """Includes only immediate members of the team."""
  IMMEDIATE
}

"""The possible team notification values."""
enum gh_TeamNotificationSetting {
  """No one will receive notifications."""
  NOTIFICATIONS_DISABLED
  """Everyone will receive notifications when the team is @mentioned."""
  NOTIFICATIONS_ENABLED
}

"""Ways in which team connections can be ordered."""
input gh_TeamOrder {
  """The direction in which to order nodes."""
  direction: gh_OrderDirection!
  """The field in which to order nodes by."""
  field: gh_TeamOrderField!
}

"""Properties by which team connections can be ordered."""
enum gh_TeamOrderField {
  """Allows ordering a list of teams by name."""
  NAME
}

"""The possible team privacy values."""
enum gh_TeamPrivacy {
  """A secret team can only be seen by its members."""
  SECRET
  """
  A visible team can be seen and @mentioned by every member of the organization.
  """
  VISIBLE
}

"""Audit log entry for a team.remove_member event."""
type gh_TeamRemoveMemberAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_TeamAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the TeamRemoveMemberAuditEntry object"""
  id: ID!
  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""Audit log entry for a team.remove_repository event."""
type gh_TeamRemoveRepositoryAuditEntry implements gh_AuditEntry & gh_Node & gh_OrganizationAuditEntryData & gh_RepositoryAuditEntryData & gh_TeamAuditEntryData {
  """The action name"""
  action: String!
  """The user who initiated the action"""
  actor: gh_AuditEntryActor
  """The IP address of the actor"""
  actorIp: String
  """A readable representation of the actor's location"""
  actorLocation: gh_ActorLocation
  """The username of the user who initiated the action"""
  actorLogin: String
  """The HTTP path for the actor."""
  actorResourcePath: gh_URI
  """The HTTP URL for the actor."""
  actorUrl: gh_URI
  """The time the action was initiated"""
  createdAt: gh_PreciseDateTime!
  """The Node ID of the TeamRemoveRepositoryAuditEntry object"""
  id: ID!
  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean
  """The corresponding operation type for the action"""
  operationType: gh_OperationType
  """The Organization associated with the Audit Entry."""
  organization: gh_Organization
  """The name of the Organization."""
  organizationName: String
  """The HTTP path for the organization"""
  organizationResourcePath: gh_URI
  """The HTTP URL for the organization"""
  organizationUrl: gh_URI
  """The repository associated with the action"""
  repository: gh_Repository
  """The name of the repository"""
  repositoryName: String
  """The HTTP path for the repository"""
  repositoryResourcePath: gh_URI
  """The HTTP URL for the repository"""
  repositoryUrl: gh_URI
  """The team associated with the action"""
  team: gh_Team
  """The name of the team"""
  teamName: String
  """The HTTP path for this team"""
  teamResourcePath: gh_URI
  """The HTTP URL for this team"""
  teamUrl: gh_URI
  """The user affected by the action"""
  user: gh_User
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String
  """The HTTP path for the user."""
  userResourcePath: gh_URI
  """The HTTP URL for the user."""
  userUrl: gh_URI
}

"""The connection type for Repository."""
type gh_TeamRepositoryConnection {
  """A list of edges."""
  edges: [gh_TeamRepositoryEdge]
  """A list of nodes."""
  nodes: [gh_Repository]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a team repository."""
type gh_TeamRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  node: gh_Repository!
  """The permission level the team has on the repository"""
  permission: gh_RepositoryPermission!
}

"""Ordering options for team repository connections"""
input gh_TeamRepositoryOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order repositories by."""
  field: gh_TeamRepositoryOrderField!
}

"""Properties by which team repository connections can be ordered."""
enum gh_TeamRepositoryOrderField {
  """Order repositories by creation time"""
  CREATED_AT
  """Order repositories by name"""
  NAME
  """Order repositories by permission"""
  PERMISSION
  """Order repositories by push time"""
  PUSHED_AT
  """Order repositories by number of stargazers"""
  STARGAZERS
  """Order repositories by update time"""
  UPDATED_AT
}

"""The possible team review assignment algorithms"""
enum gh_TeamReviewAssignmentAlgorithm @preview(toggledBy: "stone-crop-preview") {
  """Balance review load across the entire team"""
  LOAD_BALANCE
  """Alternate reviews between each team member"""
  ROUND_ROBIN
}

"""The role of a user on a team."""
enum gh_TeamRole {
  """User has admin rights on the team."""
  ADMIN
  """User is a member of the team."""
  MEMBER
}

"""A text match within a search result."""
type gh_TextMatch {
  """The specific text fragment within the property matched on."""
  fragment: String!
  """Highlights within the matched fragment."""
  highlights: [gh_TextMatchHighlight!]!
  """The property matched on."""
  property: String!
}

"""Represents a single highlight in a search result match."""
type gh_TextMatchHighlight {
  """The indice in the fragment where the matched text begins."""
  beginIndice: Int!
  """The indice in the fragment where the matched text ends."""
  endIndice: Int!
  """The text matched."""
  text: String!
}

"""The possible states of a thread subscription form action"""
enum gh_ThreadSubscriptionFormAction {
  """The User cannot subscribe or unsubscribe to the thread"""
  NONE
  """The User can subscribe to the thread"""
  SUBSCRIBE
  """The User can unsubscribe to the thread"""
  UNSUBSCRIBE
}

"""The possible states of a subscription."""
enum gh_ThreadSubscriptionState {
  """The subscription status is currently disabled."""
  DISABLED
  """The User is never notified because they are ignoring the list"""
  IGNORING_LIST
  """The User is never notified because they are ignoring the thread"""
  IGNORING_THREAD
  """The User is not recieving notifications from this thread"""
  NONE
  """The User is notified becuase they are watching the list"""
  SUBSCRIBED_TO_LIST
  """The User is notified because they are subscribed to the thread"""
  SUBSCRIBED_TO_THREAD
  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS
  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE
  """The subscription status is currently unavailable."""
  UNAVAILABLE
}

"""A topic aggregates entities that are related to a subject."""
type gh_Topic implements gh_Node & gh_Starrable {
  """The Node ID of the Topic object"""
  id: ID!
  """The topic's name."""
  name: String!
  """
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first. Returns up to 10 Topics.
  """
  relatedTopics(
    """How many topics to return."""
    first: Int = 3
  ): [gh_Topic!]!
  """A list of repositories."""
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [gh_RepositoryAffiliation]
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [gh_RepositoryAffiliation] = [OWNER, COLLABORATOR]
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false
  ): gh_RepositoryConnection!
  """Returns a count of how many stargazers there are on this object"""
  stargazerCount: Int!
  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_StarOrder
  ): gh_StargazerConnection!
  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""Metadata for an audit entry with a topic."""
interface gh_TopicAuditEntryData {
  """The name of the topic added to the repository"""
  topic: gh_Topic
  """The name of the topic added to the repository"""
  topicName: String
}

"""Reason that the suggested topic is declined."""
enum gh_TopicSuggestionDeclineReason {
  """The suggested topic is not relevant to the repository."""
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
  """The viewer does not like the suggested topic."""
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
  """The suggested topic is too general for the repository."""
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
  """
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""The possible states of a tracked issue."""
enum gh_TrackedIssueStates {
  """The tracked issue is closed"""
  CLOSED
  """The tracked issue is open"""
  OPEN
}

"""Autogenerated input type of TransferEnterpriseOrganization"""
input gh_TransferEnterpriseOrganizationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise where the organization should be transferred."""
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The ID of the organization to transfer."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of TransferEnterpriseOrganization"""
type gh_TransferEnterpriseOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The organization for which a transfer was initiated."""
  organization: gh_Organization
}

"""Autogenerated input type of TransferIssue"""
input gh_TransferIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false
  """The Node ID of the issue to be transferred"""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
  """The Node ID of the repository the issue should be transferred to"""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of TransferIssue"""
type gh_TransferIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue that was transferred"""
  issue: gh_Issue
}

"""Represents a 'transferred' event on a given issue or pull request."""
type gh_TransferredEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The repository this came from"""
  fromRepository: gh_Repository
  """The Node ID of the TransferredEvent object"""
  id: ID!
  """Identifies the issue associated with the event."""
  issue: gh_Issue!
}

"""Represents a Git tree."""
type gh_Tree implements gh_GitObject & gh_Node {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!
  """The HTTP path for this Git object"""
  commitResourcePath: gh_URI!
  """The HTTP URL for this Git object"""
  commitUrl: gh_URI!
  """A list of tree entries."""
  entries: [gh_TreeEntry!]
  """The Node ID of the Tree object"""
  id: ID!
  """The Git object ID"""
  oid: gh_GitObjectID!
  """The Repository the Git object belongs to"""
  repository: gh_Repository!
}

"""Represents a Git tree entry."""
type gh_TreeEntry {
  """The extension of the file"""
  extension: String
  """Whether or not this tree entry is generated"""
  isGenerated: Boolean!
  """The programming language this file is written in."""
  language: gh_Language
  """Number of lines in the file."""
  lineCount: Int
  """Entry file mode."""
  mode: Int!
  """Entry file name."""
  name: String!
  """Entry file name. (Base64-encoded)"""
  nameRaw: gh_Base64String!
  """Entry file object."""
  object: gh_GitObject
  """Entry file Git object ID."""
  oid: gh_GitObjectID!
  """The full path of the file."""
  path: String
  """The full path of the file. (Base64-encoded)"""
  pathRaw: gh_Base64String
  """The Repository the tree entry belongs to"""
  repository: gh_Repository!
  """Entry byte size"""
  size: Int!
  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  submodule: gh_Submodule
  """Entry file type."""
  type: String!
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar gh_URI

"""Autogenerated input type of UnarchiveProjectV2Item"""
input gh_UnarchiveProjectV2ItemInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the ProjectV2Item to unarchive."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """The ID of the Project to archive the item from."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of UnarchiveProjectV2Item"""
type gh_UnarchiveProjectV2ItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item unarchived from the project."""
  item: gh_ProjectV2Item
}

"""Autogenerated input type of UnarchiveRepository"""
input gh_UnarchiveRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the repository to unarchive."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of UnarchiveRepository"""
type gh_UnarchiveRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository that was unarchived."""
  repository: gh_Repository
}

"""Represents an 'unassigned' event on any assignable object."""
type gh_UnassignedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the assignable associated with the event."""
  assignable: gh_Assignable!
  """Identifies the user or mannequin that was unassigned."""
  assignee: gh_Assignee
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the UnassignedEvent object"""
  id: ID!
  """Identifies the subject (user) who was unassigned."""
  user: gh_User @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""Autogenerated input type of UnfollowOrganization"""
input gh_UnfollowOrganizationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the organization to unfollow."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""Autogenerated return type of UnfollowOrganization"""
type gh_UnfollowOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The organization that was unfollowed."""
  organization: gh_Organization
}

"""Autogenerated input type of UnfollowUser"""
input gh_UnfollowUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the user to unfollow."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""Autogenerated return type of UnfollowUser"""
type gh_UnfollowUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The user that was unfollowed."""
  user: gh_User
}

"""Represents a type that can be retrieved by a URL."""
interface gh_UniformResourceLocatable {
  """The HTML path to this resource."""
  resourcePath: gh_URI!
  """The URL to this resource."""
  url: gh_URI!
}

"""Represents an unknown signature on a Commit or Tag."""
type gh_UnknownSignature implements gh_GitSignature {
  """Email used to sign this object."""
  email: String!
  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!
  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!
  """ASCII-armored signature header from object."""
  signature: String!
  """GitHub user corresponding to the email signing this commit."""
  signer: gh_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: gh_GitSignatureState!
  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""Represents an 'unlabeled' event on a given issue or pull request."""
type gh_UnlabeledEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the UnlabeledEvent object"""
  id: ID!
  """Identifies the label associated with the 'unlabeled' event."""
  label: gh_Label!
  """Identifies the `Labelable` associated with the event."""
  labelable: gh_Labelable!
}

"""Autogenerated input type of UnlinkProjectV2FromRepository"""
input gh_UnlinkProjectV2FromRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the project to unlink from the repository."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """The ID of the repository to unlink from the project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of UnlinkProjectV2FromRepository"""
type gh_UnlinkProjectV2FromRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository the project is no longer linked to."""
  repository: gh_Repository
}

"""Autogenerated input type of UnlinkProjectV2FromTeam"""
input gh_UnlinkProjectV2FromTeamInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the project to unlink from the team."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """The ID of the team to unlink from the project."""
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""Autogenerated return type of UnlinkProjectV2FromTeam"""
type gh_UnlinkProjectV2FromTeamPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The team the project is unlinked from"""
  team: gh_Team
}

"""Autogenerated input type of UnlinkRepositoryFromProject"""
input gh_UnlinkRepositoryFromProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Project linked to the Repository."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
  """The ID of the Repository linked to the Project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of UnlinkRepositoryFromProject"""
type gh_UnlinkRepositoryFromProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The linked Project."""
  project: gh_Project
  """The linked Repository."""
  repository: gh_Repository
}

"""Autogenerated input type of UnlockLockable"""
input gh_UnlockLockableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the item to be unlocked."""
  lockableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Lockable")
}

"""Autogenerated return type of UnlockLockable"""
type gh_UnlockLockablePayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item that was unlocked."""
  unlockedRecord: gh_Lockable
}

"""Represents an 'unlocked' event on a given issue or pull request."""
type gh_UnlockedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the UnlockedEvent object"""
  id: ID!
  """Object that was unlocked."""
  lockable: gh_Lockable!
}

"""Autogenerated input type of UnmarkDiscussionCommentAsAnswer"""
input gh_UnmarkDiscussionCommentAsAnswerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion comment to unmark as an answer."""
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""Autogenerated return type of UnmarkDiscussionCommentAsAnswer"""
type gh_UnmarkDiscussionCommentAsAnswerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The discussion that includes the comment."""
  discussion: gh_Discussion
}

"""Autogenerated input type of UnmarkFileAsViewed"""
input gh_UnmarkFileAsViewedInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The path of the file to mark as unviewed"""
  path: String!
  """The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""Autogenerated return type of UnmarkFileAsViewed"""
type gh_UnmarkFileAsViewedPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated pull request."""
  pullRequest: gh_PullRequest
}

"""Autogenerated input type of UnmarkIssueAsDuplicate"""
input gh_UnmarkIssueAsDuplicateInput {
  """
  ID of the issue or pull request currently considered canonical/authoritative/original.
  """
  canonicalId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the issue or pull request currently marked as a duplicate."""
  duplicateId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""Autogenerated return type of UnmarkIssueAsDuplicate"""
type gh_UnmarkIssueAsDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue or pull request that was marked as a duplicate."""
  duplicate: gh_IssueOrPullRequest
}

"""Autogenerated input type of UnmarkProjectV2AsTemplate"""
input gh_UnmarkProjectV2AsTemplateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Project to unmark as a template."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of UnmarkProjectV2AsTemplate"""
type gh_UnmarkProjectV2AsTemplatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The project."""
  projectV2: gh_ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type gh_UnmarkedAsDuplicateEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: gh_IssueOrPullRequest
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: gh_IssueOrPullRequest
  """The Node ID of the UnmarkedAsDuplicateEvent object"""
  id: ID!
  """Canonical and duplicate belong to different repositories."""
  isCrossRepository: Boolean!
}

"""Autogenerated input type of UnminimizeComment"""
input gh_UnminimizeCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: ["CommitComment", "DiscussionComment", "GistComment", "IssueComment", "PullRequestReview", "PullRequestReviewComment"], abstractType: "Minimizable")
}

"""Autogenerated return type of UnminimizeComment"""
type gh_UnminimizeCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The comment that was unminimized."""
  unminimizedComment: gh_Minimizable
}

"""Autogenerated input type of UnpinIssue"""
input gh_UnpinIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the issue to be unpinned"""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""Autogenerated return type of UnpinIssue"""
type gh_UnpinIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue that was unpinned"""
  issue: gh_Issue
}

"""Represents an 'unpinned' event on a given issue or pull request."""
type gh_UnpinnedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the UnpinnedEvent object"""
  id: ID!
  """Identifies the issue associated with the event."""
  issue: gh_Issue!
}

"""Autogenerated input type of UnresolveReviewThread"""
input gh_UnresolveReviewThreadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the thread to unresolve"""
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""Autogenerated return type of UnresolveReviewThread"""
type gh_UnresolveReviewThreadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The thread to resolve."""
  thread: gh_PullRequestReviewThread
}

"""Autogenerated input type of UnsubscribeFromNotifications"""
input gh_UnsubscribeFromNotificationsInput @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The NotificationThread IDs of the objects to unsubscribe from."""
  ids: [ID!]! @possibleTypes(concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"], abstractType: "Subscribable")
}

"""Autogenerated return type of UnsubscribeFromNotifications"""
type gh_UnsubscribeFromNotificationsPayload @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Did the operation succeed?"""
  success: Boolean
}

"""Represents an 'unsubscribed' event on a given `Subscribable`."""
type gh_UnsubscribedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the UnsubscribedEvent object"""
  id: ID!
  """Object referenced by event."""
  subscribable: gh_Subscribable!
}

"""Entities that can be updated."""
interface gh_Updatable {
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
}

"""Comments that can be updated."""
interface gh_UpdatableComment {
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [gh_CommentCannotUpdateReason!]!
}

"""Autogenerated input type of UpdateBranchProtectionRule"""
input gh_UpdateBranchProtectionRuleInput {
  """Can this branch be deleted."""
  allowsDeletions: Boolean
  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean
  """Is branch creation a protected operation."""
  blocksCreations: Boolean
  """The global relay id of the branch protection rule to be updated."""
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])
  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]
  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean
  """Can admins override branch protection."""
  isAdminEnforced: Boolean
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean
  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean
  """The glob-like pattern used to determine matching branches."""
  pattern: String
  """A list of User, Team, or App IDs allowed to push to matching branches."""
  pushActorIds: [ID!]
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean
  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int
  """The list of required deployment environments"""
  requiredDeploymentEnvironments: [String!]
  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]
  """The list of required status checks"""
  requiredStatusChecks: [gh_RequiredStatusCheckInput!]
  """Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean
  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean
  """Are commits required to be signed."""
  requiresCommitSignatures: Boolean
  """Are conversations required to be resolved before merging."""
  requiresConversationResolution: Boolean
  """Are successful deployments required before merging."""
  requiresDeployments: Boolean
  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean
  """Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean
  """Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean
  """Is pushing to matching branches restricted."""
  restrictsPushes: Boolean
  """Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean
  """
  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""Autogenerated return type of UpdateBranchProtectionRule"""
type gh_UpdateBranchProtectionRulePayload {
  """The newly created BranchProtectionRule."""
  branchProtectionRule: gh_BranchProtectionRule
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UpdateCheckRun"""
input gh_UpdateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [gh_CheckRunAction!]
  """The node of the check."""
  checkRunId: ID! @possibleTypes(concreteTypes: ["CheckRun"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The time that the check run finished."""
  completedAt: DateTime
  """The final conclusion of the check."""
  conclusion: gh_CheckConclusionState
  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: gh_URI
  """A reference for the run on the integrator's system."""
  externalId: String
  """The name of the check."""
  name: String
  """Descriptive details about the run."""
  output: gh_CheckRunOutput
  """The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """The time that the check run began."""
  startedAt: DateTime
  """The current status."""
  status: gh_RequestableCheckStatusState
}

"""Autogenerated return type of UpdateCheckRun"""
type gh_UpdateCheckRunPayload {
  """The updated check run."""
  checkRun: gh_CheckRun
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UpdateCheckSuitePreferences"""
input gh_UpdateCheckSuitePreferencesInput {
  """The check suite preferences to modify."""
  autoTriggerPreferences: [gh_CheckSuiteAutoTriggerPreference!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of UpdateCheckSuitePreferences"""
type gh_UpdateCheckSuitePreferencesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated repository."""
  repository: gh_Repository
}

"""Autogenerated input type of UpdateDiscussionComment"""
input gh_UpdateDiscussionCommentInput {
  """The new contents of the comment body."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion comment to update."""
  commentId: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""Autogenerated return type of UpdateDiscussionComment"""
type gh_UpdateDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The modified discussion comment."""
  comment: gh_DiscussionComment
}

"""Autogenerated input type of UpdateDiscussion"""
input gh_UpdateDiscussionInput {
  """The new contents of the discussion body."""
  body: String
  """
  The Node ID of a discussion category within the same repository to change this discussion to.
  """
  categoryId: ID @possibleTypes(concreteTypes: ["DiscussionCategory"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion to update."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
  """The new discussion title."""
  title: String
}

"""Autogenerated return type of UpdateDiscussion"""
type gh_UpdateDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The modified discussion."""
  discussion: gh_Discussion
}

"""Autogenerated input type of UpdateEnterpriseAdministratorRole"""
input gh_UpdateEnterpriseAdministratorRoleInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The login of a administrator whose role is being changed."""
  login: String!
  """The new role for the Enterprise administrator."""
  role: gh_EnterpriseAdministratorRole!
}

"""Autogenerated return type of UpdateEnterpriseAdministratorRole"""
type gh_UpdateEnterpriseAdministratorRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A message confirming the result of changing the administrator's role."""
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
input gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the allow private repository forking setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: gh_EnterpriseAllowPrivateRepositoryForkingPolicyValue
  """
  The value for the allow private repository forking setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
type gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated allow private repository forking setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the allow private repository forking setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
input gh_UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the base repository permission setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the base repository permission setting on the enterprise.
  """
  settingValue: gh_EnterpriseDefaultRepositoryPermissionSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
type gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise with the updated base repository permission setting."""
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the base repository permission setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
input gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can change repository visibility setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the members can change repository visibility setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
type gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated members can change repository visibility setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can change repository visibility setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
input gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can create repositories setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  Allow members to create internal repositories. Defaults to current value.
  """
  membersCanCreateInternalRepositories: Boolean
  """
  Allow members to create private repositories. Defaults to current value.
  """
  membersCanCreatePrivateRepositories: Boolean
  """
  Allow members to create public repositories. Defaults to current value.
  """
  membersCanCreatePublicRepositories: Boolean
  """
  When false, allow member organizations to set their own repository creation member privileges.
  """
  membersCanCreateRepositoriesPolicyEnabled: Boolean
  """
  Value for the members can create repositories setting on the enterprise. This
  or the granular public/private/internal allowed fields (but not both) must be provided.
  """
  settingValue: gh_EnterpriseMembersCanCreateRepositoriesSettingValue
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
type gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated members can create repositories setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can create repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
input gh_UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can delete issues setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The value for the members can delete issues setting on the enterprise."""
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
type gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise with the updated members can delete issues setting."""
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can delete issues setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
input gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can delete repositories setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the members can delete repositories setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
type gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated members can delete repositories setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can delete repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
input gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can invite collaborators setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the members can invite collaborators setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
type gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated members can invite collaborators setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can invite collaborators setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
input gh_UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can make purchases setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the members can make purchases setting on the enterprise.
  """
  settingValue: gh_EnterpriseMembersCanMakePurchasesSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
type gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise with the updated members can make purchases setting."""
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can make purchases setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
input gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can update protected branches setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the members can update protected branches setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
type gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated members can update protected branches setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can update protected branches setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
input gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the members can view dependency insights setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the members can view dependency insights setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
type gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated members can view dependency insights setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the members can view dependency insights setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
"""
input gh_UpdateEnterpriseOrganizationProjectsSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the organization projects setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The value for the organization projects setting on the enterprise."""
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
"""
type gh_UpdateEnterpriseOrganizationProjectsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise with the updated organization projects setting."""
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the organization projects setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole"""
input gh_UpdateEnterpriseOwnerOrganizationRoleInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Enterprise which the owner belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The ID of the organization for membership change."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  """The role to assume in the organization."""
  organizationRole: gh_RoleInOrganization!
}

"""Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole"""
type gh_UpdateEnterpriseOwnerOrganizationRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A message confirming the result of changing the owner's organization role.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseProfile"""
input gh_UpdateEnterpriseProfileInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The description of the enterprise."""
  description: String
  """The Enterprise ID to update."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The location of the enterprise."""
  location: String
  """The name of the enterprise."""
  name: String
  """The URL of the enterprise's website."""
  websiteUrl: String
}

"""Autogenerated return type of UpdateEnterpriseProfile"""
type gh_UpdateEnterpriseProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated enterprise."""
  enterprise: gh_Enterprise
}

"""Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting"""
input gh_UpdateEnterpriseRepositoryProjectsSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the repository projects setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The value for the repository projects setting on the enterprise."""
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting"""
type gh_UpdateEnterpriseRepositoryProjectsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise with the updated repository projects setting."""
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the repository projects setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting"""
input gh_UpdateEnterpriseTeamDiscussionsSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the enterprise on which to set the team discussions setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """The value for the team discussions setting on the enterprise."""
  settingValue: gh_EnterpriseEnabledDisabledSettingValue!
}

"""Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting"""
type gh_UpdateEnterpriseTeamDiscussionsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The enterprise with the updated team discussions setting."""
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the team discussions setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
input gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the enterprise on which to set the two factor authentication required setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  """
  The value for the two factor authentication required setting on the enterprise.
  """
  settingValue: gh_EnterpriseEnabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
type gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The enterprise with the updated two factor authentication required setting.
  """
  enterprise: gh_Enterprise
  """
  A message confirming the result of updating the two factor authentication required setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnvironment"""
input gh_UpdateEnvironmentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The node ID of the environment."""
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean
  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]
  """The wait timer in minutes."""
  waitTimer: Int
}

"""Autogenerated return type of UpdateEnvironment"""
type gh_UpdateEnvironmentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated environment."""
  environment: gh_Environment
}

"""Autogenerated input type of UpdateIpAllowListEnabledSetting"""
input gh_UpdateIpAllowListEnabledSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the owner on which to set the IP allow list enabled setting."""
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
  """The value for the IP allow list enabled setting."""
  settingValue: gh_IpAllowListEnabledSettingValue!
}

"""Autogenerated return type of UpdateIpAllowListEnabledSetting"""
type gh_UpdateIpAllowListEnabledSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The IP allow list owner on which the setting was updated."""
  owner: gh_IpAllowListOwner
}

"""Autogenerated input type of UpdateIpAllowListEntry"""
input gh_UpdateIpAllowListEntryInput {
  """An IP address or range of addresses in CIDR notation."""
  allowListValue: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the IP allow list entry to update."""
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!
  """An optional name for the IP allow list entry."""
  name: String
}

"""Autogenerated return type of UpdateIpAllowListEntry"""
type gh_UpdateIpAllowListEntryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The IP allow list entry that was updated."""
  ipAllowListEntry: gh_IpAllowListEntry
}

"""
Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
input gh_UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the owner."""
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
  """
  The value for the IP allow list configuration for installed GitHub Apps setting.
  """
  settingValue: gh_IpAllowListForInstalledAppsEnabledSettingValue!
}

"""
Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
type gh_UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The IP allow list owner on which the setting was updated."""
  owner: gh_IpAllowListOwner
}

"""Autogenerated input type of UpdateIssueComment"""
input gh_UpdateIssueCommentInput {
  """The updated text of the comment."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the IssueComment to modify."""
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""Autogenerated return type of UpdateIssueComment"""
type gh_UpdateIssueCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated comment."""
  issueComment: gh_IssueComment
}

"""Autogenerated input type of UpdateIssue"""
input gh_UpdateIssueInput {
  """An array of Node IDs of users for this issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  """The body for the issue description."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the Issue to modify."""
  id: ID! @possibleTypes(concreteTypes: ["Issue"])
  """An array of Node IDs of labels for this issue."""
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])
  """The Node ID of the milestone for this issue."""
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])
  """An array of Node IDs for projects associated with this issue."""
  projectIds: [ID!]
  """The desired issue state."""
  state: gh_IssueState
  """The title for the issue."""
  title: String
}

"""Autogenerated return type of UpdateIssue"""
type gh_UpdateIssuePayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The issue."""
  issue: gh_Issue
}

"""Autogenerated input type of UpdateLabel"""
input gh_UpdateLabelInput @preview(toggledBy: "bane-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A 6 character hex code, without the leading #, identifying the updated color of the label.
  """
  color: String
  """A brief description of the label, such as its purpose."""
  description: String
  """The Node ID of the label to be updated."""
  id: ID! @possibleTypes(concreteTypes: ["Label"])
  """The updated name of the label."""
  name: String
}

"""Autogenerated return type of UpdateLabel"""
type gh_UpdateLabelPayload @preview(toggledBy: "bane-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated label."""
  label: gh_Label
}

"""Autogenerated input type of UpdateNotificationRestrictionSetting"""
input gh_UpdateNotificationRestrictionSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the owner on which to set the restrict notifications setting.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
  """The value for the restrict notifications setting."""
  settingValue: gh_NotificationRestrictionSettingValue!
}

"""Autogenerated return type of UpdateNotificationRestrictionSetting"""
type gh_UpdateNotificationRestrictionSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The owner on which the setting was updated."""
  owner: gh_VerifiableDomainOwner
}

"""
Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
input gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Enable forking of private repositories in the organization?"""
  forkingEnabled: Boolean!
  """
  The ID of the organization on which to set the allow private repository forking setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
type gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A message confirming the result of updating the allow private repository forking setting.
  """
  message: String
  """
  The organization with the updated allow private repository forking setting.
  """
  organization: gh_Organization
}

"""Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting"""
input gh_UpdateOrganizationWebCommitSignoffSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting"""
type gh_UpdateOrganizationWebCommitSignoffSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String
  """The organization with the updated web commit signoff setting."""
  organization: gh_Organization
}

"""Only allow users with bypass permission to update matching refs."""
type gh_UpdateParameters {
  """Branch can pull changes from its upstream repository"""
  updateAllowsFetchAndMerge: Boolean!
}

"""Only allow users with bypass permission to update matching refs."""
input gh_UpdateParametersInput {
  """Branch can pull changes from its upstream repository"""
  updateAllowsFetchAndMerge: Boolean!
}

"""Autogenerated input type of UpdatePatreonSponsorability"""
input gh_UpdatePatreonSponsorabilityInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!
  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""Autogenerated return type of UpdatePatreonSponsorability"""
type gh_UpdatePatreonSponsorabilityPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The GitHub Sponsors profile."""
  sponsorsListing: gh_SponsorsListing
}

"""Autogenerated input type of UpdateProjectCard"""
input gh_UpdateProjectCardInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the ProjectCard should be archived"""
  isArchived: Boolean
  """The note of ProjectCard."""
  note: String
  """The ProjectCard ID to update."""
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""Autogenerated return type of UpdateProjectCard"""
type gh_UpdateProjectCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated ProjectCard."""
  projectCard: gh_ProjectCard
}

"""Autogenerated input type of UpdateProjectColumn"""
input gh_UpdateProjectColumnInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of project column."""
  name: String!
  """The ProjectColumn ID to update."""
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""Autogenerated return type of UpdateProjectColumn"""
type gh_UpdateProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated project column."""
  projectColumn: gh_ProjectColumn
}

"""Autogenerated input type of UpdateProject"""
input gh_UpdateProjectInput {
  """The description of project."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The name of project."""
  name: String
  """The Project ID to update."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
  """Whether the project is public or not."""
  public: Boolean
  """Whether the project is open or closed."""
  state: gh_ProjectState
}

"""Autogenerated return type of UpdateProject"""
type gh_UpdateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated project."""
  project: gh_Project
}

"""Autogenerated input type of UpdateProjectV2Collaborators"""
input gh_UpdateProjectV2CollaboratorsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The collaborators to update."""
  collaborators: [gh_ProjectV2Collaborator!]!
  """The ID of the project to update the collaborators for."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of UpdateProjectV2Collaborators"""
type gh_UpdateProjectV2CollaboratorsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The collaborators granted a role"""
  collaborators(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2ActorConnection
}

"""Autogenerated input type of UpdateProjectV2DraftIssue"""
input gh_UpdateProjectV2DraftIssueInput {
  """The IDs of the assignees of the draft issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  """The body of the draft issue."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the draft issue to update."""
  draftIssueId: ID! @possibleTypes(concreteTypes: ["DraftIssue"])
  """The title of the draft issue."""
  title: String
}

"""Autogenerated return type of UpdateProjectV2DraftIssue"""
type gh_UpdateProjectV2DraftIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The draft issue updated in the project."""
  draftIssue: gh_DraftIssue
}

"""Autogenerated input type of UpdateProjectV2"""
input gh_UpdateProjectV2Input {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Set the project to closed or open."""
  closed: Boolean
  """The ID of the Project to update."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """Set the project to public or private."""
  public: Boolean
  """Set the readme description of the project."""
  readme: String
  """Set the short description of the project."""
  shortDescription: String
  """Set the title of the project."""
  title: String
}

"""Autogenerated input type of UpdateProjectV2ItemFieldValue"""
input gh_UpdateProjectV2ItemFieldValueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the field to be updated."""
  fieldId: ID! @possibleTypes(concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"], abstractType: "ProjectV2FieldConfiguration")
  """The ID of the item to be updated."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """The ID of the Project."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  """The value which will be set on the field."""
  value: gh_ProjectV2FieldValue!
}

"""Autogenerated return type of UpdateProjectV2ItemFieldValue"""
type gh_UpdateProjectV2ItemFieldValuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated item."""
  projectV2Item: gh_ProjectV2Item
}

"""Autogenerated input type of UpdateProjectV2ItemPosition"""
input gh_UpdateProjectV2ItemPositionInput {
  """
  The ID of the item to position this item after. If omitted or set to null the item will be moved to top.
  """
  afterId: ID @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the item to be moved."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  """The ID of the Project."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""Autogenerated return type of UpdateProjectV2ItemPosition"""
type gh_UpdateProjectV2ItemPositionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The items in the new order"""
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2ItemConnection
}

"""Autogenerated return type of UpdateProjectV2"""
type gh_UpdateProjectV2Payload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated Project."""
  projectV2: gh_ProjectV2
}

"""Autogenerated input type of UpdatePullRequestBranch"""
input gh_UpdatePullRequestBranchInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The head ref oid for the upstream branch."""
  expectedHeadOid: gh_GitObjectID
  """The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  """The update branch method to use. If omitted, defaults to 'MERGE'"""
  updateMethod: gh_PullRequestBranchUpdateMethod
}

"""Autogenerated return type of UpdatePullRequestBranch"""
type gh_UpdatePullRequestBranchPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated pull request."""
  pullRequest: gh_PullRequest
}

"""Autogenerated input type of UpdatePullRequest"""
input gh_UpdatePullRequestInput {
  """An array of Node IDs of users for this pull request."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository.
  """
  baseRefName: String
  """The contents of the pull request."""
  body: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """An array of Node IDs of labels for this pull request."""
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])
  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean
  """The Node ID of the milestone for this pull request."""
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])
  """An array of Node IDs for projects associated with this pull request."""
  projectIds: [ID!]
  """The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  """The target state of the pull request."""
  state: gh_PullRequestUpdateState
  """The title of the pull request."""
  title: String
}

"""Autogenerated return type of UpdatePullRequest"""
type gh_UpdatePullRequestPayload {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated pull request."""
  pullRequest: gh_PullRequest
}

"""Autogenerated input type of UpdatePullRequestReviewComment"""
input gh_UpdatePullRequestReviewCommentInput {
  """The text of the comment."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the comment to modify."""
  pullRequestReviewCommentId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""Autogenerated return type of UpdatePullRequestReviewComment"""
type gh_UpdatePullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated comment."""
  pullRequestReviewComment: gh_PullRequestReviewComment
}

"""Autogenerated input type of UpdatePullRequestReview"""
input gh_UpdatePullRequestReviewInput {
  """The contents of the pull request review body."""
  body: String!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""Autogenerated return type of UpdatePullRequestReview"""
type gh_UpdatePullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated pull request review."""
  pullRequestReview: gh_PullRequestReview
}

"""Autogenerated input type of UpdateRef"""
input gh_UpdateRefInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Permit updates of branch Refs that are not fast-forwards?"""
  force: Boolean = false
  """The GitObjectID that the Ref shall be updated to target."""
  oid: gh_GitObjectID!
  """The Node ID of the Ref to be updated."""
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""Autogenerated return type of UpdateRef"""
type gh_UpdateRefPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated Ref."""
  ref: gh_Ref
}

"""Autogenerated input type of UpdateRefs"""
input gh_UpdateRefsInput @preview(toggledBy: "update-refs-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A list of ref updates."""
  refUpdates: [gh_RefUpdate!]!
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""Autogenerated return type of UpdateRefs"""
type gh_UpdateRefsPayload @preview(toggledBy: "update-refs-preview") {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UpdateRepository"""
input gh_UpdateRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A new description for the repository. Pass an empty string to erase the existing description.
  """
  description: String
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean
  """Indicates if the repository should have the issues feature enabled."""
  hasIssuesEnabled: Boolean
  """
  Indicates if the repository should have the project boards feature enabled.
  """
  hasProjectsEnabled: Boolean
  """Indicates if the repository should have the wiki feature enabled."""
  hasWikiEnabled: Boolean
  """
  The URL for a web page about this repository. Pass an empty string to erase the existing URL.
  """
  homepageUrl: gh_URI
  """The new name of the repository."""
  name: String
  """The ID of the repository to update."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean
}

"""Autogenerated return type of UpdateRepository"""
type gh_UpdateRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated repository."""
  repository: gh_Repository
}

"""Autogenerated input type of UpdateRepositoryRuleset"""
input gh_UpdateRepositoryRulesetInput {
  """A list of actors that are allowed to bypass rules in this ruleset."""
  bypassActors: [gh_RepositoryRulesetBypassActorInput!]
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The list of conditions for this ruleset"""
  conditions: gh_RepositoryRuleConditionsInput
  """The enforcement level for this ruleset"""
  enforcement: gh_RuleEnforcement
  """The name of the ruleset."""
  name: String
  """The global relay id of the repository ruleset to be updated."""
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
  """The list of rules for this ruleset"""
  rules: [gh_RepositoryRuleInput!]
  """The target of the ruleset."""
  target: gh_RepositoryRulesetTarget
}

"""Autogenerated return type of UpdateRepositoryRuleset"""
type gh_UpdateRepositoryRulesetPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The newly created Ruleset."""
  ruleset: gh_RepositoryRuleset
}

"""Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting"""
input gh_UpdateRepositoryWebCommitSignoffSettingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the repository to update."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting"""
type gh_UpdateRepositoryWebCommitSignoffSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String
  """The updated repository."""
  repository: gh_Repository
}

"""Autogenerated input type of UpdateSponsorshipPreferences"""
input gh_UpdateSponsorshipPreferencesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: gh_SponsorshipPrivacy = PUBLIC
  """Whether the sponsor should receive email updates from the sponsorable."""
  receiveEmails: Boolean = true
  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")
  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String
  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")
  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""Autogenerated return type of UpdateSponsorshipPreferences"""
type gh_UpdateSponsorshipPreferencesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The sponsorship that was updated."""
  sponsorship: gh_Sponsorship
}

"""Autogenerated input type of UpdateSubscription"""
input gh_UpdateSubscriptionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The new state of the subscription."""
  state: gh_SubscriptionState!
  """The Node ID of the subscribable object to modify."""
  subscribableId: ID! @possibleTypes(concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"], abstractType: "Subscribable")
}

"""Autogenerated return type of UpdateSubscription"""
type gh_UpdateSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The input subscribable entity."""
  subscribable: gh_Subscribable
}

"""Autogenerated input type of UpdateTeamDiscussionComment"""
input gh_UpdateTeamDiscussionCommentInput {
  """The updated text of the comment."""
  body: String!
  """The current version of the body content."""
  bodyVersion: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the comment to modify."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""Autogenerated return type of UpdateTeamDiscussionComment"""
type gh_UpdateTeamDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated comment."""
  teamDiscussionComment: gh_TeamDiscussionComment
}

"""Autogenerated input type of UpdateTeamDiscussion"""
input gh_UpdateTeamDiscussionInput {
  """The updated text of the discussion."""
  body: String
  """
  The current version of the body content. If provided, this update operation
  will be rejected if the given version does not match the latest version on the server.
  """
  bodyVersion: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the discussion to modify."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
  """If provided, sets the pinned state of the updated discussion."""
  pinned: Boolean
  """The updated title of the discussion."""
  title: String
}

"""Autogenerated return type of UpdateTeamDiscussion"""
type gh_UpdateTeamDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated discussion."""
  teamDiscussion: gh_TeamDiscussion
}

"""Autogenerated input type of UpdateTeamReviewAssignment"""
input gh_UpdateTeamReviewAssignmentInput @preview(toggledBy: "stone-crop-preview") {
  """The algorithm to use for review assignment"""
  algorithm: gh_TeamReviewAssignmentAlgorithm = ROUND_ROBIN
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Turn on or off review assignment"""
  enabled: Boolean!
  """An array of team member IDs to exclude"""
  excludedTeamMemberIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  """The Node ID of the team to update review assignments of"""
  id: ID! @possibleTypes(concreteTypes: ["Team"])
  """Notify the entire team of the PR if it is delegated"""
  notifyTeam: Boolean = true
  """The number of team members to assign"""
  teamMemberCount: Int = 1
}

"""Autogenerated return type of UpdateTeamReviewAssignment"""
type gh_UpdateTeamReviewAssignmentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The team that was modified"""
  team: gh_Team
}

"""Autogenerated input type of UpdateTeamsRepository"""
input gh_UpdateTeamsRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Permission that should be granted to the teams."""
  permission: gh_RepositoryPermission!
  """Repository ID being granted access to."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """A list of teams being granted access. Limit: 10"""
  teamIds: [ID!]! @possibleTypes(concreteTypes: ["Team"])
}

"""Autogenerated return type of UpdateTeamsRepository"""
type gh_UpdateTeamsRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The repository that was updated."""
  repository: gh_Repository
  """The teams granted permission on the repository."""
  teams: [gh_Team!]
}

"""Autogenerated input type of UpdateTopics"""
input gh_UpdateTopicsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  """An array of topic names."""
  topicNames: [String!]!
}

"""Autogenerated return type of UpdateTopics"""
type gh_UpdateTopicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Names of the provided topics that are not valid."""
  invalidTopicNames: [String!]
  """The updated repository."""
  repository: gh_Repository
}

"""Autogenerated input type of UpdateUserList"""
input gh_UpdateUserListInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A description of the list"""
  description: String
  """Whether or not the list is private"""
  isPrivate: Boolean
  """The ID of the list to update."""
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])
  """The name of the list"""
  name: String
}

"""Autogenerated return type of UpdateUserList"""
type gh_UpdateUserListPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The list that was just updated"""
  list: gh_UserList
}

"""Autogenerated input type of UpdateUserListsForItem"""
input gh_UpdateUserListsForItemInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item to add to the list"""
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")
  """The lists to which this item should belong"""
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])
  """The suggested lists to create and add this item to"""
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""Autogenerated return type of UpdateUserListsForItem"""
type gh_UpdateUserListsForItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The item that was added"""
  item: gh_UserListItems
  """The lists to which this item belongs"""
  lists: [gh_UserList!]
  """The user who owns the lists"""
  user: gh_User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type gh_User implements gh_Actor & gh_Node & gh_PackageOwner & gh_ProfileOwner & gh_ProjectOwner & gh_ProjectV2Owner & gh_ProjectV2Recent & gh_RepositoryDiscussionAuthor & gh_RepositoryDiscussionCommentAuthor & gh_RepositoryOwner & gh_Sponsorable & gh_UniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """Filter to only a particular kind of pinnable item."""
    type: gh_PinnableItemType
  ): Boolean!
  """A URL pointing to the user's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): gh_URI!
  """The user's public profile bio."""
  bio: String
  """The user's public profile bio as HTML."""
  bioHTML: gh_HTML!
  """
  Could this user receive email notifications, if the organization had notification restrictions enabled?
  """
  canReceiveOrganizationEmailsWhenNotificationsRestricted(
    """The login of the organization to check."""
    login: String!
  ): Boolean!
  """A list of commit comments made by this user."""
  commitComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_CommitCommentConnection!
  """The user's public profile company."""
  company: String
  """The user's public profile company as HTML."""
  companyHTML: gh_HTML!
  """
  The collection of contributions this user has made to different repositories.
  """
  contributionsCollection(
    """
    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
    """
    from: DateTime
    """The ID of the organization used to filter contributions."""
    organizationID: ID
    """
    Only contributions made before and up to (including) this time will be
    counted. If omitted, defaults to the current time or one year from the
    provided from argument.
    """
    to: DateTime
  ): gh_ContributionsCollection!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The user's publicly visible profile email."""
  email: String!
  """A list of enterprises that the user belongs to."""
  enterprises(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter enterprises returned based on the user's membership type."""
    membershipType: gh_EnterpriseMembershipType = ALL
    """Ordering options for the User's enterprises."""
    orderBy: gh_EnterpriseOrder = {direction: ASC, field: NAME}
  ): gh_EnterpriseConnection
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!
  """A list of users the given user is followed by."""
  followers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_FollowerConnection!
  """A list of users the given user is following."""
  following(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_FollowingConnection!
  """Find gist by repo name."""
  gist(
    """The gist name to find."""
    name: String!
  ): gh_Gist
  """A list of gist comments made by this user."""
  gistComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_GistCommentConnection!
  """A list of the Gists the user has created."""
  gists(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for gists returned from the connection"""
    orderBy: gh_GistOrder
    """Filters Gists according to privacy."""
    privacy: gh_GistPrivacy
  ): gh_GistConnection!
  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!
  """The hovercard information for this user in a given context"""
  hovercard(
    """The ID of the subject to get the hovercard in the context of"""
    primarySubjectId: ID
  ): gh_Hovercard!
  """The Node ID of the User object"""
  id: ID!
  """The interaction ability settings for this user."""
  interactionAbility: gh_RepositoryInteractionAbility
  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!
  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!
  """Whether or not this user is a GitHub Developer Program member."""
  isDeveloperProgramMember: Boolean!
  """Whether or not this user is a GitHub employee."""
  isEmployee: Boolean!
  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  isFollowingViewer: Boolean!
  """Whether or not this user is a member of the GitHub Stars Program."""
  isGitHubStar: Boolean!
  """Whether or not the user has marked themselves as for hire."""
  isHireable: Boolean!
  """Whether or not this user is a site administrator."""
  isSiteAdmin: Boolean!
  """Whether the given account is sponsoring this user/organization."""
  isSponsoredBy(
    """The target account's login."""
    accountLogin: String!
  ): Boolean!
  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!
  """Whether or not this user is the viewing user."""
  isViewer: Boolean!
  """A list of issue comments made by this user."""
  issueComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issue comments returned from the connection."""
    orderBy: gh_IssueCommentOrder
  ): gh_IssueCommentConnection!
  """A list of issues associated with this user."""
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Filtering options for issues returned from the connection."""
    filterBy: gh_IssueFilters
    """Returns the first _n_ elements from the list."""
    first: Int
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for issues returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the issues by."""
    states: [gh_IssueState!]
  ): gh_IssueConnection!
  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: gh_ProfileItemShowcase!
  """A user-curated list of repositories"""
  lists(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserListConnection!
  """The user's public profile location."""
  location: String
  """The username used to login."""
  login: String!
  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!
  """The user's public profile name."""
  name: String
  """Find an organization by its login that the user belongs to."""
  organization(
    """The login of the organization to find."""
    login: String!
  ): gh_Organization
  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """The login of the organization to match verified domains from."""
    login: String!
  ): [String!]!
  """A list of organizations the user belongs to."""
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the User's organizations."""
    orderBy: gh_OrganizationOrder = null
  ): gh_OrganizationConnection!
  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Find packages by their names."""
    names: [String]
    """Ordering of the returned packages."""
    orderBy: gh_PackageOrder = {direction: DESC, field: CREATED_AT}
    """Filter registry package by type."""
    packageType: gh_PackageType
    """Find packages in a repository by ID."""
    repositoryId: ID
  ): gh_PackageConnection!
  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter the types of pinnable items that are returned."""
    types: [gh_PinnableItemType!]
  ): gh_PinnableItemConnection!
  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filter the types of pinned items that are returned."""
    types: [gh_PinnableItemType!]
  ): gh_PinnableItemConnection!
  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!
  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): gh_Project
  """Find a project by number."""
  projectV2(
    """The project number."""
    number: Int!
  ): gh_ProjectV2
  """A list of projects under the owner."""
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for projects returned from the connection"""
    orderBy: gh_ProjectOrder
    """Query to search projects by, currently only searching by name."""
    search: String
    """A list of states to filter the projects by."""
    states: [gh_ProjectState!]
  ): gh_ProjectConnection!
  """The HTTP path listing user's projects"""
  projectsResourcePath: gh_URI!
  """The HTTP URL listing user's projects"""
  projectsUrl: gh_URI!
  """A list of projects under the owner."""
  projectsV2(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """How to order the returned projects."""
    orderBy: gh_ProjectV2Order = {direction: DESC, field: NUMBER}
    """A project to search for under the the owner."""
    query: String
  ): gh_ProjectV2Connection!
  """The user's profile pronouns"""
  pronouns: String
  """A list of public keys associated with this user."""
  publicKeys(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_PublicKeyConnection!
  """A list of pull requests associated with this user."""
  pullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """The base ref name to filter the pull requests by."""
    baseRefName: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """The head ref name to filter the pull requests by."""
    headRefName: String
    """A list of label names to filter the pull requests by."""
    labels: [String!]
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for pull requests returned from the connection."""
    orderBy: gh_IssueOrder
    """A list of states to filter the pull requests by."""
    states: [gh_PullRequestState!]
  ): gh_PullRequestConnection!
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_ProjectV2Connection!
  """A list of repositories that the user owns."""
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [gh_RepositoryAffiliation]
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean
    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean
    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [gh_RepositoryAffiliation] = [OWNER, COLLABORATOR]
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
  ): gh_RepositoryConnection!
  """A list of repositories that the user recently contributed to."""
  repositoriesContributedTo(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [gh_RepositoryContributionType]
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssues: Boolean
    """If true, include user repositories"""
    includeUserRepositories: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
  ): gh_RepositoryConnection!
  """Find Repository."""
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true
    """Name of Repository to find."""
    name: String!
  ): gh_Repository
  """Discussion comments this user has authored."""
  repositoryDiscussionComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false
    """Filter discussion comments to only those in a specific repository."""
    repositoryId: ID
  ): gh_DiscussionCommentConnection!
  """Discussions this user has started."""
  repositoryDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for discussions returned from the connection."""
    orderBy: gh_DiscussionOrder = {direction: DESC, field: CREATED_AT}
    """Filter discussions to only those in a specific repository."""
    repositoryId: ID
    """A list of states to filter the discussions by."""
    states: [gh_DiscussionState!] = []
  ): gh_DiscussionConnection!
  """The HTTP path for this user"""
  resourcePath: gh_URI!
  """Replies this user has saved"""
  savedReplies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The field to order saved replies by."""
    orderBy: gh_SavedReplyOrder = {direction: DESC, field: UPDATED_AT}
  ): gh_SavedReplyConnection
  """
  The user's social media accounts, ordered as they appear on the user's profile.
  """
  socialAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_SocialAccountConnection!
  """List of users and organizations this entity is sponsoring."""
  sponsoring(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: gh_SponsorOrder = {direction: DESC, field: RELEVANCE}
  ): gh_SponsorConnection!
  """List of sponsors for this user or organization."""
  sponsors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for sponsors returned from the connection."""
    orderBy: gh_SponsorOrder = {direction: DESC, field: RELEVANCE}
    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): gh_SponsorConnection!
  """Events involving this sponsorable, such as new sponsorships."""
  sponsorsActivities(
    """Filter activities to only the specified actions."""
    actions: [gh_SponsorsActivityAction!] = []
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false
    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for activity returned from the connection."""
    orderBy: gh_SponsorsActivityOrder = {direction: DESC, field: TIMESTAMP}
    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: gh_SponsorsActivityPeriod = MONTH
    """Filter activities to those that occurred on or after this time."""
    since: DateTime
    """Filter activities to those that occurred before this time."""
    until: DateTime
  ): gh_SponsorsActivityConnection!
  """The GitHub Sponsors listing for this user or organization."""
  sponsorsListing: gh_SponsorsListing
  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): gh_Sponsorship
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): gh_Sponsorship
  """List of sponsorship updates sent from this sponsorable to sponsors."""
  sponsorshipNewsletters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for sponsorship updates returned from the connection."""
    orderBy: gh_SponsorshipNewsletterOrder = {direction: DESC, field: CREATED_AT}
  ): gh_SponsorshipNewsletterConnection!
  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
  """The sponsorships where this user or organization is the funder."""
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: gh_SponsorshipOrder
  ): gh_SponsorshipConnection!
  """Repositories the user has starred."""
  starredRepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Order for connection"""
    orderBy: gh_StarOrder
    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean
  ): gh_StarredRepositoryConnection!
  """The user's description of what they're currently doing."""
  status: gh_UserStatus
  """Suggested names for user lists"""
  suggestedListNames: [gh_UserListSuggestion!]!
  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  """
  topRepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder!
    """How far back in time to fetch contributed repositories"""
    since: DateTime
  ): gh_RepositoryConnection!
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """Filter payments to those that occurred on or after this time."""
    since: DateTime
    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []
    """Filter payments to those that occurred before this time."""
    until: DateTime
  ): Int
  """The user's Twitter username."""
  twitterUsername: String
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this user"""
  url: gh_URI!
  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!
  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!
  """Whether or not the viewer is able to follow the user."""
  viewerCanFollow: Boolean!
  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!
  """
  Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
  """
  viewerIsFollowing: Boolean!
  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!
  """A list of repositories the given user is watching."""
  watching(
    """
    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member.
    """
    affiliations: [gh_RepositoryAffiliation]
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean
    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for repositories returned from the connection"""
    orderBy: gh_RepositoryOrder
    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [gh_RepositoryAffiliation] = [OWNER, COLLABORATOR]
    """If non-null, filters repositories according to privacy"""
    privacy: gh_RepositoryPrivacy
  ): gh_RepositoryConnection!
  """A URL pointing to the user's public website/blog."""
  websiteUrl: gh_URI
}

"""The possible durations that a user can be blocked for."""
enum gh_UserBlockDuration {
  """The user was blocked for 1 day"""
  ONE_DAY
  """The user was blocked for 30 days"""
  ONE_MONTH
  """The user was blocked for 7 days"""
  ONE_WEEK
  """The user was blocked permanently"""
  PERMANENT
  """The user was blocked for 3 days"""
  THREE_DAYS
}

"""Represents a 'user_blocked' event on a given user."""
type gh_UserBlockedEvent implements gh_Node {
  """Identifies the actor who performed the event."""
  actor: gh_Actor
  """Number of days that the user was blocked for."""
  blockDuration: gh_UserBlockDuration!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The Node ID of the UserBlockedEvent object"""
  id: ID!
  """The user who was blocked."""
  subject: gh_User
}

"""The connection type for User."""
type gh_UserConnection {
  """A list of edges."""
  edges: [gh_UserEdge]
  """A list of nodes."""
  nodes: [gh_User]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edit on user content"""
type gh_UserContentEdit implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the date and time when the object was deleted."""
  deletedAt: DateTime
  """The actor who deleted this content"""
  deletedBy: gh_Actor
  """A summary of the changes for this edit"""
  diff: String
  """When this content was edited"""
  editedAt: DateTime!
  """The actor who edited this content"""
  editor: gh_Actor
  """The Node ID of the UserContentEdit object"""
  id: ID!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""A list of edits to content."""
type gh_UserContentEditConnection {
  """A list of edges."""
  edges: [gh_UserContentEditEdge]
  """A list of nodes."""
  nodes: [gh_UserContentEdit]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_UserContentEditEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_UserContentEdit
}

"""Represents a user."""
type gh_UserEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_User
}

"""Email attributes from External Identity"""
type gh_UserEmailMetadata {
  """Boolean to identify primary emails"""
  primary: Boolean
  """Type of email"""
  type: String
  """Email id"""
  value: String!
}

"""A user-curated list of repositories"""
type gh_UserList implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """The description of this list"""
  description: String
  """The Node ID of the UserList object"""
  id: ID!
  """Whether or not this list is private"""
  isPrivate: Boolean!
  """The items associated with this list"""
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_UserListItemsConnection!
  """
  The date and time at which this list was created or last had items added to it
  """
  lastAddedAt: DateTime!
  """The name of this list"""
  name: String!
  """The slug of this list"""
  slug: String!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The user to which this list belongs"""
  user: gh_User!
}

"""The connection type for UserList."""
type gh_UserListConnection {
  """A list of edges."""
  edges: [gh_UserListEdge]
  """A list of nodes."""
  nodes: [gh_UserList]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_UserListEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_UserList
}

"""Types that can be added to a user list."""
union gh_UserListItems = gh_Repository

"""The connection type for UserListItems."""
type gh_UserListItemsConnection {
  """A list of edges."""
  edges: [gh_UserListItemsEdge]
  """A list of nodes."""
  nodes: [gh_UserListItems]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_UserListItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_UserListItems
}

"""Represents a suggested user list."""
type gh_UserListSuggestion {
  """The ID of the suggested user list"""
  id: ID
  """The name of the suggested user list"""
  name: String
}

"""The user's description of what they're currently doing."""
type gh_UserStatus implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """An emoji summarizing the user's status."""
  emoji: String
  """The status emoji as HTML."""
  emojiHTML: gh_HTML
  """If set, the status will not be shown after this date."""
  expiresAt: DateTime
  """The Node ID of the UserStatus object"""
  id: ID!
  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!
  """A brief message describing what the user is doing."""
  message: String
  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: gh_Organization
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The user who has this status."""
  user: gh_User!
}

"""The connection type for UserStatus."""
type gh_UserStatusConnection {
  """A list of edges."""
  edges: [gh_UserStatusEdge]
  """A list of nodes."""
  nodes: [gh_UserStatus]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_UserStatusEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_UserStatus
}

"""Ordering options for user status connections."""
input gh_UserStatusOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order user statuses by."""
  field: gh_UserStatusOrderField!
}

"""Properties by which user status connections can be ordered."""
enum gh_UserStatusOrderField {
  """Order user statuses by when they were updated."""
  UPDATED_AT
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type gh_VerifiableDomain implements gh_Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The DNS host name that should be used for verification."""
  dnsHostName: gh_URI
  """The unicode encoded domain."""
  domain: gh_URI!
  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!
  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!
  """The Node ID of the VerifiableDomain object"""
  id: ID!
  """Whether or not the domain is approved."""
  isApproved: Boolean!
  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!
  """Whether or not the domain is verified."""
  isVerified: Boolean!
  """The owner of the domain."""
  owner: gh_VerifiableDomainOwner!
  """The punycode encoded domain."""
  punycodeEncodedDomain: gh_URI!
  """The time that the current verification token will expire."""
  tokenExpirationTime: DateTime
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The current verification token for the domain."""
  verificationToken: String
}

"""The connection type for VerifiableDomain."""
type gh_VerifiableDomainConnection {
  """A list of edges."""
  edges: [gh_VerifiableDomainEdge]
  """A list of nodes."""
  nodes: [gh_VerifiableDomain]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_VerifiableDomainEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_VerifiableDomain
}

"""Ordering options for verifiable domain connections."""
input gh_VerifiableDomainOrder {
  """The ordering direction."""
  direction: gh_OrderDirection!
  """The field to order verifiable domains by."""
  field: gh_VerifiableDomainOrderField!
}

"""Properties by which verifiable domain connections can be ordered."""
enum gh_VerifiableDomainOrderField {
  """Order verifiable domains by their creation date."""
  CREATED_AT
  """Order verifiable domains by the domain name."""
  DOMAIN
}

"""Types that can own a verifiable domain."""
union gh_VerifiableDomainOwner = gh_Enterprise | gh_Organization

"""Autogenerated input type of VerifyVerifiableDomain"""
input gh_VerifyVerifiableDomainInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The ID of the verifiable domain to verify."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""Autogenerated return type of VerifyVerifiableDomain"""
type gh_VerifyVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The verifiable domain that was verified."""
  domain: gh_VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type gh_ViewerHovercardContext implements gh_HovercardContext {
  """A string describing this context"""
  message: String!
  """An octicon to accompany this context"""
  octicon: String!
  """Identifies the user who is related to this context."""
  viewer: gh_User!
}

"""A subject that may be upvoted."""
interface gh_Votable {
  """Number of upvotes that this subject has received."""
  upvoteCount: Int!
  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!
  """Whether or not the current user has already upvoted this subject."""
  viewerHasUpvoted: Boolean!
}

"""A workflow contains meta information about an Actions workflow file."""
type gh_Workflow implements gh_Node & gh_UniformResourceLocatable {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The Node ID of the Workflow object"""
  id: ID!
  """The name of the workflow."""
  name: String!
  """The HTTP path for this workflow"""
  resourcePath: gh_URI!
  """The runs of the workflow."""
  runs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the connection"""
    orderBy: gh_WorkflowRunOrder = {direction: DESC, field: CREATED_AT}
  ): gh_WorkflowRunConnection!
  """The state of the workflow."""
  state: gh_WorkflowState!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this workflow"""
  url: gh_URI!
}

"""A workflow that must run for this rule to pass"""
type gh_WorkflowFileReference {
  """The path to the workflow file"""
  path: String!
  """The ref (branch or tag) of the workflow file to use"""
  ref: String
  """The ID of the repository where the workflow is defined"""
  repositoryId: Int!
  """The commit SHA of the workflow file to use"""
  sha: String
}

"""A workflow that must run for this rule to pass"""
input gh_WorkflowFileReferenceInput {
  """The path to the workflow file"""
  path: String!
  """The ref (branch or tag) of the workflow file to use"""
  ref: String
  """The ID of the repository where the workflow is defined"""
  repositoryId: Int!
  """The commit SHA of the workflow file to use"""
  sha: String
}

"""A workflow run."""
type gh_WorkflowRun implements gh_Node & gh_UniformResourceLocatable {
  """The check suite this workflow run belongs to."""
  checkSuite: gh_CheckSuite!
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  """Identifies the primary key from the database."""
  databaseId: Int
  """The log of deployment reviews"""
  deploymentReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeploymentReviewConnection!
  """The event that triggered the workflow run"""
  event: String!
  """The workflow file"""
  file: gh_WorkflowRunFile
  """The Node ID of the WorkflowRun object"""
  id: ID!
  """The pending deployment requests of all check runs in this workflow run"""
  pendingDeploymentRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): gh_DeploymentRequestConnection!
  """The HTTP path for this workflow run"""
  resourcePath: gh_URI!
  """
  A number that uniquely identifies this workflow run in its parent workflow.
  """
  runNumber: Int!
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  """The HTTP URL for this workflow run"""
  url: gh_URI!
  """The workflow executed in this workflow run."""
  workflow: gh_Workflow!
}

"""The connection type for WorkflowRun."""
type gh_WorkflowRunConnection {
  """A list of edges."""
  edges: [gh_WorkflowRunEdge]
  """A list of nodes."""
  nodes: [gh_WorkflowRun]
  """Information to aid in pagination."""
  pageInfo: gh_PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type gh_WorkflowRunEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: gh_WorkflowRun
}

"""An executed workflow file for a workflow run."""
type gh_WorkflowRunFile implements gh_Node & gh_UniformResourceLocatable {
  """The Node ID of the WorkflowRunFile object"""
  id: ID!
  """The path of the workflow file relative to its repository."""
  path: String!
  """
  The direct link to the file in the repository which stores the workflow file.
  """
  repositoryFileUrl: gh_URI!
  """The repository name and owner which stores the workflow file."""
  repositoryName: gh_URI!
  """The HTTP path for this workflow run file"""
  resourcePath: gh_URI!
  """The parent workflow run execution for this file."""
  run: gh_WorkflowRun!
  """The HTTP URL for this workflow run file"""
  url: gh_URI!
  """
  If the viewer has permissions to push to the repository which stores the workflow.
  """
  viewerCanPushRepository: Boolean!
  """
  If the viewer has permissions to read the repository which stores the workflow.
  """
  viewerCanReadRepository: Boolean!
}

"""Ways in which lists of workflow runs can be ordered upon return."""
input gh_WorkflowRunOrder {
  """The direction in which to order workflow runs by the specified field."""
  direction: gh_OrderDirection!
  """The field by which to order workflows."""
  field: gh_WorkflowRunOrderField!
}

"""Properties by which workflow run connections can be ordered."""
enum gh_WorkflowRunOrderField {
  """Order workflow runs by most recently created"""
  CREATED_AT
}

"""The possible states for a workflow."""
enum gh_WorkflowState {
  """The workflow is active."""
  ACTIVE
  """The workflow was deleted from the git repository."""
  DELETED
  """The workflow was disabled by default on a fork."""
  DISABLED_FORK
  """The workflow was disabled for inactivity in the repository."""
  DISABLED_INACTIVITY
  """The workflow was disabled manually."""
  DISABLED_MANUALLY
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
type gh_WorkflowsParameters {
  """Workflows that must pass for this rule to pass."""
  workflows: [gh_WorkflowFileReference!]!
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
input gh_WorkflowsParametersInput {
  """Workflows that must pass for this rule to pass."""
  workflows: [gh_WorkflowFileReferenceInput!]!
}

"""A valid x509 certificate string"""
scalar gh_X509Certificate

type GithubQuery {
  """Look up a code of conduct by its key"""
  gh_codeOfConduct(
    """The code of conduct's key"""
    key: String!
  ): gh_CodeOfConduct
  """Look up a code of conduct by its key"""
  gh_codesOfConduct: [gh_CodeOfConduct]
  """Look up an enterprise by URL slug."""
  gh_enterprise(
    """The enterprise invitation token."""
    invitationToken: String
    """The enterprise URL slug."""
    slug: String!
  ): gh_Enterprise
  """
  Look up a pending enterprise administrator invitation by invitee, enterprise and role.
  """
  gh_enterpriseAdministratorInvitation(
    """The slug of the enterprise the user was invited to join."""
    enterpriseSlug: String!
    """The role for the business member invitation."""
    role: gh_EnterpriseAdministratorRole!
    """The login of the user invited to join the business."""
    userLogin: String!
  ): gh_EnterpriseAdministratorInvitation
  """
  Look up a pending enterprise administrator invitation by invitation token.
  """
  gh_enterpriseAdministratorInvitationByToken(
    """The invitation token sent with the invitation email."""
    invitationToken: String!
  ): gh_EnterpriseAdministratorInvitation
  """Look up an open source license by its key"""
  gh_license(
    """The license's downcased SPDX ID"""
    key: String!
  ): gh_License
  """Return a list of known open source licenses"""
  gh_licenses: [gh_License]!
  """Get alphabetically sorted list of Marketplace categories"""
  gh_marketplaceCategories(
    """Exclude categories with no listings."""
    excludeEmpty: Boolean
    """Returns top level categories only, excluding any subcategories."""
    excludeSubcategories: Boolean
    """Return only the specified categories."""
    includeCategories: [String!]
  ): [gh_MarketplaceCategory!]!
  """Look up a Marketplace category by its slug."""
  gh_marketplaceCategory(
    """The URL slug of the category."""
    slug: String!
    """Also check topic aliases for the category slug"""
    useTopicAliases: Boolean
  ): gh_MarketplaceCategory
  """Look up a single Marketplace listing"""
  gh_marketplaceListing(
    """
    Select the listing that matches this slug. It's the short name of the listing used in its URL.
    """
    slug: String!
  ): gh_MarketplaceListing
  """Look up Marketplace listings"""
  gh_marketplaceListings(
    """Select listings that can be administered by the specified user."""
    adminId: ID
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned.
    """
    allStates: Boolean
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Select only listings with the given category."""
    categorySlug: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Select listings for products owned by the specified organization."""
    organizationId: ID
    """
    Select only listings where the primary category matches the given category slug.
    """
    primaryCategoryOnly: Boolean = false
    """
    Select the listings with these slugs, if they are visible to the viewer.
    """
    slugs: [String]
    """Also check topic aliases for the category slug"""
    useTopicAliases: Boolean
    """
    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned.
    """
    viewerCanAdmin: Boolean
    """Select only listings that offer a free trial."""
    withFreeTrialsOnly: Boolean = false
  ): gh_MarketplaceListingConnection!
  """Return information about the GitHub instance"""
  gh_meta: gh_GitHubMetadata!
  """Fetches an object given its ID."""
  gh_node(
    """ID of the object."""
    id: ID!
  ): gh_Node
  """Lookup nodes by a list of IDs."""
  gh_nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [gh_Node]!
  """Lookup a organization by login."""
  gh_organization(
    """The organization's login."""
    login: String!
  ): gh_Organization
  """The client's rate limit information."""
  gh_rateLimit(
    """If true, calculate the cost for the query without evaluating it"""
    dryRun: Boolean = false
  ): gh_RateLimit
  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  gh_relay: Query!
  """Lookup a given repository by the owner and repository name."""
  gh_repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true
    """The name of the repository"""
    name: String!
    """The login field of a user or organization"""
    owner: String!
  ): gh_Repository
  """
  Lookup a repository owner (ie. either a User or an Organization) by login.
  """
  gh_repositoryOwner(
    """The username to lookup the owner by."""
    login: String!
  ): gh_RepositoryOwner
  """Lookup resource by a URL."""
  gh_resource(
    """The URL."""
    url: gh_URI!
  ): gh_UniformResourceLocatable
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  gh_search(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!
    """The types of search items to search within."""
    type: gh_SearchType!
  ): gh_SearchResultItemConnection!
  """GitHub Security Advisories"""
  gh_securityAdvisories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """A list of classifications to filter advisories by."""
    classifications: [gh_SecurityAdvisoryClassification!]
    """Returns the first _n_ elements from the list."""
    first: Int
    """Filter advisories by identifier, e.g. GHSA or CVE."""
    identifier: gh_SecurityAdvisoryIdentifierFilter
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the returned topics."""
    orderBy: gh_SecurityAdvisoryOrder = {direction: DESC, field: UPDATED_AT}
    """Filter advisories to those published since a time in the past."""
    publishedSince: DateTime
    """Filter advisories to those updated since a time in the past."""
    updatedSince: DateTime
  ): gh_SecurityAdvisoryConnection!
  """Fetch a Security Advisory by its GHSA ID"""
  gh_securityAdvisory(
    """GitHub Security Advisory ID."""
    ghsaId: String!
  ): gh_SecurityAdvisory
  """Software Vulnerabilities documented by GitHub Security Advisories"""
  gh_securityVulnerabilities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """A list of advisory classifications to filter vulnerabilities by."""
    classifications: [gh_SecurityAdvisoryClassification!]
    """An ecosystem to filter vulnerabilities by."""
    ecosystem: gh_SecurityAdvisoryEcosystem
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for the returned topics."""
    orderBy: gh_SecurityVulnerabilityOrder = {direction: DESC, field: UPDATED_AT}
    """A package name to filter vulnerabilities by."""
    package: String
    """A list of severities to filter vulnerabilities by."""
    severities: [gh_SecurityAdvisorySeverity!]
  ): gh_SecurityVulnerabilityConnection!
  """Users and organizations who can be sponsored via GitHub Sponsors."""
  gh_sponsorables(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """
    Optional filter for which dependencies should be checked for sponsorable
    owners. Only sponsorable owners of dependencies in this ecosystem will be
    included. Used when onlyDependencies = true.
    
    **Upcoming Change on 2022-07-01 UTC**
    **Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
    **Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem.
    """
    dependencyEcosystem: gh_SecurityAdvisoryEcosystem
    """
    Optional filter for which dependencies should be checked for sponsorable
    owners. Only sponsorable owners of dependencies in this ecosystem will be
    included. Used when onlyDependencies = true.
    """
    ecosystem: gh_DependencyGraphEcosystem
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Whether only sponsorables who own the viewer's dependencies will be
    returned. Must be authenticated to use. Can check an organization instead
    for their dependencies owned by sponsorables by passing
    orgLoginForDependencies.
    """
    onlyDependencies: Boolean = false
    """
    Ordering options for users and organizations returned from the connection.
    """
    orderBy: gh_SponsorableOrder = {direction: ASC, field: LOGIN}
    """
    Optional organization username for whose dependencies should be checked.
    Used when onlyDependencies = true. Omit to check your own dependencies. If
    you are not an administrator of the organization, only dependencies from its
    public repositories will be considered.
    """
    orgLoginForDependencies: String
  ): gh_SponsorableItemConnection!
  """Look up a topic by name."""
  gh_topic(
    """The topic's name."""
    name: String!
  ): gh_Topic
  """Lookup a user by login."""
  gh_user(
    """The user's login."""
    login: String!
  ): gh_User
  """The currently authenticated user."""
  gh_viewer: gh_User!
}

type GithubMutation {
  """Clear all of a customer's queued migrations"""
  gh_abortQueuedMigrations(
    """Parameters for AbortQueuedMigrations"""
    input: gh_AbortQueuedMigrationsInput!
  ): gh_AbortQueuedMigrationsPayload
  """Abort a repository migration queued or in progress."""
  gh_abortRepositoryMigration(
    """Parameters for AbortRepositoryMigration"""
    input: gh_AbortRepositoryMigrationInput!
  ): gh_AbortRepositoryMigrationPayload
  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  gh_acceptEnterpriseAdministratorInvitation(
    """Parameters for AcceptEnterpriseAdministratorInvitation"""
    input: gh_AcceptEnterpriseAdministratorInvitationInput!
  ): gh_AcceptEnterpriseAdministratorInvitationPayload
  """Applies a suggested topic to the repository."""
  gh_acceptTopicSuggestion(
    """Parameters for AcceptTopicSuggestion"""
    input: gh_AcceptTopicSuggestionInput!
  ): gh_AcceptTopicSuggestionPayload
  """Adds assignees to an assignable object."""
  gh_addAssigneesToAssignable(
    """Parameters for AddAssigneesToAssignable"""
    input: gh_AddAssigneesToAssignableInput!
  ): gh_AddAssigneesToAssignablePayload
  """Adds a comment to an Issue or Pull Request."""
  gh_addComment(
    """Parameters for AddComment"""
    input: gh_AddCommentInput!
  ): gh_AddCommentPayload
  """
  Adds a comment to a Discussion, possibly as a reply to another comment.
  """
  gh_addDiscussionComment(
    """Parameters for AddDiscussionComment"""
    input: gh_AddDiscussionCommentInput!
  ): gh_AddDiscussionCommentPayload
  """Vote for an option in a discussion poll."""
  gh_addDiscussionPollVote(
    """Parameters for AddDiscussionPollVote"""
    input: gh_AddDiscussionPollVoteInput!
  ): gh_AddDiscussionPollVotePayload
  """Adds enterprise members to an organization within the enterprise."""
  gh_addEnterpriseOrganizationMember(
    """Parameters for AddEnterpriseOrganizationMember"""
    input: gh_AddEnterpriseOrganizationMemberInput!
  ): gh_AddEnterpriseOrganizationMemberPayload
  """Adds a support entitlement to an enterprise member."""
  gh_addEnterpriseSupportEntitlement(
    """Parameters for AddEnterpriseSupportEntitlement"""
    input: gh_AddEnterpriseSupportEntitlementInput!
  ): gh_AddEnterpriseSupportEntitlementPayload
  """Adds labels to a labelable object."""
  gh_addLabelsToLabelable(
    """Parameters for AddLabelsToLabelable"""
    input: gh_AddLabelsToLabelableInput!
  ): gh_AddLabelsToLabelablePayload
  """
  Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
  """
  gh_addProjectCard(
    """Parameters for AddProjectCard"""
    input: gh_AddProjectCardInput!
  ): gh_AddProjectCardPayload
  """Adds a column to a Project."""
  gh_addProjectColumn(
    """Parameters for AddProjectColumn"""
    input: gh_AddProjectColumnInput!
  ): gh_AddProjectColumnPayload
  """Creates a new draft issue and add it to a Project."""
  gh_addProjectV2DraftIssue(
    """Parameters for AddProjectV2DraftIssue"""
    input: gh_AddProjectV2DraftIssueInput!
  ): gh_AddProjectV2DraftIssuePayload
  """Links an existing content instance to a Project."""
  gh_addProjectV2ItemById(
    """Parameters for AddProjectV2ItemById"""
    input: gh_AddProjectV2ItemByIdInput!
  ): gh_AddProjectV2ItemByIdPayload
  """Adds a review to a Pull Request."""
  gh_addPullRequestReview(
    """Parameters for AddPullRequestReview"""
    input: gh_AddPullRequestReviewInput!
  ): gh_AddPullRequestReviewPayload
  """Adds a comment to a review."""
  gh_addPullRequestReviewComment(
    """Parameters for AddPullRequestReviewComment"""
    input: gh_AddPullRequestReviewCommentInput!
  ): gh_AddPullRequestReviewCommentPayload
  """Adds a new thread to a pending Pull Request Review."""
  gh_addPullRequestReviewThread(
    """Parameters for AddPullRequestReviewThread"""
    input: gh_AddPullRequestReviewThreadInput!
  ): gh_AddPullRequestReviewThreadPayload
  """Adds a reply to an existing Pull Request Review Thread."""
  gh_addPullRequestReviewThreadReply(
    """Parameters for AddPullRequestReviewThreadReply"""
    input: gh_AddPullRequestReviewThreadReplyInput!
  ): gh_AddPullRequestReviewThreadReplyPayload
  """Adds a reaction to a subject."""
  gh_addReaction(
    """Parameters for AddReaction"""
    input: gh_AddReactionInput!
  ): gh_AddReactionPayload
  """Adds a star to a Starrable."""
  gh_addStar(
    """Parameters for AddStar"""
    input: gh_AddStarInput!
  ): gh_AddStarPayload
  """Add an upvote to a discussion or discussion comment."""
  gh_addUpvote(
    """Parameters for AddUpvote"""
    input: gh_AddUpvoteInput!
  ): gh_AddUpvotePayload
  """Adds a verifiable domain to an owning account."""
  gh_addVerifiableDomain(
    """Parameters for AddVerifiableDomain"""
    input: gh_AddVerifiableDomainInput!
  ): gh_AddVerifiableDomainPayload
  """Approve all pending deployments under one or more environments"""
  gh_approveDeployments(
    """Parameters for ApproveDeployments"""
    input: gh_ApproveDeploymentsInput!
  ): gh_ApproveDeploymentsPayload
  """Approve a verifiable domain for notification delivery."""
  gh_approveVerifiableDomain(
    """Parameters for ApproveVerifiableDomain"""
    input: gh_ApproveVerifiableDomainInput!
  ): gh_ApproveVerifiableDomainPayload
  """Archives a ProjectV2Item"""
  gh_archiveProjectV2Item(
    """Parameters for ArchiveProjectV2Item"""
    input: gh_ArchiveProjectV2ItemInput!
  ): gh_ArchiveProjectV2ItemPayload
  """Marks a repository as archived."""
  gh_archiveRepository(
    """Parameters for ArchiveRepository"""
    input: gh_ArchiveRepositoryInput!
  ): gh_ArchiveRepositoryPayload
  """
  Cancels a pending invitation for an administrator to join an enterprise.
  """
  gh_cancelEnterpriseAdminInvitation(
    """Parameters for CancelEnterpriseAdminInvitation"""
    input: gh_CancelEnterpriseAdminInvitationInput!
  ): gh_CancelEnterpriseAdminInvitationPayload
  """Cancel an active sponsorship."""
  gh_cancelSponsorship(
    """Parameters for CancelSponsorship"""
    input: gh_CancelSponsorshipInput!
  ): gh_CancelSponsorshipPayload
  """Update your status on GitHub."""
  gh_changeUserStatus(
    """Parameters for ChangeUserStatus"""
    input: gh_ChangeUserStatusInput!
  ): gh_ChangeUserStatusPayload
  """Clears all labels from a labelable object."""
  gh_clearLabelsFromLabelable(
    """Parameters for ClearLabelsFromLabelable"""
    input: gh_ClearLabelsFromLabelableInput!
  ): gh_ClearLabelsFromLabelablePayload
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  gh_clearProjectV2ItemFieldValue(
    """Parameters for ClearProjectV2ItemFieldValue"""
    input: gh_ClearProjectV2ItemFieldValueInput!
  ): gh_ClearProjectV2ItemFieldValuePayload
  """
  Creates a new project by cloning configuration from an existing project.
  """
  gh_cloneProject(
    """Parameters for CloneProject"""
    input: gh_CloneProjectInput!
  ): gh_CloneProjectPayload
  """
  Create a new repository with the same files and directory structure as a template repository.
  """
  gh_cloneTemplateRepository(
    """Parameters for CloneTemplateRepository"""
    input: gh_CloneTemplateRepositoryInput!
  ): gh_CloneTemplateRepositoryPayload
  """Close a discussion."""
  gh_closeDiscussion(
    """Parameters for CloseDiscussion"""
    input: gh_CloseDiscussionInput!
  ): gh_CloseDiscussionPayload
  """Close an issue."""
  gh_closeIssue(
    """Parameters for CloseIssue"""
    input: gh_CloseIssueInput!
  ): gh_CloseIssuePayload
  """Close a pull request."""
  gh_closePullRequest(
    """Parameters for ClosePullRequest"""
    input: gh_ClosePullRequestInput!
  ): gh_ClosePullRequestPayload
  """
  Convert a project note card to one associated with a newly created issue.
  """
  gh_convertProjectCardNoteToIssue(
    """Parameters for ConvertProjectCardNoteToIssue"""
    input: gh_ConvertProjectCardNoteToIssueInput!
  ): gh_ConvertProjectCardNoteToIssuePayload
  """Converts a pull request to draft"""
  gh_convertPullRequestToDraft(
    """Parameters for ConvertPullRequestToDraft"""
    input: gh_ConvertPullRequestToDraftInput!
  ): gh_ConvertPullRequestToDraftPayload
  """Copy a project."""
  gh_copyProjectV2(
    """Parameters for CopyProjectV2"""
    input: gh_CopyProjectV2Input!
  ): gh_CopyProjectV2Payload
  """Invites a user to claim reattributable data"""
  gh_createAttributionInvitation(
    """Parameters for CreateAttributionInvitation"""
    input: gh_CreateAttributionInvitationInput!
  ): gh_CreateAttributionInvitationPayload
  """Create a new branch protection rule"""
  gh_createBranchProtectionRule(
    """Parameters for CreateBranchProtectionRule"""
    input: gh_CreateBranchProtectionRuleInput!
  ): gh_CreateBranchProtectionRulePayload
  """Create a check run."""
  gh_createCheckRun(
    """Parameters for CreateCheckRun"""
    input: gh_CreateCheckRunInput!
  ): gh_CreateCheckRunPayload
  """Create a check suite"""
  gh_createCheckSuite(
    """Parameters for CreateCheckSuite"""
    input: gh_CreateCheckSuiteInput!
  ): gh_CreateCheckSuitePayload
  """
  Appends a commit to the given branch as the authenticated user.
  
  This mutation creates a commit whose parent is the HEAD of the provided
  branch and also updates that branch to point to the new commit.
  It can be thought of as similar to `git commit`.
  
  ### Locating a Branch
  
  Commits are appended to a `branch` of type `Ref`.
  This must refer to a git branch (i.e.  the fully qualified path must
  begin with `refs/heads/`, although including this prefix is optional.
  
  Callers may specify the `branch` to commit to either by its global node
  ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
  more details see the documentation for `CommittableBranch`.
  
  ### Describing Changes
  
  `fileChanges` are specified as a `FilesChanges` object describing
  `FileAdditions` and `FileDeletions`.
  
  Please see the documentation for `FileChanges` for more information on
  how to use this argument to describe any set of file changes.
  
  ### Authorship
  
  Similar to the web commit interface, this mutation does not support
  specifying the author or committer of the commit and will not add
  support for this in the future.
  
  A commit created by a successful execution of this mutation will be
  authored by the owner of the credential which authenticates the API
  request.  The committer will be identical to that of commits authored
  using the web interface.
  
  If you need full control over author and committer information, please
  use the Git Database REST API instead.
  
  ### Commit Signing
  
  Commits made using this mutation are automatically signed by GitHub if
  supported and will be marked as verified in the user interface.
  """
  gh_createCommitOnBranch(
    """Parameters for CreateCommitOnBranch"""
    input: gh_CreateCommitOnBranchInput!
  ): gh_CreateCommitOnBranchPayload
  """Creates a new deployment event."""
  gh_createDeployment(
    """Parameters for CreateDeployment"""
    input: gh_CreateDeploymentInput!
  ): gh_CreateDeploymentPayload @preview(toggledBy: "flash-preview")
  """Create a deployment status."""
  gh_createDeploymentStatus(
    """Parameters for CreateDeploymentStatus"""
    input: gh_CreateDeploymentStatusInput!
  ): gh_CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview")
  """Create a discussion."""
  gh_createDiscussion(
    """Parameters for CreateDiscussion"""
    input: gh_CreateDiscussionInput!
  ): gh_CreateDiscussionPayload
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  gh_createEnterpriseOrganization(
    """Parameters for CreateEnterpriseOrganization"""
    input: gh_CreateEnterpriseOrganizationInput!
  ): gh_CreateEnterpriseOrganizationPayload
  """Creates an environment or simply returns it if already exists."""
  gh_createEnvironment(
    """Parameters for CreateEnvironment"""
    input: gh_CreateEnvironmentInput!
  ): gh_CreateEnvironmentPayload
  """Creates a new IP allow list entry."""
  gh_createIpAllowListEntry(
    """Parameters for CreateIpAllowListEntry"""
    input: gh_CreateIpAllowListEntryInput!
  ): gh_CreateIpAllowListEntryPayload
  """Creates a new issue."""
  gh_createIssue(
    """Parameters for CreateIssue"""
    input: gh_CreateIssueInput!
  ): gh_CreateIssuePayload
  """Creates a new label."""
  gh_createLabel(
    """Parameters for CreateLabel"""
    input: gh_CreateLabelInput!
  ): gh_CreateLabelPayload @preview(toggledBy: "bane-preview")
  """Create a branch linked to an issue."""
  gh_createLinkedBranch(
    """Parameters for CreateLinkedBranch"""
    input: gh_CreateLinkedBranchInput!
  ): gh_CreateLinkedBranchPayload
  """Creates a GitHub Enterprise Importer (GEI) migration source."""
  gh_createMigrationSource(
    """Parameters for CreateMigrationSource"""
    input: gh_CreateMigrationSourceInput!
  ): gh_CreateMigrationSourcePayload
  """Creates a new project."""
  gh_createProject(
    """Parameters for CreateProject"""
    input: gh_CreateProjectInput!
  ): gh_CreateProjectPayload
  """Creates a new project."""
  gh_createProjectV2(
    """Parameters for CreateProjectV2"""
    input: gh_CreateProjectV2Input!
  ): gh_CreateProjectV2Payload
  """Create a new project field."""
  gh_createProjectV2Field(
    """Parameters for CreateProjectV2Field"""
    input: gh_CreateProjectV2FieldInput!
  ): gh_CreateProjectV2FieldPayload
  """Create a new pull request"""
  gh_createPullRequest(
    """Parameters for CreatePullRequest"""
    input: gh_CreatePullRequestInput!
  ): gh_CreatePullRequestPayload
  """Create a new Git Ref."""
  gh_createRef(
    """Parameters for CreateRef"""
    input: gh_CreateRefInput!
  ): gh_CreateRefPayload
  """Create a new repository."""
  gh_createRepository(
    """Parameters for CreateRepository"""
    input: gh_CreateRepositoryInput!
  ): gh_CreateRepositoryPayload
  """Create a repository ruleset"""
  gh_createRepositoryRuleset(
    """Parameters for CreateRepositoryRuleset"""
    input: gh_CreateRepositoryRulesetInput!
  ): gh_CreateRepositoryRulesetPayload
  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  gh_createSponsorsListing(
    """Parameters for CreateSponsorsListing"""
    input: gh_CreateSponsorsListingInput!
  ): gh_CreateSponsorsListingPayload
  """Create a new payment tier for your GitHub Sponsors profile."""
  gh_createSponsorsTier(
    """Parameters for CreateSponsorsTier"""
    input: gh_CreateSponsorsTierInput!
  ): gh_CreateSponsorsTierPayload
  """
  Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
  """
  gh_createSponsorship(
    """Parameters for CreateSponsorship"""
    input: gh_CreateSponsorshipInput!
  ): gh_CreateSponsorshipPayload
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  gh_createSponsorships(
    """Parameters for CreateSponsorships"""
    input: gh_CreateSponsorshipsInput!
  ): gh_CreateSponsorshipsPayload
  """Creates a new team discussion."""
  gh_createTeamDiscussion(
    """Parameters for CreateTeamDiscussion"""
    input: gh_CreateTeamDiscussionInput!
  ): gh_CreateTeamDiscussionPayload
  """Creates a new team discussion comment."""
  gh_createTeamDiscussionComment(
    """Parameters for CreateTeamDiscussionComment"""
    input: gh_CreateTeamDiscussionCommentInput!
  ): gh_CreateTeamDiscussionCommentPayload
  """Creates a new user list."""
  gh_createUserList(
    """Parameters for CreateUserList"""
    input: gh_CreateUserListInput!
  ): gh_CreateUserListPayload
  """Rejects a suggested topic for the repository."""
  gh_declineTopicSuggestion(
    """Parameters for DeclineTopicSuggestion"""
    input: gh_DeclineTopicSuggestionInput!
  ): gh_DeclineTopicSuggestionPayload
  """Delete a branch protection rule"""
  gh_deleteBranchProtectionRule(
    """Parameters for DeleteBranchProtectionRule"""
    input: gh_DeleteBranchProtectionRuleInput!
  ): gh_DeleteBranchProtectionRulePayload
  """Deletes a deployment."""
  gh_deleteDeployment(
    """Parameters for DeleteDeployment"""
    input: gh_DeleteDeploymentInput!
  ): gh_DeleteDeploymentPayload
  """Delete a discussion and all of its replies."""
  gh_deleteDiscussion(
    """Parameters for DeleteDiscussion"""
    input: gh_DeleteDiscussionInput!
  ): gh_DeleteDiscussionPayload
  """Delete a discussion comment. If it has replies, wipe it instead."""
  gh_deleteDiscussionComment(
    """Parameters for DeleteDiscussionComment"""
    input: gh_DeleteDiscussionCommentInput!
  ): gh_DeleteDiscussionCommentPayload
  """Deletes an environment"""
  gh_deleteEnvironment(
    """Parameters for DeleteEnvironment"""
    input: gh_DeleteEnvironmentInput!
  ): gh_DeleteEnvironmentPayload
  """Deletes an IP allow list entry."""
  gh_deleteIpAllowListEntry(
    """Parameters for DeleteIpAllowListEntry"""
    input: gh_DeleteIpAllowListEntryInput!
  ): gh_DeleteIpAllowListEntryPayload
  """Deletes an Issue object."""
  gh_deleteIssue(
    """Parameters for DeleteIssue"""
    input: gh_DeleteIssueInput!
  ): gh_DeleteIssuePayload
  """Deletes an IssueComment object."""
  gh_deleteIssueComment(
    """Parameters for DeleteIssueComment"""
    input: gh_DeleteIssueCommentInput!
  ): gh_DeleteIssueCommentPayload
  """Deletes a label."""
  gh_deleteLabel(
    """Parameters for DeleteLabel"""
    input: gh_DeleteLabelInput!
  ): gh_DeleteLabelPayload @preview(toggledBy: "bane-preview")
  """Unlink a branch from an issue."""
  gh_deleteLinkedBranch(
    """Parameters for DeleteLinkedBranch"""
    input: gh_DeleteLinkedBranchInput!
  ): gh_DeleteLinkedBranchPayload
  """Delete a package version."""
  gh_deletePackageVersion(
    """Parameters for DeletePackageVersion"""
    input: gh_DeletePackageVersionInput!
  ): gh_DeletePackageVersionPayload @preview(toggledBy: "package-deletes-preview")
  """Deletes a project."""
  gh_deleteProject(
    """Parameters for DeleteProject"""
    input: gh_DeleteProjectInput!
  ): gh_DeleteProjectPayload
  """Deletes a project card."""
  gh_deleteProjectCard(
    """Parameters for DeleteProjectCard"""
    input: gh_DeleteProjectCardInput!
  ): gh_DeleteProjectCardPayload
  """Deletes a project column."""
  gh_deleteProjectColumn(
    """Parameters for DeleteProjectColumn"""
    input: gh_DeleteProjectColumnInput!
  ): gh_DeleteProjectColumnPayload
  """Delete a project."""
  gh_deleteProjectV2(
    """Parameters for DeleteProjectV2"""
    input: gh_DeleteProjectV2Input!
  ): gh_DeleteProjectV2Payload
  """Delete a project field."""
  gh_deleteProjectV2Field(
    """Parameters for DeleteProjectV2Field"""
    input: gh_DeleteProjectV2FieldInput!
  ): gh_DeleteProjectV2FieldPayload
  """Deletes an item from a Project."""
  gh_deleteProjectV2Item(
    """Parameters for DeleteProjectV2Item"""
    input: gh_DeleteProjectV2ItemInput!
  ): gh_DeleteProjectV2ItemPayload
  """Deletes a project workflow."""
  gh_deleteProjectV2Workflow(
    """Parameters for DeleteProjectV2Workflow"""
    input: gh_DeleteProjectV2WorkflowInput!
  ): gh_DeleteProjectV2WorkflowPayload
  """Deletes a pull request review."""
  gh_deletePullRequestReview(
    """Parameters for DeletePullRequestReview"""
    input: gh_DeletePullRequestReviewInput!
  ): gh_DeletePullRequestReviewPayload
  """Deletes a pull request review comment."""
  gh_deletePullRequestReviewComment(
    """Parameters for DeletePullRequestReviewComment"""
    input: gh_DeletePullRequestReviewCommentInput!
  ): gh_DeletePullRequestReviewCommentPayload
  """Delete a Git Ref."""
  gh_deleteRef(
    """Parameters for DeleteRef"""
    input: gh_DeleteRefInput!
  ): gh_DeleteRefPayload
  """Delete a repository ruleset"""
  gh_deleteRepositoryRuleset(
    """Parameters for DeleteRepositoryRuleset"""
    input: gh_DeleteRepositoryRulesetInput!
  ): gh_DeleteRepositoryRulesetPayload
  """Deletes a team discussion."""
  gh_deleteTeamDiscussion(
    """Parameters for DeleteTeamDiscussion"""
    input: gh_DeleteTeamDiscussionInput!
  ): gh_DeleteTeamDiscussionPayload
  """Deletes a team discussion comment."""
  gh_deleteTeamDiscussionComment(
    """Parameters for DeleteTeamDiscussionComment"""
    input: gh_DeleteTeamDiscussionCommentInput!
  ): gh_DeleteTeamDiscussionCommentPayload
  """Deletes a user list."""
  gh_deleteUserList(
    """Parameters for DeleteUserList"""
    input: gh_DeleteUserListInput!
  ): gh_DeleteUserListPayload
  """Deletes a verifiable domain."""
  gh_deleteVerifiableDomain(
    """Parameters for DeleteVerifiableDomain"""
    input: gh_DeleteVerifiableDomainInput!
  ): gh_DeleteVerifiableDomainPayload
  """Remove a pull request from the merge queue."""
  gh_dequeuePullRequest(
    """Parameters for DequeuePullRequest"""
    input: gh_DequeuePullRequestInput!
  ): gh_DequeuePullRequestPayload
  """Disable auto merge on the given pull request"""
  gh_disablePullRequestAutoMerge(
    """Parameters for DisablePullRequestAutoMerge"""
    input: gh_DisablePullRequestAutoMergeInput!
  ): gh_DisablePullRequestAutoMergePayload
  """Dismisses an approved or rejected pull request review."""
  gh_dismissPullRequestReview(
    """Parameters for DismissPullRequestReview"""
    input: gh_DismissPullRequestReviewInput!
  ): gh_DismissPullRequestReviewPayload
  """Dismisses the Dependabot alert."""
  gh_dismissRepositoryVulnerabilityAlert(
    """Parameters for DismissRepositoryVulnerabilityAlert"""
    input: gh_DismissRepositoryVulnerabilityAlertInput!
  ): gh_DismissRepositoryVulnerabilityAlertPayload
  """Enable the default auto-merge on a pull request."""
  gh_enablePullRequestAutoMerge(
    """Parameters for EnablePullRequestAutoMerge"""
    input: gh_EnablePullRequestAutoMergeInput!
  ): gh_EnablePullRequestAutoMergePayload
  """Add a pull request to the merge queue."""
  gh_enqueuePullRequest(
    """Parameters for EnqueuePullRequest"""
    input: gh_EnqueuePullRequestInput!
  ): gh_EnqueuePullRequestPayload
  """Follow an organization."""
  gh_followOrganization(
    """Parameters for FollowOrganization"""
    input: gh_FollowOrganizationInput!
  ): gh_FollowOrganizationPayload
  """Follow a user."""
  gh_followUser(
    """Parameters for FollowUser"""
    input: gh_FollowUserInput!
  ): gh_FollowUserPayload
  """
  Grant the migrator role to a user for all organizations under an enterprise account.
  """
  gh_grantEnterpriseOrganizationsMigratorRole(
    """Parameters for GrantEnterpriseOrganizationsMigratorRole"""
    input: gh_GrantEnterpriseOrganizationsMigratorRoleInput!
  ): gh_GrantEnterpriseOrganizationsMigratorRolePayload
  """Grant the migrator role to a user or a team."""
  gh_grantMigratorRole(
    """Parameters for GrantMigratorRole"""
    input: gh_GrantMigratorRoleInput!
  ): gh_GrantMigratorRolePayload
  """Creates a new project by importing columns and a list of issues/PRs."""
  gh_importProject(
    """Parameters for ImportProject"""
    input: gh_ImportProjectInput!
  ): gh_ImportProjectPayload @preview(toggledBy: "slothette-preview")
  """Invite someone to become an administrator of the enterprise."""
  gh_inviteEnterpriseAdmin(
    """Parameters for InviteEnterpriseAdmin"""
    input: gh_InviteEnterpriseAdminInput!
  ): gh_InviteEnterpriseAdminPayload
  """Links a project to a repository."""
  gh_linkProjectV2ToRepository(
    """Parameters for LinkProjectV2ToRepository"""
    input: gh_LinkProjectV2ToRepositoryInput!
  ): gh_LinkProjectV2ToRepositoryPayload
  """Links a project to a team."""
  gh_linkProjectV2ToTeam(
    """Parameters for LinkProjectV2ToTeam"""
    input: gh_LinkProjectV2ToTeamInput!
  ): gh_LinkProjectV2ToTeamPayload
  """Creates a repository link for a project."""
  gh_linkRepositoryToProject(
    """Parameters for LinkRepositoryToProject"""
    input: gh_LinkRepositoryToProjectInput!
  ): gh_LinkRepositoryToProjectPayload
  """Lock a lockable object"""
  gh_lockLockable(
    """Parameters for LockLockable"""
    input: gh_LockLockableInput!
  ): gh_LockLockablePayload
  """
  Mark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  gh_markDiscussionCommentAsAnswer(
    """Parameters for MarkDiscussionCommentAsAnswer"""
    input: gh_MarkDiscussionCommentAsAnswerInput!
  ): gh_MarkDiscussionCommentAsAnswerPayload
  """Mark a pull request file as viewed"""
  gh_markFileAsViewed(
    """Parameters for MarkFileAsViewed"""
    input: gh_MarkFileAsViewedInput!
  ): gh_MarkFileAsViewedPayload
  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  gh_markProjectV2AsTemplate(
    """Parameters for MarkProjectV2AsTemplate"""
    input: gh_MarkProjectV2AsTemplateInput!
  ): gh_MarkProjectV2AsTemplatePayload
  """Marks a pull request ready for review."""
  gh_markPullRequestReadyForReview(
    """Parameters for MarkPullRequestReadyForReview"""
    input: gh_MarkPullRequestReadyForReviewInput!
  ): gh_MarkPullRequestReadyForReviewPayload
  """Merge a head into a branch."""
  gh_mergeBranch(
    """Parameters for MergeBranch"""
    input: gh_MergeBranchInput!
  ): gh_MergeBranchPayload
  """Merge a pull request."""
  gh_mergePullRequest(
    """Parameters for MergePullRequest"""
    input: gh_MergePullRequestInput!
  ): gh_MergePullRequestPayload
  """Minimizes a comment on an Issue, Commit, Pull Request, or Gist"""
  gh_minimizeComment(
    """Parameters for MinimizeComment"""
    input: gh_MinimizeCommentInput!
  ): gh_MinimizeCommentPayload
  """Moves a project card to another place."""
  gh_moveProjectCard(
    """Parameters for MoveProjectCard"""
    input: gh_MoveProjectCardInput!
  ): gh_MoveProjectCardPayload
  """Moves a project column to another place."""
  gh_moveProjectColumn(
    """Parameters for MoveProjectColumn"""
    input: gh_MoveProjectColumnInput!
  ): gh_MoveProjectColumnPayload
  """Pin an issue to a repository"""
  gh_pinIssue(
    """Parameters for PinIssue"""
    input: gh_PinIssueInput!
  ): gh_PinIssuePayload
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  gh_publishSponsorsTier(
    """Parameters for PublishSponsorsTier"""
    input: gh_PublishSponsorsTierInput!
  ): gh_PublishSponsorsTierPayload
  """Regenerates the identity provider recovery codes for an enterprise"""
  gh_regenerateEnterpriseIdentityProviderRecoveryCodes(
    """Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes"""
    input: gh_RegenerateEnterpriseIdentityProviderRecoveryCodesInput!
  ): gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload
  """Regenerates a verifiable domain's verification token."""
  gh_regenerateVerifiableDomainToken(
    """Parameters for RegenerateVerifiableDomainToken"""
    input: gh_RegenerateVerifiableDomainTokenInput!
  ): gh_RegenerateVerifiableDomainTokenPayload
  """Reject all pending deployments under one or more environments"""
  gh_rejectDeployments(
    """Parameters for RejectDeployments"""
    input: gh_RejectDeploymentsInput!
  ): gh_RejectDeploymentsPayload
  """Removes assignees from an assignable object."""
  gh_removeAssigneesFromAssignable(
    """Parameters for RemoveAssigneesFromAssignable"""
    input: gh_RemoveAssigneesFromAssignableInput!
  ): gh_RemoveAssigneesFromAssignablePayload
  """Removes an administrator from the enterprise."""
  gh_removeEnterpriseAdmin(
    """Parameters for RemoveEnterpriseAdmin"""
    input: gh_RemoveEnterpriseAdminInput!
  ): gh_RemoveEnterpriseAdminPayload
  """Removes the identity provider from an enterprise"""
  gh_removeEnterpriseIdentityProvider(
    """Parameters for RemoveEnterpriseIdentityProvider"""
    input: gh_RemoveEnterpriseIdentityProviderInput!
  ): gh_RemoveEnterpriseIdentityProviderPayload
  """Removes a user from all organizations within the enterprise"""
  gh_removeEnterpriseMember(
    """Parameters for RemoveEnterpriseMember"""
    input: gh_RemoveEnterpriseMemberInput!
  ): gh_RemoveEnterpriseMemberPayload
  """Removes an organization from the enterprise"""
  gh_removeEnterpriseOrganization(
    """Parameters for RemoveEnterpriseOrganization"""
    input: gh_RemoveEnterpriseOrganizationInput!
  ): gh_RemoveEnterpriseOrganizationPayload
  """Removes a support entitlement from an enterprise member."""
  gh_removeEnterpriseSupportEntitlement(
    """Parameters for RemoveEnterpriseSupportEntitlement"""
    input: gh_RemoveEnterpriseSupportEntitlementInput!
  ): gh_RemoveEnterpriseSupportEntitlementPayload
  """Removes labels from a Labelable object."""
  gh_removeLabelsFromLabelable(
    """Parameters for RemoveLabelsFromLabelable"""
    input: gh_RemoveLabelsFromLabelableInput!
  ): gh_RemoveLabelsFromLabelablePayload
  """Removes outside collaborator from all repositories in an organization."""
  gh_removeOutsideCollaborator(
    """Parameters for RemoveOutsideCollaborator"""
    input: gh_RemoveOutsideCollaboratorInput!
  ): gh_RemoveOutsideCollaboratorPayload
  """Removes a reaction from a subject."""
  gh_removeReaction(
    """Parameters for RemoveReaction"""
    input: gh_RemoveReactionInput!
  ): gh_RemoveReactionPayload
  """Removes a star from a Starrable."""
  gh_removeStar(
    """Parameters for RemoveStar"""
    input: gh_RemoveStarInput!
  ): gh_RemoveStarPayload
  """Remove an upvote to a discussion or discussion comment."""
  gh_removeUpvote(
    """Parameters for RemoveUpvote"""
    input: gh_RemoveUpvoteInput!
  ): gh_RemoveUpvotePayload
  """Reopen a discussion."""
  gh_reopenDiscussion(
    """Parameters for ReopenDiscussion"""
    input: gh_ReopenDiscussionInput!
  ): gh_ReopenDiscussionPayload
  """Reopen a issue."""
  gh_reopenIssue(
    """Parameters for ReopenIssue"""
    input: gh_ReopenIssueInput!
  ): gh_ReopenIssuePayload
  """Reopen a pull request."""
  gh_reopenPullRequest(
    """Parameters for ReopenPullRequest"""
    input: gh_ReopenPullRequestInput!
  ): gh_ReopenPullRequestPayload
  """Set review requests on a pull request."""
  gh_requestReviews(
    """Parameters for RequestReviews"""
    input: gh_RequestReviewsInput!
  ): gh_RequestReviewsPayload
  """Rerequests an existing check suite."""
  gh_rerequestCheckSuite(
    """Parameters for RerequestCheckSuite"""
    input: gh_RerequestCheckSuiteInput!
  ): gh_RerequestCheckSuitePayload
  """Marks a review thread as resolved."""
  gh_resolveReviewThread(
    """Parameters for ResolveReviewThread"""
    input: gh_ResolveReviewThreadInput!
  ): gh_ResolveReviewThreadPayload
  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  gh_retireSponsorsTier(
    """Parameters for RetireSponsorsTier"""
    input: gh_RetireSponsorsTierInput!
  ): gh_RetireSponsorsTierPayload
  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  gh_revertPullRequest(
    """Parameters for RevertPullRequest"""
    input: gh_RevertPullRequestInput!
  ): gh_RevertPullRequestPayload
  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  gh_revokeEnterpriseOrganizationsMigratorRole(
    """Parameters for RevokeEnterpriseOrganizationsMigratorRole"""
    input: gh_RevokeEnterpriseOrganizationsMigratorRoleInput!
  ): gh_RevokeEnterpriseOrganizationsMigratorRolePayload
  """Revoke the migrator role from a user or a team."""
  gh_revokeMigratorRole(
    """Parameters for RevokeMigratorRole"""
    input: gh_RevokeMigratorRoleInput!
  ): gh_RevokeMigratorRolePayload
  """Creates or updates the identity provider for an enterprise."""
  gh_setEnterpriseIdentityProvider(
    """Parameters for SetEnterpriseIdentityProvider"""
    input: gh_SetEnterpriseIdentityProviderInput!
  ): gh_SetEnterpriseIdentityProviderPayload
  """
  Set an organization level interaction limit for an organization's public repositories.
  """
  gh_setOrganizationInteractionLimit(
    """Parameters for SetOrganizationInteractionLimit"""
    input: gh_SetOrganizationInteractionLimitInput!
  ): gh_SetOrganizationInteractionLimitPayload
  """Sets an interaction limit setting for a repository."""
  gh_setRepositoryInteractionLimit(
    """Parameters for SetRepositoryInteractionLimit"""
    input: gh_SetRepositoryInteractionLimitInput!
  ): gh_SetRepositoryInteractionLimitPayload
  """Set a user level interaction limit for an user's public repositories."""
  gh_setUserInteractionLimit(
    """Parameters for SetUserInteractionLimit"""
    input: gh_SetUserInteractionLimitInput!
  ): gh_SetUserInteractionLimitPayload
  """Starts a GitHub Enterprise Importer organization migration."""
  gh_startOrganizationMigration(
    """Parameters for StartOrganizationMigration"""
    input: gh_StartOrganizationMigrationInput!
  ): gh_StartOrganizationMigrationPayload
  """Starts a GitHub Enterprise Importer (GEI) repository migration."""
  gh_startRepositoryMigration(
    """Parameters for StartRepositoryMigration"""
    input: gh_StartRepositoryMigrationInput!
  ): gh_StartRepositoryMigrationPayload
  """Submits a pending pull request review."""
  gh_submitPullRequestReview(
    """Parameters for SubmitPullRequestReview"""
    input: gh_SubmitPullRequestReviewInput!
  ): gh_SubmitPullRequestReviewPayload
  """Transfer an organization from one enterprise to another enterprise."""
  gh_transferEnterpriseOrganization(
    """Parameters for TransferEnterpriseOrganization"""
    input: gh_TransferEnterpriseOrganizationInput!
  ): gh_TransferEnterpriseOrganizationPayload
  """Transfer an issue to a different repository"""
  gh_transferIssue(
    """Parameters for TransferIssue"""
    input: gh_TransferIssueInput!
  ): gh_TransferIssuePayload
  """Unarchives a ProjectV2Item"""
  gh_unarchiveProjectV2Item(
    """Parameters for UnarchiveProjectV2Item"""
    input: gh_UnarchiveProjectV2ItemInput!
  ): gh_UnarchiveProjectV2ItemPayload
  """Unarchives a repository."""
  gh_unarchiveRepository(
    """Parameters for UnarchiveRepository"""
    input: gh_UnarchiveRepositoryInput!
  ): gh_UnarchiveRepositoryPayload
  """Unfollow an organization."""
  gh_unfollowOrganization(
    """Parameters for UnfollowOrganization"""
    input: gh_UnfollowOrganizationInput!
  ): gh_UnfollowOrganizationPayload
  """Unfollow a user."""
  gh_unfollowUser(
    """Parameters for UnfollowUser"""
    input: gh_UnfollowUserInput!
  ): gh_UnfollowUserPayload
  """Unlinks a project from a repository."""
  gh_unlinkProjectV2FromRepository(
    """Parameters for UnlinkProjectV2FromRepository"""
    input: gh_UnlinkProjectV2FromRepositoryInput!
  ): gh_UnlinkProjectV2FromRepositoryPayload
  """Unlinks a project to a team."""
  gh_unlinkProjectV2FromTeam(
    """Parameters for UnlinkProjectV2FromTeam"""
    input: gh_UnlinkProjectV2FromTeamInput!
  ): gh_UnlinkProjectV2FromTeamPayload
  """Deletes a repository link from a project."""
  gh_unlinkRepositoryFromProject(
    """Parameters for UnlinkRepositoryFromProject"""
    input: gh_UnlinkRepositoryFromProjectInput!
  ): gh_UnlinkRepositoryFromProjectPayload
  """Unlock a lockable object"""
  gh_unlockLockable(
    """Parameters for UnlockLockable"""
    input: gh_UnlockLockableInput!
  ): gh_UnlockLockablePayload
  """
  Unmark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  gh_unmarkDiscussionCommentAsAnswer(
    """Parameters for UnmarkDiscussionCommentAsAnswer"""
    input: gh_UnmarkDiscussionCommentAsAnswerInput!
  ): gh_UnmarkDiscussionCommentAsAnswerPayload
  """Unmark a pull request file as viewed"""
  gh_unmarkFileAsViewed(
    """Parameters for UnmarkFileAsViewed"""
    input: gh_UnmarkFileAsViewedInput!
  ): gh_UnmarkFileAsViewedPayload
  """Unmark an issue as a duplicate of another issue."""
  gh_unmarkIssueAsDuplicate(
    """Parameters for UnmarkIssueAsDuplicate"""
    input: gh_UnmarkIssueAsDuplicateInput!
  ): gh_UnmarkIssueAsDuplicatePayload
  """Unmark a project as a template."""
  gh_unmarkProjectV2AsTemplate(
    """Parameters for UnmarkProjectV2AsTemplate"""
    input: gh_UnmarkProjectV2AsTemplateInput!
  ): gh_UnmarkProjectV2AsTemplatePayload
  """Unminimizes a comment on an Issue, Commit, Pull Request, or Gist"""
  gh_unminimizeComment(
    """Parameters for UnminimizeComment"""
    input: gh_UnminimizeCommentInput!
  ): gh_UnminimizeCommentPayload
  """Unpin a pinned issue from a repository"""
  gh_unpinIssue(
    """Parameters for UnpinIssue"""
    input: gh_UnpinIssueInput!
  ): gh_UnpinIssuePayload
  """Marks a review thread as unresolved."""
  gh_unresolveReviewThread(
    """Parameters for UnresolveReviewThread"""
    input: gh_UnresolveReviewThreadInput!
  ): gh_UnresolveReviewThreadPayload
  """Unsubscribes from notifications"""
  gh_unsubscribeFromNotifications(
    """Parameters for UnsubscribeFromNotifications"""
    input: gh_UnsubscribeFromNotificationsInput!
  ): gh_UnsubscribeFromNotificationsPayload
  """Update a branch protection rule"""
  gh_updateBranchProtectionRule(
    """Parameters for UpdateBranchProtectionRule"""
    input: gh_UpdateBranchProtectionRuleInput!
  ): gh_UpdateBranchProtectionRulePayload
  """Update a check run"""
  gh_updateCheckRun(
    """Parameters for UpdateCheckRun"""
    input: gh_UpdateCheckRunInput!
  ): gh_UpdateCheckRunPayload
  """Modifies the settings of an existing check suite"""
  gh_updateCheckSuitePreferences(
    """Parameters for UpdateCheckSuitePreferences"""
    input: gh_UpdateCheckSuitePreferencesInput!
  ): gh_UpdateCheckSuitePreferencesPayload
  """Update a discussion"""
  gh_updateDiscussion(
    """Parameters for UpdateDiscussion"""
    input: gh_UpdateDiscussionInput!
  ): gh_UpdateDiscussionPayload
  """Update the contents of a comment on a Discussion"""
  gh_updateDiscussionComment(
    """Parameters for UpdateDiscussionComment"""
    input: gh_UpdateDiscussionCommentInput!
  ): gh_UpdateDiscussionCommentPayload
  """Updates the role of an enterprise administrator."""
  gh_updateEnterpriseAdministratorRole(
    """Parameters for UpdateEnterpriseAdministratorRole"""
    input: gh_UpdateEnterpriseAdministratorRoleInput!
  ): gh_UpdateEnterpriseAdministratorRolePayload
  """Sets whether private repository forks are enabled for an enterprise."""
  gh_updateEnterpriseAllowPrivateRepositoryForkingSetting(
    """Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting"""
    input: gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!
  ): gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload
  """
  Sets the base repository permission for organizations in an enterprise.
  """
  gh_updateEnterpriseDefaultRepositoryPermissionSetting(
    """Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting"""
    input: gh_UpdateEnterpriseDefaultRepositoryPermissionSettingInput!
  ): gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload
  """
  Sets whether organization members with admin permissions on a repository can change repository visibility.
  """
  gh_updateEnterpriseMembersCanChangeRepositoryVisibilitySetting(
    """
    Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
    """
    input: gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!
  ): gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
  """Sets the members can create repositories setting for an enterprise."""
  gh_updateEnterpriseMembersCanCreateRepositoriesSetting(
    """Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting"""
    input: gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!
  ): gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload
  """Sets the members can delete issues setting for an enterprise."""
  gh_updateEnterpriseMembersCanDeleteIssuesSetting(
    """Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting"""
    input: gh_UpdateEnterpriseMembersCanDeleteIssuesSettingInput!
  ): gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload
  """Sets the members can delete repositories setting for an enterprise."""
  gh_updateEnterpriseMembersCanDeleteRepositoriesSetting(
    """Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting"""
    input: gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!
  ): gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload
  """
  Sets whether members can invite collaborators are enabled for an enterprise.
  """
  gh_updateEnterpriseMembersCanInviteCollaboratorsSetting(
    """Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting"""
    input: gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!
  ): gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload
  """Sets whether or not an organization owner can make purchases."""
  gh_updateEnterpriseMembersCanMakePurchasesSetting(
    """Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting"""
    input: gh_UpdateEnterpriseMembersCanMakePurchasesSettingInput!
  ): gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload
  """
  Sets the members can update protected branches setting for an enterprise.
  """
  gh_updateEnterpriseMembersCanUpdateProtectedBranchesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
    """
    input: gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!
  ): gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload
  """Sets the members can view dependency insights for an enterprise."""
  gh_updateEnterpriseMembersCanViewDependencyInsightsSetting(
    """Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting"""
    input: gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!
  ): gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload
  """Sets whether organization projects are enabled for an enterprise."""
  gh_updateEnterpriseOrganizationProjectsSetting(
    """Parameters for UpdateEnterpriseOrganizationProjectsSetting"""
    input: gh_UpdateEnterpriseOrganizationProjectsSettingInput!
  ): gh_UpdateEnterpriseOrganizationProjectsSettingPayload
  """Updates the role of an enterprise owner with an organization."""
  gh_updateEnterpriseOwnerOrganizationRole(
    """Parameters for UpdateEnterpriseOwnerOrganizationRole"""
    input: gh_UpdateEnterpriseOwnerOrganizationRoleInput!
  ): gh_UpdateEnterpriseOwnerOrganizationRolePayload
  """Updates an enterprise's profile."""
  gh_updateEnterpriseProfile(
    """Parameters for UpdateEnterpriseProfile"""
    input: gh_UpdateEnterpriseProfileInput!
  ): gh_UpdateEnterpriseProfilePayload
  """Sets whether repository projects are enabled for a enterprise."""
  gh_updateEnterpriseRepositoryProjectsSetting(
    """Parameters for UpdateEnterpriseRepositoryProjectsSetting"""
    input: gh_UpdateEnterpriseRepositoryProjectsSettingInput!
  ): gh_UpdateEnterpriseRepositoryProjectsSettingPayload
  """Sets whether team discussions are enabled for an enterprise."""
  gh_updateEnterpriseTeamDiscussionsSetting(
    """Parameters for UpdateEnterpriseTeamDiscussionsSetting"""
    input: gh_UpdateEnterpriseTeamDiscussionsSettingInput!
  ): gh_UpdateEnterpriseTeamDiscussionsSettingPayload
  """
  Sets whether two factor authentication is required for all users in an enterprise.
  """
  gh_updateEnterpriseTwoFactorAuthenticationRequiredSetting(
    """Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting"""
    input: gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!
  ): gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload
  """Updates an environment."""
  gh_updateEnvironment(
    """Parameters for UpdateEnvironment"""
    input: gh_UpdateEnvironmentInput!
  ): gh_UpdateEnvironmentPayload
  """Sets whether an IP allow list is enabled on an owner."""
  gh_updateIpAllowListEnabledSetting(
    """Parameters for UpdateIpAllowListEnabledSetting"""
    input: gh_UpdateIpAllowListEnabledSettingInput!
  ): gh_UpdateIpAllowListEnabledSettingPayload
  """Updates an IP allow list entry."""
  gh_updateIpAllowListEntry(
    """Parameters for UpdateIpAllowListEntry"""
    input: gh_UpdateIpAllowListEntryInput!
  ): gh_UpdateIpAllowListEntryPayload
  """
  Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
  """
  gh_updateIpAllowListForInstalledAppsEnabledSetting(
    """Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting"""
    input: gh_UpdateIpAllowListForInstalledAppsEnabledSettingInput!
  ): gh_UpdateIpAllowListForInstalledAppsEnabledSettingPayload
  """Updates an Issue."""
  gh_updateIssue(
    """Parameters for UpdateIssue"""
    input: gh_UpdateIssueInput!
  ): gh_UpdateIssuePayload
  """Updates an IssueComment object."""
  gh_updateIssueComment(
    """Parameters for UpdateIssueComment"""
    input: gh_UpdateIssueCommentInput!
  ): gh_UpdateIssueCommentPayload
  """Updates an existing label."""
  gh_updateLabel(
    """Parameters for UpdateLabel"""
    input: gh_UpdateLabelInput!
  ): gh_UpdateLabelPayload @preview(toggledBy: "bane-preview")
  """
  Update the setting to restrict notifications to only verified or approved domains available to an owner.
  """
  gh_updateNotificationRestrictionSetting(
    """Parameters for UpdateNotificationRestrictionSetting"""
    input: gh_UpdateNotificationRestrictionSettingInput!
  ): gh_UpdateNotificationRestrictionSettingPayload
  """Sets whether private repository forks are enabled for an organization."""
  gh_updateOrganizationAllowPrivateRepositoryForkingSetting(
    """Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting"""
    input: gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!
  ): gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  gh_updateOrganizationWebCommitSignoffSetting(
    """Parameters for UpdateOrganizationWebCommitSignoffSetting"""
    input: gh_UpdateOrganizationWebCommitSignoffSettingInput!
  ): gh_UpdateOrganizationWebCommitSignoffSettingPayload
  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  gh_updatePatreonSponsorability(
    """Parameters for UpdatePatreonSponsorability"""
    input: gh_UpdatePatreonSponsorabilityInput!
  ): gh_UpdatePatreonSponsorabilityPayload
  """Updates an existing project."""
  gh_updateProject(
    """Parameters for UpdateProject"""
    input: gh_UpdateProjectInput!
  ): gh_UpdateProjectPayload
  """Updates an existing project card."""
  gh_updateProjectCard(
    """Parameters for UpdateProjectCard"""
    input: gh_UpdateProjectCardInput!
  ): gh_UpdateProjectCardPayload
  """Updates an existing project column."""
  gh_updateProjectColumn(
    """Parameters for UpdateProjectColumn"""
    input: gh_UpdateProjectColumnInput!
  ): gh_UpdateProjectColumnPayload
  """Updates an existing project."""
  gh_updateProjectV2(
    """Parameters for UpdateProjectV2"""
    input: gh_UpdateProjectV2Input!
  ): gh_UpdateProjectV2Payload
  """Update the collaborators on a team or a project"""
  gh_updateProjectV2Collaborators(
    """Parameters for UpdateProjectV2Collaborators"""
    input: gh_UpdateProjectV2CollaboratorsInput!
  ): gh_UpdateProjectV2CollaboratorsPayload
  """Updates a draft issue within a Project."""
  gh_updateProjectV2DraftIssue(
    """Parameters for UpdateProjectV2DraftIssue"""
    input: gh_UpdateProjectV2DraftIssueInput!
  ): gh_UpdateProjectV2DraftIssuePayload
  """
  This mutation updates the value of a field for an item in a Project. Currently
  only single-select, text, number, date, and iteration fields are supported.
  """
  gh_updateProjectV2ItemFieldValue(
    """Parameters for UpdateProjectV2ItemFieldValue"""
    input: gh_UpdateProjectV2ItemFieldValueInput!
  ): gh_UpdateProjectV2ItemFieldValuePayload
  """
  This mutation updates the position of the item in the project, where the position represents the priority of an item.
  """
  gh_updateProjectV2ItemPosition(
    """Parameters for UpdateProjectV2ItemPosition"""
    input: gh_UpdateProjectV2ItemPositionInput!
  ): gh_UpdateProjectV2ItemPositionPayload
  """Update a pull request"""
  gh_updatePullRequest(
    """Parameters for UpdatePullRequest"""
    input: gh_UpdatePullRequestInput!
  ): gh_UpdatePullRequestPayload
  """Merge or Rebase HEAD from upstream branch into pull request branch"""
  gh_updatePullRequestBranch(
    """Parameters for UpdatePullRequestBranch"""
    input: gh_UpdatePullRequestBranchInput!
  ): gh_UpdatePullRequestBranchPayload
  """Updates the body of a pull request review."""
  gh_updatePullRequestReview(
    """Parameters for UpdatePullRequestReview"""
    input: gh_UpdatePullRequestReviewInput!
  ): gh_UpdatePullRequestReviewPayload
  """Updates a pull request review comment."""
  gh_updatePullRequestReviewComment(
    """Parameters for UpdatePullRequestReviewComment"""
    input: gh_UpdatePullRequestReviewCommentInput!
  ): gh_UpdatePullRequestReviewCommentPayload
  """Update a Git Ref."""
  gh_updateRef(
    """Parameters for UpdateRef"""
    input: gh_UpdateRefInput!
  ): gh_UpdateRefPayload
  """
  Creates, updates and/or deletes multiple refs in a repository.
  
  This mutation takes a list of `RefUpdate`s and performs these updates
  on the repository. All updates are performed atomically, meaning that
  if one of them is rejected, no other ref will be modified.
  
  `RefUpdate.beforeOid` specifies that the given reference needs to point
  to the given value before performing any updates. A value of
  `0000000000000000000000000000000000000000` can be used to verify that
  the references should not exist.
  
  `RefUpdate.afterOid` specifies the value that the given reference
  will point to after performing all updates. A value of
  `0000000000000000000000000000000000000000` can be used to delete a
  reference.
  
  If `RefUpdate.force` is set to `true`, a non-fast-forward updates
  for the given reference will be allowed.
  """
  gh_updateRefs(
    """Parameters for UpdateRefs"""
    input: gh_UpdateRefsInput!
  ): gh_UpdateRefsPayload @preview(toggledBy: "update-refs-preview")
  """Update information about a repository."""
  gh_updateRepository(
    """Parameters for UpdateRepository"""
    input: gh_UpdateRepositoryInput!
  ): gh_UpdateRepositoryPayload
  """Update a repository ruleset"""
  gh_updateRepositoryRuleset(
    """Parameters for UpdateRepositoryRuleset"""
    input: gh_UpdateRepositoryRulesetInput!
  ): gh_UpdateRepositoryRulesetPayload
  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  gh_updateRepositoryWebCommitSignoffSetting(
    """Parameters for UpdateRepositoryWebCommitSignoffSetting"""
    input: gh_UpdateRepositoryWebCommitSignoffSettingInput!
  ): gh_UpdateRepositoryWebCommitSignoffSettingPayload
  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  gh_updateSponsorshipPreferences(
    """Parameters for UpdateSponsorshipPreferences"""
    input: gh_UpdateSponsorshipPreferencesInput!
  ): gh_UpdateSponsorshipPreferencesPayload
  """Updates the state for subscribable subjects."""
  gh_updateSubscription(
    """Parameters for UpdateSubscription"""
    input: gh_UpdateSubscriptionInput!
  ): gh_UpdateSubscriptionPayload
  """Updates a team discussion."""
  gh_updateTeamDiscussion(
    """Parameters for UpdateTeamDiscussion"""
    input: gh_UpdateTeamDiscussionInput!
  ): gh_UpdateTeamDiscussionPayload
  """Updates a discussion comment."""
  gh_updateTeamDiscussionComment(
    """Parameters for UpdateTeamDiscussionComment"""
    input: gh_UpdateTeamDiscussionCommentInput!
  ): gh_UpdateTeamDiscussionCommentPayload
  """Updates team review assignment."""
  gh_updateTeamReviewAssignment(
    """Parameters for UpdateTeamReviewAssignment"""
    input: gh_UpdateTeamReviewAssignmentInput!
  ): gh_UpdateTeamReviewAssignmentPayload @preview(toggledBy: "stone-crop-preview")
  """Update team repository."""
  gh_updateTeamsRepository(
    """Parameters for UpdateTeamsRepository"""
    input: gh_UpdateTeamsRepositoryInput!
  ): gh_UpdateTeamsRepositoryPayload
  """Replaces the repository's topics with the given topics."""
  gh_updateTopics(
    """Parameters for UpdateTopics"""
    input: gh_UpdateTopicsInput!
  ): gh_UpdateTopicsPayload
  """Updates an existing user list."""
  gh_updateUserList(
    """Parameters for UpdateUserList"""
    input: gh_UpdateUserListInput!
  ): gh_UpdateUserListPayload
  """Updates which of the viewer's lists an item belongs to"""
  gh_updateUserListsForItem(
    """Parameters for UpdateUserListsForItem"""
    input: gh_UpdateUserListsForItemInput!
  ): gh_UpdateUserListsForItemPayload
  """Verify that a verifiable domain has the expected DNS record."""
  gh_verifyVerifiableDomain(
    """Parameters for VerifyVerifiableDomain"""
    input: gh_VerifyVerifiableDomainInput!
  ): gh_VerifyVerifiableDomainPayload
}

"""
A field whose value conforms with the standard mongodb object Id as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar hn_ObjectId

"""
Enum of all the scopes that can be used with the @requireAuth directive.
"""
enum hn_Scope {
  write_post
  write_series
  create_pro
  assign_pro_publications
  active_pro_user
  change_pro_subscription
  signup
  import_subscribers_to_publication
  acknowledge_email_import
  recommend_publications
  publication_admin
  webhook_admin
  update_post
  publish_draft
  publish_post
  publish_comment
  update_comment
  remove_comment
  publish_reply
  update_reply
  remove_reply
}

"""SortOrder is a common enum for all types that can be sorted."""
enum hn_SortOrder {
  asc
  dsc
}

"""
Node is a common interface for all types example User, Post, Comment, etc.
"""
interface hn_Node {
  """The ID of the node."""
  id: ID!
}

"""
Connection to get list of items.
Returns a list of edges which contains the items and cursor to the last item of the previous page.
This is a common interface for all connections.
"""
interface hn_Connection {
  """A list of edges of items connection."""
  edges: [hn_Edge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
}

"""
An edge that contains a node and cursor to the node.
This is a common interface for all edges.
"""
interface hn_Edge {
  """A node in the connection."""
  node: hn_Node!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
A Connection for page based pagination to get a list of items.
Returns a list of nodes which contains the items.
This is a common interface for all page connections.
"""
interface hn_PageConnection {
  """A list of edges of items connection."""
  nodes: [hn_Node!]!
  """Information to aid in pagination."""
  pageInfo: hn_OffsetPageInfo!
}

"""Common fields that describe a feature."""
interface hn_Feature {
  """Whether the feature is enabled or not."""
  isEnabled: Boolean!
}

"""Contains information to help in pagination."""
type hn_PageInfo {
  """Indicates if there are more pages."""
  hasNextPage: Boolean
  """
  The cursor of the last item in the current page.
  Use it as the after input to query the next page.
  """
  endCursor: String
}

"""Contains information to help in pagination for page based pagination."""
type hn_OffsetPageInfo {
  """Indicates if there are more pages."""
  hasNextPage: Boolean
  """Indicates if there are previous pages"""
  hasPreviousPage: Boolean
  """
  The page before the current page.
  Use it to build page navigation
  """
  previousPage: Int
  """
  The page after the current page.
  Use it to build page navigation
  """
  nextPage: Int
}

type hn_Content {
  """The Markdown version of the content."""
  markdown: String!
  """The HTML version of the content."""
  html: String!
  """
  The text version from sanitized html content. HTML tags are stripped and only text is returned.
  """
  text: String!
}

"""Information to help in seo related meta tags."""
type hn_SEO {
  """The title used in og:title tag for SEO purposes."""
  title: String
  """The description used in og:description tag for SEO purposes."""
  description: String
}

"""Information to help in open graph related meta tags."""
type hn_OpenGraphMetaData {
  """The image used in og:image tag for SEO purposes."""
  image: String
}

"""
Connection for users to another user. Contains a list of nodes.
Each node is a user.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_UserConnection implements hn_PageConnection {
  """A list of users"""
  nodes: [hn_User!]!
  """Information for page based pagination in users connection."""
  pageInfo: hn_OffsetPageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""Basic information about a user on Hashnode."""
interface hn_IUser {
  """The ID of the user. It can be used to identify the user."""
  id: ID!
  """
  The username of the user. It is unique and tied with user's profile URL. Example - https://hashnode.com/@username
  """
  username: String!
  """The name of the user."""
  name: String!
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bio: hn_Content
  """The URL to the profile picture of the user."""
  profilePicture: String
  """The social media links of the user. Shown on the user's profile."""
  socialMediaLinks: hn_SocialMediaLinks
  """
  Returns a list of badges that the user has earned. Shown on blogs /badges page. Example - https://iamshadmirza.com/badges
  """
  badges: [hn_Badge!]!
  """
  Publications associated with the user. Includes personal and team publications.
  """
  publications(
    """The maximum number of publications to return in a batch."""
    first: Int!
    """The cursor to start the query from."""
    after: String
    """Filter to apply to the publications."""
    filter: hn_UserPublicationsConnectionFilter
  ): hn_UserPublicationsConnection!
  """Returns the list of posts the user has published."""
  posts(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
    """The sort direction for the posts."""
    sortBy: hn_UserPostsSort = DATE_PUBLISHED_DESC
    """The filters to be applied to the post list."""
    filter: hn_UserPostConnectionFilter
  ): hn_UserPostConnection!
  """
  The number of users that follow the requested user. Visible in the user's profile.
  """
  followersCount: Int!
  """
  The number of users that this user is following. Visible in the user's profile.
  """
  followingsCount: Int!
  """The tagline of the user. Shown on the user's profile below the name."""
  tagline: String
  """The date the user joined Hashnode."""
  dateJoined: DateTime
  """The location of the user."""
  location: String
  """
  The availability of the user based on tech stack and interests. Shown on the "I am available for" section in user's profile.
  """
  availableFor: String
  """Returns a list of tags that the user follows."""
  tagsFollowing: [hn_Tag!]!
  """Whether or not the user is an ambassador."""
  ambassador: Boolean!
  """Whether or not the user is deactivated."""
  deactivated: Boolean!
  """The users who are following this user"""
  followers(
    """The number of users to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
  """The users which this user is following"""
  follows(
    """The number of users to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
}

"""Basic information about a user on Hashnode."""
type hn_User implements hn_IUser & hn_Node {
  """The ID of the user. It can be used to identify the user."""
  id: ID!
  """
  The username of the user. It is unique and tied with user's profile URL. Example - https://hashnode.com/@username
  """
  username: String!
  """The name of the user."""
  name: String!
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bio: hn_Content
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bioV2: hn_Content @deprecated(reason: "Will be removed on 26/10/2023. Use bio instead of bioV2")
  """The URL to the profile picture of the user."""
  profilePicture: String
  """The social media links of the user. Shown on the user's profile."""
  socialMediaLinks: hn_SocialMediaLinks
  """
  Returns a list of badges that the user has earned. Shown on blogs /badges page. Example - https://iamshadmirza.com/badges
  """
  badges: [hn_Badge!]!
  """
  Publications associated with the user. Includes personal and team publications.
  """
  publications(
    """The maximum number of publications to return in a batch."""
    first: Int!
    """The cursor to start the query from."""
    after: String
    """Filter to apply to the publications."""
    filter: hn_UserPublicationsConnectionFilter
  ): hn_UserPublicationsConnection!
  """Returns the list of posts the user has published."""
  posts(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
    """The sort direction for the posts based on the publish dates."""
    sortBy: hn_UserPostsSort = DATE_PUBLISHED_DESC
    """The filters to be applied to the post list."""
    filter: hn_UserPostConnectionFilter
  ): hn_UserPostConnection!
  """
  The number of users that follow the requested user. Visible in the user's profile.
  """
  followersCount: Int!
  """
  The number of users that this user is following. Visible in the user's profile.
  """
  followingsCount: Int!
  """The tagline of the user. Shown on the user's profile below the name."""
  tagline: String
  """The date the user joined Hashnode."""
  dateJoined: DateTime
  """The location of the user."""
  location: String
  """
  The availability of the user based on tech stack and interests. Shown on the "I am available for" section in user's profile.
  """
  availableFor: String
  """Returns a list of tags that the user follows."""
  tagsFollowing: [hn_Tag!]!
  """Whether or not the user is an ambassador."""
  ambassador: Boolean! @deprecated(reason: "Ambassadors program no longer active. Will be removed after 02/01/2024")
  """Whether or not the user is deactivated."""
  deactivated: Boolean!
  """
  Wether or not the authenticated user follows this user.
  Returns false if the authenticated user this user.
  """
  following: Boolean!
  """
  Wether or not this user follows the authenticated user.
  Returns false if the authenticated user this user.
  """
  followsBack: Boolean!
  """Wether or not this is a pro user."""
  isPro: Boolean!
  """The users who are following this user"""
  followers(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
  """The users which this user is following"""
  follows(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
}

"""
Basic information about the authenticated user.
User must be authenticated to use this type.
"""
type hn_MyUser implements hn_IUser & hn_Node {
  """The ID of the user. It can be used to identify the user."""
  id: ID!
  """
  The username of the user. It is unique and tied with user's profile URL. Example - https://hashnode.com/@username
  """
  username: String!
  """The name of the user."""
  name: String!
  """
  The bio of the user. Visible in about me section of the user's profile.
  """
  bio: hn_Content
  """The URL to the profile picture of the user."""
  profilePicture: String
  """The social media links of the user. Shown on the user's profile."""
  socialMediaLinks: hn_SocialMediaLinks
  """
  Returns a list of badges that the user has earned. Shown on blogs /badges page. Example - https://iamshadmirza.com/badges
  """
  badges: [hn_Badge!]!
  """
  Publications associated with the user. Includes personal and team publications.
  """
  publications(
    """The maximum number of publications to return in a batch."""
    first: Int!
    """The cursor to start the query from."""
    after: String
    """Filter to apply to the publications."""
    filter: hn_UserPublicationsConnectionFilter
  ): hn_UserPublicationsConnection!
  """Returns the list of posts the user has published."""
  posts(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
    """The sort direction for the posts based on the publish dates."""
    sortBy: hn_UserPostsSort = DATE_PUBLISHED_DESC
    """The filters to be applied to the post list."""
    filter: hn_UserPostConnectionFilter
  ): hn_UserPostConnection!
  """
  The number of users that follow the requested user. Visible in the user's profile.
  """
  followersCount: Int!
  """
  The number of users that this user is following. Visible in the user's profile.
  """
  followingsCount: Int!
  """The tagline of the user. Shown on the user's profile below the name."""
  tagline: String
  """The date the user joined Hashnode."""
  dateJoined: DateTime
  """The location of the user."""
  location: String
  """
  The availability of the user based on tech stack and interests. Shown on the "I am available for" section in user's profile.
  """
  availableFor: String
  """Returns a list of tags that the user follows."""
  tagsFollowing: [hn_Tag!]!
  """Whether or not the user is an ambassador."""
  ambassador: Boolean! @deprecated(reason: "Ambassadors program no longer active. Will be removed after 02/01/2024")
  provider: String
  """Whether or not the user is deactivated."""
  deactivated: Boolean!
  """
  A list of beta features that the user has access to. Only available to the authenticated user.
  """
  betaFeatures: [hn_BetaFeature!]!
  """
  Hashnode users are subscribed to a newsletter by default. This field can be used to unsubscribe from the newsletter. Only available to the authenticated user.
  """
  unsubscribeCode: String
  """Email address of the user. Only available to the authenticated user."""
  email: String
  """The users who are following this user"""
  followers(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
  """The users which this user is following"""
  follows(
    """The number of posts to return on a single page."""
    pageSize: Int!
    """The page number that should be returned."""
    page: Int!
  ): hn_UserConnection!
}

"""
Connection to get list of publications.
Returns a list of edges which contains the publications and cursor to the last item of the previous page.
"""
type hn_UserPublicationsConnection implements hn_Connection {
  """A list of edges of publications connection."""
  edges: [hn_UserPublicationsEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total amount of publications taking into account the filter."""
  totalDocuments: Int!
}

"""
An edge that contains a node of type publication and cursor to the node.
"""
type hn_UserPublicationsEdge implements hn_Edge {
  """Node containing the publication."""
  node: hn_Publication!
  """The cursor to the node."""
  cursor: String!
  """The role of the user in the publication."""
  role: hn_UserPublicationRole!
}

"""The role of the user in the publication."""
enum hn_UserPublicationRole {
  """
  The owner is the creator of the publication and can do all things, including delete publication.
  """
  OWNER
  """
  The editor has access to the publication dashboard to customize the blog and approve/reject posts.
  They also have access to the member panel to add/modify/remove members. Editors cannot remove other editors or update their roles.
  """
  EDITOR
  """
  Contributors can join the publication and contribute an article. They cannot directly publish a new article.
  """
  CONTRIBUTOR
}

"""Available social media links."""
type hn_SocialMediaLinks {
  """The user's website."""
  website: String
  """The user's GitHub profile."""
  github: String
  """The user's Twitter profile."""
  twitter: String
  """The user's Instagram profile."""
  instagram: String
  """The user's Facebook profile."""
  facebook: String
  """The user's StackOverflow profile."""
  stackoverflow: String
  """The user's LinkedIn profile."""
  linkedin: String
  """The user's YouTube profile."""
  youtube: String
}

"""A badge that the user has earned."""
type hn_Badge implements hn_Node {
  """The ID of the badge."""
  id: ID!
  """The name of the badge."""
  name: String!
  """The description of the badge."""
  description: String
  """The image of the badge."""
  image: String!
  """The date the badge was earned."""
  dateAssigned: DateTime
  """Link to badge page on Hashnode."""
  infoURL: String
  """A flag to determine if the badge is hidden."""
  suppressed: Boolean
}

"""Filter to apply to the publications."""
input hn_UserPublicationsConnectionFilter {
  """
  Only include publication in which the user has one of the provided roles.
  """
  roles: [hn_UserPublicationRole!]
  """Only return pro publications."""
  isPro: Boolean
}

"""Payload for the toggleFollowingUser mutation."""
type hn_ToggleFollowUserPayload {
  """The user that was followed/unfollowed."""
  user: hn_User
}

"""
Connection to get list of top commenters. Contains a list of edges containing nodes.
Each node is a user who commented recently.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_CommenterUserConnection implements hn_Connection {
  """A list of edges of commenters."""
  edges: [hn_UserEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
}

"""Contains a node of type user and cursor for pagination."""
type hn_UserEdge implements hn_Edge {
  """The node containing User information"""
  node: hn_User!
  """The cursor for use in pagination."""
  cursor: String!
}

"""Filter for the posts of a user."""
enum hn_UserPostsAuthorTypeFilter {
  """Only posts that are authored by the user."""
  AUTHOR_ONLY
  """Only posts that are co-authored by the user."""
  CO_AUTHOR_ONLY
}

"""Sorting for the posts of a user."""
enum hn_UserPostsSort {
  """Newest posts first."""
  DATE_PUBLISHED_DESC
  """Oldest posts first."""
  DATE_PUBLISHED_ASC
}

"""Filter for the posts of a user."""
input hn_UserPostConnectionFilter {
  """
  Only include posts that reference the provided tag IDs.
  
  
  Filtering by `tags` and `tagSlugs` will filter posts that match either of those two filters.
  """
  tags: [ID!]
  """
  Only include posts that reference the provided tag slugs.
  
  Filtering by `tags` and `tagSlugs` will filter posts that match either of those two filters.
  """
  tagSlugs: [String!]
  """
  Filtering by publication IDs will return posts from the author within the publication.
  """
  publications: [ID!]
  """
  Filtering by author status. Either all posts the user has authored or co-authored are returned or the authored posts only.
  """
  authorType: hn_UserPostsAuthorTypeFilter
}

"""
Contains basic information about the tag.
A tag is a label that categorizes posts with similar topics.
"""
interface hn_ITag {
  """The ID of the tag."""
  id: ID!
  """The name of the tag. Shown in tag page."""
  name: String!
  """
  The slug of the tag. Used to access tags feed.  Example https://hashnode.com/n/graphql
  """
  slug: String!
  """The logo of the tag. Shown in tag page."""
  logo: String
  """The tagline of the tag."""
  tagline: String
  """
  Information about the tag. Contains markdown html and text version of the tag's info.
  """
  info: hn_Content
  """Total number of users following this tag."""
  followersCount: Int!
  """Alltime usage count of this tag in posts."""
  postsCount: Int!
}

type hn_Tag implements hn_ITag & hn_Node {
  """The ID of the tag."""
  id: ID!
  """The name of the tag. Shown in tag page."""
  name: String!
  """
  The slug of the tag. Used to access tags feed.  Example https://hashnode.com/n/graphql
  """
  slug: String!
  """The logo of the tag. Shown in tag page."""
  logo: String
  """The tagline of the tag."""
  tagline: String
  """
  Information about the tag. Contains markdown html and text version of the tag's info.
  """
  info: hn_Content
  """Total number of users following this tag."""
  followersCount: Int!
  """Alltime usage count of this tag in posts."""
  postsCount: Int!
  """Paginated list of posts published under this tag"""
  posts(
    """The number of posts in particular tag to return per page."""
    first: Int!
    """The cursor after which the posts are to be returned."""
    after: String
    """The cursor before which the posts are to be returned."""
    filter: hn_TagPostConnectionFilter!
  ): hn_FeedPostConnection!
}

"""
Contains basic information about the tag returned by popularTags query.
"""
type hn_PopularTag implements hn_ITag & hn_Node {
  """The ID of the tag."""
  id: ID!
  """The name of the tag. Shown in tag page."""
  name: String!
  """
  The slug of the tag. Used to access tags feed.  Example https://hashnode.com/n/graphql
  """
  slug: String!
  """The logo of the tag. Shown in tag page."""
  logo: String
  """The tagline of the tag."""
  tagline: String
  """
  Information about the tag. Contains markdown html and text version of the tag's info.
  """
  info: hn_Content
  """Total number of users following this tag."""
  followersCount: Int!
  """Alltime usage count of this tag in posts."""
  postsCount: Int!
  """The number of posts published in the given period that use this tag."""
  postsCountInPeriod: Int!
}

"""The field by which to sort the tag feed."""
enum hn_TagPostsSort {
  """
  Determinate how to sort the results. Defaults to recents, used in New tag feed.
  """
  recent
  """Sorts by popularity, used in Hot tag feed."""
  popular
  """
  Trending is particular used to fetch top posts trending within a week time under a tag
  """
  trending
}

input hn_TagPostConnectionFilter {
  """Sort tag feed by recents, popular, or trending. Defaults to recents."""
  sortBy: hn_TagPostsSort
}

"""Contains a tag and a cursor for pagination."""
type hn_PopularTagEdge implements hn_Edge {
  """The node holding the Tag information"""
  node: hn_PopularTag!
  """A cursor for use in pagination."""
  cursor: String!
}

"""Contains a tag and a cursor for pagination."""
type hn_TagEdge implements hn_Edge {
  """The node holding the Tag information"""
  node: hn_Tag!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
Contains basic information about the publication.
A publication is a blog that can be created for a user or a team.
"""
type hn_Publication implements hn_Node {
  """The ID of the publication."""
  id: ID!
  """
  The title of the publication.
  Title is used as logo if logo is not provided.
  """
  title: String!
  """The title of the publication. Shown in blog home page."""
  displayTitle: String
  """
  The description of the publication, used in og:description meta tag. Fall backs to Publication.about.text if no SEO description is provided.
  """
  descriptionSEO: String
  """The about section of the publication."""
  about: hn_Content
  """
  The domain of the publication. Used to access publication. Example https://johndoe.com
  """
  url: String!
  """The canonical URL of the publication."""
  canonicalURL: String!
  """The author who owns the publication."""
  author: hn_User!
  """The favicon of the publication. Used in browser tab."""
  favicon: String
  """
  Color code of the header color of the publication. Used to style header of blog.
  """
  headerColor: String
  """The meta tags associated with the publication."""
  metaTags: String
  """The integrations connected to the publication."""
  integrations: hn_PublicationIntegrations
  """
  The publication preferences around layout, theme and other personalisations.
  """
  preferences: hn_Preferences!
  """Total number of followers of the publication."""
  followersCount: Int
  """
  Summary of the contact information and information related to copyrights, usually used in German-speaking countries.
  """
  imprint: String @deprecated(reason: "Use `imprintV2` instead. Will be removed after 16/12/2023.")
  """
  Summary of the contact information and information related to copyrights, usually used in German-speaking countries.
  """
  imprintV2: hn_Content
  """True if the publication is a team publication and false otherwise."""
  isTeam: Boolean!
  """Links to the publication's social media profiles."""
  links: hn_PublicationLinks
  """Domain information of the publication."""
  domainInfo: hn_DomainInfo!
  """
  A flag to indicate if the publication is using Headless CMS. This can be used to check if the post redirect needs authentication.
  """
  isHeadless: Boolean!
  """Returns series by slug in the publication."""
  series(slug: String!): hn_Series
  """Returns the list of series in the publication."""
  seriesList(
    """The number of series to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
  ): hn_SeriesConnection!
  """Returns the list of posts in the publication."""
  posts(
    """The number of posts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the post list."""
    filter: hn_PublicationPostConnectionFilter
  ): hn_PublicationPostConnection!
  """Returns the pinned post of the publication."""
  pinnedPost: hn_Post
  """Returns the post with the given slug."""
  post(slug: String!): hn_Post
  """Information about the publication's Open Graph metadata i.e. image."""
  ogMetaData: hn_OpenGraphMetaData!
  """
  Object containing information about beta features enabled for the publication.
  """
  features: hn_PublicationFeatures!
  """Returns the list of drafts in the publication."""
  drafts(
    """The number of drafts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the draft list."""
    filter: hn_PublicationDraftConnectionFilter
  ): hn_DraftConnection!
  """Returns the scheduled drafts of the publication."""
  scheduledDrafts(
    """The number of scheduled drafts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the draft list."""
    filter: hn_PublicationDraftConnectionFilter
  ): hn_DraftConnection!
  """Returns the static page with the given slug."""
  staticPage(
    """The slug of the static page to retrieve."""
    slug: String!
  ): hn_StaticPage
  """Returns a list of static pages in the publication."""
  staticPages(
    """The number of static pages to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
  ): hn_StaticPageConnection!
  """Returns the list of submitted drafts in the publication."""
  submittedDrafts(
    """The number of submitted drafts to return."""
    first: Int!
    """A cursor to the last item in the previous page."""
    after: String
    """The filters to be applied to the draft list."""
    filter: hn_PublicationDraftConnectionFilter
  ): hn_DraftConnection!
  """
  Returns true if GitHub backup is configured and active and false otherwise.
  """
  isGitHubBackupEnabled: Boolean!
  """Determines the structure of the post URLs."""
  urlPattern: hn_UrlPattern!
  """Returns the publication's email imports, used with newsletter feature."""
  emailImport: hn_EmailImport
  """Configured redirection rules for the publication."""
  redirectionRules: [hn_RedirectionRule!]!
  """Whether the publication has earned any badges or not."""
  hasBadges: Boolean!
  """Contains the publication's sponsorships information."""
  sponsorship: hn_PublicationSponsorship
  """Publications that are recommended by this publication."""
  recommendedPublications: [hn_UserRecommendedPublicationEdge!]!
  """The total amount of recommended publications by this publication."""
  totalRecommendedPublications: Int!
  """Publications that are recommending this publication."""
  recommendingPublications(
    """Size of the page."""
    pageSize: Int!
    """Page number."""
    page: Int!
  ): hn_PublicationUserRecommendingPublicationConnection!
}

type hn_UserRecommendedPublicationEdge {
  """
  The publication that is recommended by the publication this connection originates from.
  """
  node: hn_Publication!
  """
  The amount of followers the publication referenced in `node` has gained by recommendations from the publication.
  """
  totalFollowersGained: Int!
}

type hn_PublicationUserRecommendingPublicationConnection implements hn_PageConnection {
  """A list of edges containing Post information"""
  edges: [hn_UserRecommendingPublicationEdge!]!
  """Publications recommending this publication."""
  nodes: [hn_Publication!]!
  """Information for page based pagination in Post connection."""
  pageInfo: hn_OffsetPageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

type hn_UserRecommendingPublicationEdge {
  """
  The publication that is recommending the publication this connection originates from.
  """
  node: hn_Publication!
  """
  The amount of followers the publication has gained by recommendations from the publication referenced in `node`.
  """
  totalFollowersGained: Int!
}

type hn_RSSImport implements hn_Node {
  id: ID!
  """The URL pointing to the RSS feed."""
  rssURL: String!
}

"""
Contains the publication's Sponsorship information.
User can sponsor their favorite publications and pay them directly using Stripe.
"""
type hn_PublicationSponsorship {
  """
  The content shared by author of the publication to their sponsors.
  This is used as note to inform that author is open for sponsorship.
  """
  content: hn_Content
  """The Stripe configuration of the publication's Sponsorship."""
  stripe: hn_StripeConfiguration
}

"""Contains the publication's Stripe configuration."""
type hn_StripeConfiguration {
  """A flag indicating if the publication is connected to Stripe."""
  connected: Boolean!
  """The Stripe account ID of the publication."""
  accountId: String
  """The country of origin of the publication."""
  country: String
}

type hn_RedirectionRule {
  """The type of the redirection rule."""
  type: hn_HttpRedirectionType!
  """The source URL of the redirection rule."""
  source: String!
  """The destination URL of the redirection rule."""
  destination: String!
}

enum hn_HttpRedirectionType {
  """A temporary redirect that corresponds to the 307 HTTP status code."""
  TEMPORARY
  """A permanent redirect that corresponds to the 308 HTTP status code."""
  PERMANENT
}

"""
Connection to get list of posts in publications.
Returns a list of edges which contains the posts in publication and cursor to the last item of the previous page.
"""
input hn_PublicationPostConnectionFilter {
  """
  Filtering by tag slugs and tag IDs will return posts that match either of the filters.
  
  It is an "OR" filter and not an "AND" filter.
  """
  tags: [hn_ObjectId!]
  """
  Filtering by tag slugs and tag IDs will return posts that match either of the filters.
  
  It is an "OR" filter and not an "AND" filter.
  """
  tagSlugs: [String!]
  """Remove pinned post from the result set."""
  excludePinnedPost: Boolean
}

"""
Connection to get list of drafts in publications.
Returns a list of edges which contains the drafts in publication and cursor to the last item of the previous page.
"""
input hn_PublicationDraftConnectionFilter {
  """Search filter will be applied to the title of a draft"""
  search: String
}

"""Contains the publication's beta features."""
type hn_PublicationFeatures {
  """
  Newsletter feature for the publication which adds a `/newsletter` route for collecting subscribers and allows sending out newsletters.
  """
  newsletter: hn_NewsletterFeature!
  """Show the view count for blog posts."""
  viewCount: hn_ViewCountFeature!
  """Show the read time for blog posts."""
  readTime: hn_ReadTimeFeature!
  """Audio player for blog posts."""
  audioBlog: hn_AudioBlogFeature!
  """
  Widget that shows up if a text on a blog post is selected. Allows for easy sharing or copying of the selected text.
  """
  textSelectionSharer: hn_TextSelectionSharerFeature!
  """Individual styling for the publication."""
  customCSS: hn_CustomCSSFeature!
}

"""
Contains the flag indicating if the newsletter feature is enabled or not.
User can enable or disable the newsletter feature from the publication settings.
Shows a newsletter prompt on blog if enabled.
"""
type hn_NewsletterFeature implements hn_Feature {
  """A flag indicating if the newsletter feature is enabled or not."""
  isEnabled: Boolean!
  frequency: hn_NewsletterFrequency
}

enum hn_NewsletterFrequency {
  asap
  weekly
}

"""
Contains the flag indicating if the view count feature is enabled or not.
User can enable or disable the view count feature from the publication settings.
Shows total views on blogs if enabled.
"""
type hn_ViewCountFeature implements hn_Feature {
  """A flag indicating if the view count feature is enabled or not."""
  isEnabled: Boolean!
}

"""
Contains the flag indicating if the read time feature is enabled or not.
User can enable or disable the read time feature from the publication settings.
Shows read time on blogs if enabled.
"""
type hn_ReadTimeFeature implements hn_Feature {
  """A flag indicating if the read time feature is enabled or not."""
  isEnabled: Boolean!
}

"""
Contains the flag indicating if the audio blog feature is enabled or not.
User can enable or disable the audio blog feature from the publication settings.
Shows audio player on blogs if enabled.
"""
type hn_AudioBlogFeature implements hn_Feature {
  """A flag indicating if the audio blog feature is enabled or not."""
  isEnabled: Boolean!
  """The voice type for the audio blog."""
  voiceType: hn_AudioBlogVoiceType!
}

"""
Contains the flag indicating if the text selection sharer feature is enabled or not.
User can enable or disable the text selection sharer feature from the publication settings.
Shows a widget if a text on a blog post is selected. Allows for easy sharing or copying of the selected text.
"""
type hn_TextSelectionSharerFeature implements hn_Feature {
  """
  A flag indicating if the text selection sharer feature is enabled or not.
  """
  isEnabled: Boolean!
}

type hn_CustomCSSFeature implements hn_Feature {
  """A flag indicating if the custom CSS feature is enabled or not."""
  isEnabled: Boolean!
  """CSS that is live."""
  published: hn_CustomCSS
  """CSS that is not published yet."""
  draft: hn_CustomCSS
}

type hn_CustomCSS {
  """Custom CSS that will be applied on the publication homepage."""
  home: String
  """Custom CSS that will be applied on all posts of the publication."""
  post: String
  """
  Custom CSS that will be applied on all static pages of the publication.
  """
  static: String
  """The same as `home` but minified."""
  homeMinified: String
  """The same as `post` but minified."""
  postMinified: String
  """The same as `static` but minified."""
  staticMinified: String
}

enum hn_UrlPattern {
  """
  Post URLs contain the slug (for example `my slug`) and a random id (like `1234`) , e.g. "/my-slug-1234".
  """
  DEFAULT
  """Post URLs only contain the slug, e.g. "/my-slug"."""
  SIMPLE
}

"""Contains publication's layout choices."""
enum hn_PublicationLayout {
  """Changes the layout of blog into stacked list of posts."""
  stacked
  """Changes the layout of blog into grid 3 post cards per row."""
  grid
  """
  Changes the layout of blog into magazine style.
  This is the newest layout.
  """
  magazine
}

"""Contains the publication's domain information."""
type hn_DomainInfo {
  """
  The subdomain of the publication on hashnode.dev.
  
  It will redirect to you custom domain if it is present and ready.
  """
  hashnodeSubdomain: String
  """The domain of the publication."""
  domain: hn_DomainStatus
  """
  The www prefixed domain of the publication. Says if redirect to www domain is configured.
  """
  wwwPrefixedDomain: hn_DomainStatus
}

"""Contains the publication's domain status."""
type hn_DomainStatus {
  """The host of the publication domain."""
  host: String!
  """A flag indicating if the publication domain is ready."""
  ready: Boolean!
}

"""
Contains the publication's preferences for layout, theme and other personalisations.
"""
type hn_Preferences {
  """The publication's logo url."""
  logo: String
  """
  The publication's darkmode preferences. Can be used to load blog in dark mode by default and add a custom dark mode logo.
  """
  darkMode: hn_DarkModePreferences
  """An object containing pages enabled for the publication."""
  enabledPages: hn_PagesPreferences
  """The items in the publication's navigation bar."""
  navbarItems: [hn_PublicationNavbarItem!]!
  """The selected publication's layout, can be stacked, grid or magazine."""
  layout: hn_PublicationLayout
  """
  A flag indicating if the hashnode's footer branding is disabled for the publication.
  """
  disableFooterBranding: Boolean
  """
  A flag indicating if subscription popup needs to be shown to be shown for the publication
  """
  isSubscriptionModalDisabled: Boolean
}

"""Contains the publication's navbar items."""
type hn_PublicationNavbarItem {
  """The unique identifier of the navbar item."""
  id: ID!
  """The label of the navbar item."""
  label: String
  """The URL of the navbar item."""
  url: String
  """The order of the navbar item."""
  priority: Int
  """The type of the navbar item, can be series, link or page."""
  type: hn_PublicationNavigationType!
  """The series added to the navbar item."""
  series: hn_Series
  """The static page added to the navbar item."""
  page: hn_StaticPage
}

"""The type of the navbar item, can be series, link or page."""
enum hn_PublicationNavigationType {
  """The navbar item is a series."""
  series
  """The navbar item is a link."""
  link
  """The navbar item is a static page."""
  page
}

"""
Contains the preferences publication's autogenerated pages.
Used to enable or disable pages like badge, newsletter and members.
"""
type hn_PagesPreferences {
  """A flag indicating if the publication's badge page is enabled."""
  badges: Boolean
  """A flag indicating if the publication's newsletter page is enabled."""
  newsletter: Boolean
  """A flag indicating if the publication's member page is enabled."""
  members: Boolean
}

"""Contains the publication's dark mode preferences."""
type hn_DarkModePreferences {
  """A flag indicating if the dark mode is enabled for the publication."""
  enabled: Boolean
  """The custom dark mode logo of the publication."""
  logo: String
}

"""
Contains the publication's integrations.
Used to connect the publication with third party services like Google Analytics, Facebook Pixel, etc.
"""
type hn_PublicationIntegrations {
  """FB Pixel ID for integration with Facebook Pixel."""
  fbPixelID: String
  """Fathom Analytics Site ID for integration with Fathom Analytics."""
  fathomSiteID: String
  """
  A flag indicating if the custom domain is enabled for integration with Fathom Analytics.
  """
  fathomCustomDomainEnabled: Boolean
  """Custom domain for integration with Fathom Analytics."""
  fathomCustomDomain: String
  """Hotjar Site ID for integration with Hotjar."""
  hotjarSiteID: String
  """Matomo Site ID for integration with Matomo Analytics."""
  matomoSiteID: String
  """Matomo URL for integration with Matomo Analytics."""
  matomoURL: String
  """Google Analytics Tracking ID for integration with Google Analytics."""
  gaTrackingID: String
  """
  A flag indicating if the custom domain is enabled for integration with Plausible Analytics.
  """
  plausibleAnalyticsEnabled: Boolean
  """
  Web Monetization Payment Pointer for integration with Web Monetization.
  """
  wmPaymentPointer: String
  """The ID for the Hashnode-provided Umami analytics instance."""
  umamiWebsiteUUID: String
}

"""Contains the publication's social media links."""
type hn_PublicationLinks {
  """Twitter URL of the publication."""
  twitter: String
  """Instagram URL of the publication."""
  instagram: String
  """GitHub URL of the publication."""
  github: String
  """Website URL of the publication."""
  website: String
  """Hashnode profile of author of the publication."""
  hashnode: String
  """YouTube URL of the publication."""
  youtube: String
  """Daily.dev URL of the publication."""
  dailydev: String
  """LinkedIn URL of the publication."""
  linkedin: String
  """Mastodon URL of the publication."""
  mastodon: String
}

"""The voice type for the audio blog."""
enum hn_AudioBlogVoiceType {
  """Enum for the female voice type of the audio blog."""
  FEMALE
  """Enum for the male voice type of the audio blog."""
  MALE
}

"""The status of the email import."""
enum hn_EmailImportStatus {
  """Import has been initialized but is not yet in progress."""
  INITIALIZED
  """Import is in progress."""
  IN_PROGRESS
  """Import has to be reviewed by Hashnode. It is not yet reviewed."""
  IN_REVIEW
  """Import was successful. New emails have been imported."""
  SUCCESS
  """There was an error during the import."""
  FAILED
  """The has been rejected. Nothing has been imported."""
  REJECTED
  """The import has been acknowledged by the user."""
  FINISHED
}

"""Contains information about the email import."""
type hn_EmailImport {
  """
  Contains information about the current import example if it is in progress or has finished, date started, etc
  """
  currentImport: hn_EmailCurrentImport
}

"""The input for the email import acknowledgement mutation."""
type hn_EmailCurrentImport {
  """The status of the import"""
  status: hn_EmailImportStatus!
  """The date the import started"""
  importStartedAt: DateTime!
  """The number of subscribers that have been successfully imported"""
  successfullyImported: Int
  """The number of subscribers that have attempted to import"""
  attemptedToImport: Int
  """The filename of the csv file containing emails"""
  filename: String
}

"""Contains a publication and a cursor for pagination."""
type hn_RecommendedPublicationEdge implements hn_Edge {
  """The node holding the Publication information"""
  node: hn_Publication!
  """A cursor for use in pagination."""
  cursor: String!
}

input hn_SubscribeToNewsletterInput {
  """The ID of the publication to subscribe to."""
  publicationId: hn_ObjectId!
  """The email of the subscriber."""
  email: String!
}

input hn_UnsubscribeFromNewsletterInput {
  """The ID of the publication to unsubscribe from."""
  publicationId: hn_ObjectId!
  """The email that is currently subscribed."""
  email: String!
}

enum hn_NewsletterSubscribeStatus {
  PENDING
}

type hn_SubscribeToNewsletterPayload {
  status: hn_NewsletterSubscribeStatus
}

enum hn_NewsletterUnsubscribeStatus {
  UNSUBSCRIBED
}

type hn_UnsubscribeFromNewsletterPayload {
  status: hn_NewsletterUnsubscribeStatus
}

"""
Contains basic information about the post.
A post is a published article on Hashnode.
"""
type hn_Post implements hn_Node {
  """The ID of the post. Used to uniquely identify the post."""
  id: ID!
  """
  The slug of the post. Used as address of the post on blog. Example - https://johndoe.com/my-post-slug
  """
  slug: String!
  """The title of the post."""
  title: String!
  """
  The subtitle of the post. Subtitle is a short description of the post which is also used in SEO if meta tags are not provided.
  """
  subtitle: String
  """Returns the user details of the author of the post."""
  author: hn_User!
  """
  Returns the user details of the co-authors of the post.
  Hashnode users can add up to 4 co-authors as collaborators to their posts.
  This functionality is limited to teams publication.
  """
  coAuthors: [hn_User!]
  """
  Returns list of tags added to the post. Contains tag id, name, slug, etc.
  """
  tags: [hn_Tag!]
  """
  Complete URL of the post including the domain name. Example - https://johndoe.com/my-post-slug
  """
  url: String!
  """Canonical URL set by author in case of republished posts."""
  canonicalUrl: String
  """The publication the post belongs to."""
  publication: hn_Publication
  """Unique ID to identify post, used internally by hashnode."""
  cuid: String
  """
  The cover image preference of the post. Contains cover image URL and other details.
  """
  coverImage: hn_PostCoverImage
  """
  Brief is a short description of the post extracted from the content of the post. It's 250 characters long sanitized string.
  """
  brief: String!
  """The estimated time to read the post in minutes."""
  readTimeInMinutes: Int!
  """
  The number of views on the post. Can be used to show the popularity of the post.
  """
  views: Int!
  """Information of the series the post belongs to."""
  series: hn_Series
  """The number of hearts on the post. Shows how many users liked the post."""
  reactionCount: Int!
  """The number of replies on the post."""
  replyCount: Int!
  """The number of comments on the post."""
  responseCount: Int!
  """Flag to indicate if the post is featured on Hashnode feed."""
  featured: Boolean!
  """
  A list of contributors of the post. Contributors are users who have commented or replied to the post.
  """
  contributors: [hn_User!]! @deprecated(reason: "Will be removed on 10th Oct 2023. Use `commenters` instead.")
  """List of users who have commented on the post."""
  commenters(
    """The number of users to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """
    The sorting option for commenters. Used to sort commenters by popularity or recency.
    """
    sortBy: hn_PostCommenterSortBy
  ): hn_PostCommenterConnection!
  """A list of comments on the post."""
  comments(
    """The number of comments to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """
    The sorting option for comments. Used to sort comments by top or recent.
    """
    sortBy: hn_PostCommentSortBy
  ): hn_PostCommentConnection!
  """
  Flag to indicate if the post is bookmarked by the requesting user.
  
  Returns `false` if the user is not authenticated.
  """
  bookmarked: Boolean!
  """
  Content of the post. Contains HTML and Markdown version of the post content.
  """
  content: hn_Content!
  """A list of users who liked the post."""
  likedBy(
    """The number of users to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    filter: hn_PostLikerFilter
  ): hn_PostLikerConnection!
  """
  The date and time the post was featured. Used along with featured flag to determine if the post is featured.
  """
  featuredAt: DateTime
  """The date and time the post was published."""
  publishedAt: DateTime!
  """The date and time the post was last updated."""
  updatedAt: DateTime
  """
  Preference settings for the post. Contains information about if the post is pinned to blog, comments are disabled, etc.
  """
  preferences: hn_PostPreferences!
  """
  Returns male and female audio url of the post. Available in case the Audioblog is enabled.
  """
  audioUrls: hn_AudioUrls
  """
  SEO information of the post. Contains title and description used in meta tags.
  """
  seo: hn_SEO
  """
  OG meta-data of the post. Contains image url used in open graph meta tags.
  """
  ogMetaData: hn_OpenGraphMetaData
  """
  A flag to indicate if the post contains LaTeX. Latex is used to write mathematical equations.
  """
  hasLatexInPost: Boolean!
  """
  Wether or not the authenticated user is following this post.
  
  Returns `null` if the user is not authenticated.
  """
  isFollowed: Boolean
  """Wether or not the post has automatically been published via RSS feed."""
  isAutoPublishedFromRSS: Boolean!
  """Post feature-related fields."""
  features: hn_PostFeatures!
}

type hn_PostFeatures {
  tableOfContents: hn_TableOfContentsFeature!
  badges: hn_PostBadgesFeature!
}

type hn_TableOfContentsFeature implements hn_Feature {
  """Wether or not ser has chosen to show a table of contents on the post."""
  isEnabled: Boolean!
  """The content of the table of contents."""
  items: [hn_TableOfContentsItem!]!
}

type hn_PostBadgesFeature implements hn_Feature {
  """Wether or not the user has chosen to show badges on the post."""
  isEnabled: Boolean!
  items: [hn_PostBadge!]!
}

type hn_TableOfContentsItem implements hn_Node {
  """Unique identifier."""
  id: ID!
  """The level of nesting. Refers to the heading level in the post."""
  level: Int!
  """The slug of the referenced headline."""
  slug: String!
  """The title of the referenced headline."""
  title: String!
  """
  ID of the `TableOfContentsItem` that is one level higher in the hierarchy. `null` if this is a top level item.
  """
  parentId: ID
}

type hn_PostBadge implements hn_Node {
  """Unique identifier."""
  id: ID!
  """The type of the badge."""
  type: hn_PostBadgeType!
}

enum hn_PostBadgeType {
  FEATURED_HASHNODE
  FEATURED_DAILY_DOT_DEV
}

input hn_PostLikerFilter {
  """Only return likes from users with the given user IDs."""
  userIds: [ID!]
}

"""
Used when Audioblog feature is enabled. Contains URLs to the audioblog of the post.
"""
type hn_AudioUrls {
  """Male version of audio url of the post."""
  male: String
  """Female version of audio url of the post."""
  female: String
}

"""
Contains Post preferences. Used to determine if the post is pinned to blog, comments are disabled, or cover image is sticked to bottom.
"""
type hn_PostPreferences {
  """
  A flag to indicate if the post is pinned to blog. Pinned post is shown on top of the blog.
  """
  pinnedToBlog: Boolean!
  """A flag to indicate if the comments are disabled for the post."""
  disableComments: Boolean!
  """
  A flag to indicate if the cover image is shown below title of the post. Default position of cover is top of title.
  """
  stickCoverToBottom: Boolean!
  """Wether or not the post is hidden from the Hashnode community."""
  isDelisted: Boolean!
}

"""
Sorting options for commenters. Used to sort commenters by popularity or recency.
"""
enum hn_PostCommenterSortBy {
  """Sorts commenters by popularity."""
  POPULAR
  """Sorts commenters by recency."""
  RECENT
}

"""
Connection for commenters (users). Contains a list of edges containing nodes.
Each node holds commenter.
Page info contains information about pagination like hasNextPage and endCursor.
Total documents contains the total number of commenters.
"""
type hn_PostCommenterConnection implements hn_Connection {
  """A list of edges containing commenters as nodes."""
  edges: [hn_PostCommenterEdge!]!
  """Information about pagination in a connection."""
  pageInfo: hn_PageInfo!
  """Total number of nodes available i.e. number of commenters."""
  totalDocuments: Int!
}

"""
A commenter on the post. Contains information about the user who commented.
"""
type hn_PostCommenterEdge implements hn_Edge {
  """The commenter on the post."""
  node: hn_User!
  """The cursor for this node used for pagination."""
  cursor: String!
}

"""Sorting options for comments. Used to sort comments by top or recent."""
enum hn_PostCommentSortBy {
  """Sorts comments by popularity."""
  TOP
  """Sorts comments by recency."""
  RECENT
}

"""
Connection for comments. Contains a list of edges containing nodes.
Each node holds a comment.
Page info contains information about pagination like hasNextPage and endCursor.
Total documents contains the total number of comments.
"""
type hn_PostCommentConnection implements hn_Connection {
  """A list of edges containing comments as nodes."""
  edges: [hn_PostCommentEdge!]!
  """Information about pagination in a connection."""
  pageInfo: hn_PageInfo!
  """Total number of nodes available i.e. number of comments."""
  totalDocuments: Int!
}

"""
A comment on the post. Contains information about the content of the comment, user who commented, etc.
"""
type hn_PostCommentEdge implements hn_Edge {
  """The comment on the post."""
  node: hn_Comment!
  """The cursor for this node used for pagination."""
  cursor: String!
}

"""
A user who liked the post. Contains information about the user and number of reactions added by the user.
"""
type hn_PostLikerEdge implements hn_Edge {
  """The user who liked the post."""
  node: hn_User!
  """The cursor for this node used for pagination."""
  cursor: String!
  """The number of reaction added by the user."""
  reactionCount: Int!
}

"""
Connection for users who liked the post. Contains a list of edges containing nodes.
Each node is a user who liked the post.
Page info contains information about pagination like hasNextPage and endCursor.
Total documents contains the total number of users who liked the post.
"""
type hn_PostLikerConnection implements hn_Connection {
  """A list of edges containing users as nodes"""
  edges: [hn_PostLikerEdge!]!
  """Information about pagination in a connection."""
  pageInfo: hn_PageInfo!
  """
  Total number of nodes available i.e. number of users who liked the post.
  """
  totalDocuments: Int!
}

"""Contains information about the cover image of the post."""
type hn_PostCoverImage {
  """The URL of the cover image."""
  url: String!
  """Indicates whether the cover image is in portrait orientation."""
  isPortrait: Boolean!
  """Provides attribution information for the cover image, if available."""
  attribution: String
  """The name of the photographer who captured the cover image."""
  photographer: String
  """True if the image attribution should be hidden."""
  isAttributionHidden: Boolean!
}

"""Contains a post and a cursor for pagination."""
type hn_PostEdge implements hn_Edge {
  """The node holding the Post information"""
  node: hn_Post!
  """A cursor for use in pagination."""
  cursor: String!
}

"""The author type of a post from a user's perspective"""
enum hn_PostAuthorType {
  """The user has authored the post."""
  AUTHOR
  """The user is a co-author of post."""
  CO_AUTHOR
}

"""Contains a post and the author status."""
type hn_UserPostEdge {
  """The node holding the Post information."""
  node: hn_Post!
  """Indicates weather the user is the author or co-author of the post."""
  authorType: hn_PostAuthorType!
}

"""
Connection for posts within a feed. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_FeedPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
}

"""
Connection for posts within a publication search. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_SearchPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
}

"""
Connection for posts within a series. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_SeriesPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
Connection for posts within a publication. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_PublicationPostConnection implements hn_Connection {
  """A list of edges containing Post information"""
  edges: [hn_PostEdge!]!
  """Information for pagination in Post connection."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
Connection for posts written by a single user. Contains a list of edges containing nodes.
Each node is a post.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_UserPostConnection implements hn_PageConnection {
  """A list of edges containing Post information"""
  edges: [hn_UserPostEdge!]!
  """A list of posts"""
  nodes: [hn_Post!]!
  """Information for page based pagination in Post connection."""
  pageInfo: hn_OffsetPageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

type hn_PublishPostPayload {
  post: hn_Post
}

type hn_UpdatePostPayload {
  post: hn_Post
}

"""
Contains information about cover image options of the post. Like URL of the cover image, attribution, etc.
"""
input hn_CoverImageOptionsInput {
  """The URL of the cover image."""
  coverImageURL: String
  """
  A flag to indicate if the cover attribution is hidden, used when cover was chosen from unsplash.
  """
  isCoverAttributionHidden: Boolean
  """Information about the cover image attribution."""
  coverImageAttribution: String
  """
  The name of the cover image photographer, used when cover was chosen from unsplash.
  """
  coverImagePhotographer: String
  """A flag to indicate if the cover image is sticked to bottom."""
  stickCoverToBottom: Boolean
}

"""
Contains information about meta tags of the post. Used for SEO purpose.
"""
input hn_MetaTagsInput {
  """The title of the post used in og:title for SEO."""
  title: String
  """The description of the post used in og:description for SEO."""
  description: String
  """The image URL of the post used in og:image for SEO."""
  image: String
}

input hn_PublishPostTagInput {
  """
  A tag id that is referencing an existing tag.
  
  Either this or name and slug should be provided. If both are provided, the id will be used.
  """
  id: hn_ObjectId
  """
  A slug of a new tag to create.
  
  Either this and name or id should be provided. If both are provided, the id will be used.
  """
  slug: String
  """
  A name of a new tag to create.
  
  Either this and slug or id should be provided. If both are provided, the id will be used.
  """
  name: String
}

input hn_UpdatePostSettingsInput {
  """A flag to indicate if the post contains table of content"""
  isTableOfContentEnabled: Boolean
  """
  A flag to indicate if the post is delisted, used to hide the post from public feed.
  """
  delisted: Boolean
  """Whether or not comments should be disabled."""
  disableComments: Boolean
  """Pin the post to the blog homepage."""
  pinToBlog: Boolean
}

input hn_PublishPostSettingsInput {
  """A flag to indicate if the post is scheduled."""
  scheduled: Boolean
  """A flag to indicate if the post contains table of content"""
  enableTableOfContent: Boolean
  """Flag to indicate if the slug is overridden by the user."""
  slugOverridden: Boolean
  """Wether to send a newsletter for this post."""
  isNewsletterActivated: Boolean
  """
  A flag to indicate if the post is delisted, used to hide the post from public feed.
  """
  delisted: Boolean
}

"""Contains information about the post to be published."""
input hn_PublishPostInput {
  """The title of the post."""
  title: String!
  """The subtitle of the post."""
  subtitle: String
  """The ID of publication the post belongs to."""
  publicationId: hn_ObjectId!
  """Content of the post in markdown format."""
  contentMarkdown: String!
  """Date when the post is published."""
  publishedAt: DateTime
  """Options for the cover image of the post."""
  coverImageOptions: hn_CoverImageOptionsInput
  """Slug of the post."""
  slug: String
  """
  The URL of the original article if the post is imported from an external source.
  """
  originalArticleURL: String
  """A list of tags added to the post."""
  tags: [hn_PublishPostTagInput!]!
  """A flag to indicate if the comments are disabled for the post."""
  disableComments: Boolean
  """
  Information about the meta tags added to the post, used for SEO purpose.
  """
  metaTags: hn_MetaTagsInput
  """
  Publish the post on behalf of another user who is a member of the publication.
  
  Only applicable for team publications.
  """
  publishAs: hn_ObjectId
  """Providing a seriesId will add the post to that series."""
  seriesId: hn_ObjectId
  """
  Settings for the post like table of contents and newsletter activation.
  """
  settings: hn_PublishPostSettingsInput
  """Ids of the co-authors of the post."""
  coAuthors: [hn_ObjectId!]
}

input hn_UpdatePostInput {
  """The id of the post to update."""
  id: ID!
  """The new title of the post"""
  title: String
  """The subtitle of the post"""
  subtitle: String
  """The publication the post is published to."""
  contentMarkdown: String
  """Backdated publish date."""
  publishedAt: DateTime
  """Options for the cover image of the post."""
  coverImageOptions: hn_CoverImageOptionsInput
  """
  Slug of the post. Only if you want to override the slug that will be generated based on the title.
  """
  slug: String
  """Canonical URL of the original article."""
  originalArticleURL: String
  """
  Tags to add to the post. New tags will be created if they don't exist. It overrides the existing tags.
  """
  tags: [hn_PublishPostTagInput!]
  """
  Information about the meta tags added to the post, used for SEO purpose.
  """
  metaTags: hn_MetaTagsInput
  """
  Set a different author for the post than the requesting user.
  Must be a member of the publication.
  """
  publishAs: hn_ObjectId
  """
  Update co-authors of the post.
  Must be a member of the publication.
  """
  coAuthors: [hn_ObjectId!]
  """
  Providing a seriesId will add the post to that series.
  Must be a series of the publication.
  """
  seriesId: hn_ObjectId
  """Whether or not to enable the table of content."""
  settings: hn_UpdatePostSettingsInput
  """If the publication should be changed this is the new Publication ID"""
  publicationId: hn_ObjectId
}

input hn_AddPostToSeriesInput {
  """The ID of the post to be added to the series."""
  postId: hn_ObjectId!
  """The ID of the series to which the post is to be added."""
  seriesId: hn_ObjectId!
}

type hn_AddPostToSeriesPayload {
  """The series to which the post was added."""
  series: hn_Series
}

"""Contains information about type of feed to be returned."""
enum hn_FeedType {
  """
  Returns only posts of the users you follow or publications you have subscribed to.
  
  Note: You have to be authenticated to use this feed type.
  """
  FOLLOWING
  """
  Returns only posts based on users following and interactions.
  
  Personalised feed is curated per requesting user basis.
  """
  PERSONALIZED
  """Returns posts which were published recently, sorted based on recency."""
  RECENT
  """Returns posts based on old personalization algorithm."""
  RELEVANT
  """Returns posts which were featured, sorted based on recency."""
  FEATURED
  """
  Returns posts which were bookmarked by the user, sorted based on recency.
  """
  BOOKMARKS
  """Returns posts which were viewed by the user, sorted based on recency."""
  READING_HISTORY
}

input hn_FeedFilter {
  """The type of feed to be returned."""
  type: hn_FeedType
  """
  Adds a filter to return posts with minimum number of minutes required to read the post.
  """
  minReadTime: Int
  """
  Adds a filter to return posts with maximum number of minutes required to read the post.
  """
  maxReadTime: Int
  """Adds a filter to return posts with tagged with provided tags only."""
  tags: [hn_ObjectId!]
}

input hn_SearchPostsOfPublicationFilter {
  """The query to be searched in post."""
  query: String!
  """The ID of publications to search from."""
  publicationId: hn_ObjectId!
}

"""
Contains basic information about the comment.
A comment is a response to a post.
"""
type hn_Comment implements hn_Node {
  """The ID of the comment."""
  id: ID!
  """The content of the comment in markdown and html format."""
  content: hn_Content!
  """The author of the comment."""
  author: hn_User!
  """Returns a list of replies to the comment."""
  replies(
    """The number of replies to return. Max is 50."""
    first: Int!
    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): hn_CommentReplyConnection!
  """The date the comment was created."""
  dateAdded: DateTime!
  """
  A unique string identifying the comment. Used as element id in the DOM on hashnode blogs.
  """
  stamp: String
  """
  Total number of reactions on the comment. Reactions are hearts added to any comment.
  """
  totalReactions: Int!
  """
  Total number of reactions on the comment by the authenticated user. User must be authenticated to use this field.
  """
  myTotalReactions: Int!
}

"""
Connection to get list of replies to a comment.
Returns a list of edges which contains the posts in publication and cursor to the last item of the previous page.
"""
type hn_CommentReplyConnection implements hn_Connection {
  """
  A list of edges containing nodes in the connection.
  A node contains a reply to a comment.
  """
  edges: [hn_CommentReplyEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""An edge that contains a node of type reply and cursor to the node."""
type hn_CommentReplyEdge implements hn_Edge {
  """The node containing a reply to a comment."""
  node: hn_Reply!
  """A cursor to the last item of the previous page."""
  cursor: String!
}

"""
Contains basic information about the reply.
A reply is a response to a comment.
"""
type hn_Reply implements hn_Node {
  """The ID of the reply."""
  id: ID!
  """The content of the reply in markdown and html format."""
  content: hn_Content!
  """The author of the reply."""
  author: hn_User!
  """The date the reply was created."""
  dateAdded: DateTime!
  """
  A unique string identifying the reply. Used as element id in the DOM on hashnode blogs.
  It can be used to scroll to the reply in browser.
  """
  stamp: String
  """
  Total number of reactions on the reply. Reactions are hearts added to any reply.
  """
  totalReactions: Int!
  """
  Total number of reactions on the reply by the authenticated user. User must be authenticated to use this field.
  """
  myTotalReactions: Int!
}

"""
Contains basic information about the series.
A series is a collection of posts that are related to each other.
"""
type hn_Series implements hn_Node {
  """The ID of the series."""
  id: ID!
  """The name of the series. Shown in series page."""
  name: String!
  """The date and time the series was created."""
  createdAt: DateTime!
  """
  The description of the series. Contains markdown and html version of the series's description.
  """
  description: hn_Content
  """The cover image of the series."""
  coverImage: String
  """Returns the user who is author of the series."""
  author: hn_User!
  """Unique identifier for the series."""
  cuid: ID
  """
  The slug of the series. Used to access series page.  Example https://johndoe.com/series/series-slug
  """
  slug: String!
  """
  The sort order of the series, determines if the latest posts should appear first or last in series.
  """
  sortOrder: hn_SortOrder!
  """Returns a list of posts in the series."""
  posts(
    """The number of posts to return."""
    first: Int!
    """The cursor after which the posts are to be returned."""
    after: String
  ): hn_SeriesPostConnection!
}

"""Contains a Series and a cursor for pagination."""
type hn_SeriesEdge implements hn_Edge {
  """The node holding the Series information"""
  node: hn_Series!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
Connection for Series. Contains a list of edges containing nodes.
Each node is a Series.
Page info contains information about pagination like hasNextPage and endCursor.
"""
type hn_SeriesConnection implements hn_Connection {
  """A list of edges containing Series information"""
  edges: [hn_SeriesEdge!]!
  """Information for pagination in SeriesList connection."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
Contains basic information about the draft.
A draft is a post that is not published yet.
"""
type hn_Draft implements hn_Node {
  """The ID of the draft."""
  id: ID!
  slug: String!
  """
  The title of the draft. It would become the title of the post when published.
  """
  title: String
  """
  The subtitle of the draft. It would become the subtitle of the post when published.
  """
  subtitle: String
  """The author of the draft."""
  author: hn_User!
  """
  Returns the user details of the co-authors of the post.
  Hashnode users can add up to 4 co-authors as collaborators to their posts.
  This functionality is limited to teams publication.
  """
  coAuthors: [hn_User!]
  """
  Returns list of tags added to the draft. Contains tag id, name, slug, etc.
  """
  tags: [hn_Tag!]!
  canonicalUrl: String
  """
  The cover image preference of the draft. Contains cover image URL and other details.
  """
  coverImage: hn_DraftCoverImage
  readTimeInMinutes: Int!
  """Information of the series the draft belongs to."""
  series: hn_Series
  """Content of the draft in HTML and markdown"""
  content: hn_Content
  """The date the draft was updated."""
  dateUpdated: DateTime! @deprecated(reason: "Use updatedAt instead. Will be removed on 26/12/2023.")
  updatedAt: DateTime!
  settings: hn_DraftSettings!
  """
  SEO information of the draft. Contains title and description used in meta tags.
  """
  seo: hn_SEO
  """
  OG meta-data of the draft. Contains image url used in open graph meta tags.
  """
  ogMetaData: hn_OpenGraphMetaData
  """Draft feature-related fields."""
  features: hn_DraftFeatures!
  """Information about the last backup of the draft."""
  lastBackup: hn_DraftBackup
  """The date the draft was last successfully backed up."""
  lastSuccessfulBackupAt: DateTime
  """The date the draft last failed to back up."""
  lastFailedBackupAt: DateTime
}

type hn_DraftSettings {
  """A flag to indicate if the comments are disabled for the post."""
  disableComments: Boolean!
  """
  A flag to indicate if the cover image is shown below title of the post. Default position of cover is top of title.
  """
  stickCoverToBottom: Boolean!
  """Wether or not the post is hidden from the Hashnode community."""
  isDelisted: Boolean!
}

type hn_DraftFeatures {
  tableOfContents: hn_TableOfContentsFeature!
}

type hn_DraftBackup {
  """The status of the backup i.e., success or failure."""
  status: hn_BackupStatus
  """The date the backup was created."""
  at: DateTime
}

"""The status of the backup i.e., success or failure."""
enum hn_BackupStatus {
  """The backup was successful."""
  success
  """The backup failed."""
  failed
}

"""
Connection to get list of drafts.
Returns a list of edges which contains the draft and cursor to the last item of the previous page.
"""
type hn_DraftConnection implements hn_Connection {
  """A list of edges of drafts connection."""
  edges: [hn_DraftEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""Contains information about the cover image of the draft."""
type hn_DraftCoverImage {
  """The URL of the cover image."""
  url: String!
  """Provides attribution information for the cover image, if available."""
  attribution: String
  """The name of the photographer who captured the cover image."""
  photographer: String
  """True if the image attribution should be hidden."""
  isAttributionHidden: Boolean!
}

"""An edge that contains a node of type draft and cursor to the node."""
type hn_DraftEdge implements hn_Edge {
  """A node in the connection containing a draft."""
  node: hn_Draft!
  """A cursor for use in pagination."""
  cursor: String!
}

"""
Contains basic information about the beta feature.
A beta feature is a feature that is not yet released to all users.
"""
type hn_BetaFeature implements hn_Node {
  """The ID of the beta feature."""
  id: ID!
  """The key of the beta feature."""
  key: String!
  """The title of the beta feature."""
  title: String
  """The description of the beta feature."""
  description: String
  """The url of the beta feature."""
  url: String
  """The date the beta feature was created."""
  enabled: Boolean!
}

"""
Contains basic information about the scheduled post.
A scheduled post is a post that is scheduled to be published in the future.
"""
type hn_ScheduledPost implements hn_Node {
  """The ID of the scheduled post."""
  id: ID!
  """The date the scheduled post was created."""
  author: hn_User!
  """Returns the draft associated with the scheduled post."""
  draft: hn_Draft
  """
  The scheduled date for the post to be published. This is the date the post will be published.
  """
  scheduledDate: DateTime!
  """
  Returns user who scheduled the post. This is usually the author of the post.
  """
  scheduledBy: hn_User
  """Returns the publication the post is scheduled for."""
  publication: hn_Publication!
}

input hn_ReschedulePostInput {
  """The Draft ID of the scheduled post."""
  draftId: hn_ObjectId!
  """New scheduled date for the post to be rescheduled."""
  scheduledDate: DateTime!
}

type hn_ScheduledPostPayload {
  """Payload returned in response of reschedulePost mutation."""
  payload: hn_ScheduledPost!
}

"""
Contains basic information about the static page.
Static pages are pages that are written in markdown and can be added to blog.
"""
type hn_StaticPage implements hn_Node {
  """The ID of the static page."""
  id: ID!
  """The title of the static page. Shown in nav bar."""
  title: String!
  """
  The slug of the static page. Used to access static page.  Example https://johndoe.com/my-page
  """
  slug: String!
  """
  Content of the static page. Contains markdown and html version of the static page's content.
  """
  content: hn_Content!
  """
  A flag to determine if the static page is hidden from public or not, this is used to hide the page instead of deleting it.
  """
  hidden: Boolean!
  """Information about the static page's Open Graph metadata i.e. image."""
  ogMetaData: hn_OpenGraphMetaData
  """
  Information about the static page's SEO metadata i.e. title and description.
  """
  seo: hn_SEO
}

"""
Connection to get list of static pages.
Returns a list of edges which contains the static page and cursor to the last item of the previous page.
"""
type hn_StaticPageConnection implements hn_Connection {
  """A list of edges containing nodes in the connection."""
  edges: [hn_StaticPageEdge!]!
  """Information to aid in pagination."""
  pageInfo: hn_PageInfo!
  """The total number of documents in the connection."""
  totalDocuments: Int!
}

"""
An edge that contains a node of type static page and cursor to the node.
"""
type hn_StaticPageEdge implements hn_Edge {
  """The node containing a static page."""
  node: hn_StaticPage!
  """A cursor to the last item of the previous page."""
  cursor: String!
}

type hn_Webhook implements hn_Node {
  """The ID of the post. Used to uniquely identify the post."""
  id: ID!
  publication: hn_Publication!
  url: String!
  events: [hn_WebhookEvent!]!
  secret: String!
  createdAt: DateTime!
  updatedAt: DateTime
  """
  Messages that has been sent via this webhook.
  Messages include the request and eventual response.
  """
  messages(
    """The number of items to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
  ): hn_WebhookMessageConnection!
}

enum hn_WebhookEvent {
  POST_PUBLISHED
  POST_UPDATED
  POST_DELETED
  STATIC_PAGE_PUBLISHED
  STATIC_PAGE_EDITED
  STATIC_PAGE_DELETED
}

type hn_WebhookMessageConnection implements hn_Connection {
  edges: [hn_WebhookMessageEdge!]!
  pageInfo: hn_PageInfo!
}

type hn_WebhookMessageEdge implements hn_Edge {
  node: hn_WebhookMessage!
  cursor: String!
}

type hn_WebhookMessage implements hn_Node {
  id: ID!
  url: String!
  event: hn_WebhookEvent!
  """
  True if either the request failed or the response status code was not 2xx.
  """
  isError: Boolean!
  """True if the message was sent as a test."""
  isTest: Boolean!
  """True if the message was resent."""
  isResent: Boolean!
  request: hn_WebhookMessageRequest!
  response: hn_WebhookMessageResponse
  createdAt: DateTime!
}

type hn_WebhookMessageRequest {
  """Unique identifier of the request. Can be used to deduplicate requests."""
  uuid: String!
  headers: String!
  body: String!
  error: hn_WebhookMessageRequestError
}

type hn_WebhookMessageRequestError {
  code: String!
  message: String!
}

type hn_WebhookMessageResponse {
  httpStatus: Int!
  headers: String
  body: String
  """
  The time it took from the moment the request has been send until the first byte of the response has been received.
  """
  timeToFirstByteMilliseconds: Int
}

type HashnodeQuery {
  """Returns the user with the username."""
  hn_user(
    """The username of the user to retrieve."""
    username: String!
  ): hn_User
  """
  Returns users who have most actively participated in discussions by commenting in the last 7 days.
  """
  hn_topCommenters(
    """The maximum number of users to return."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
  ): hn_CommenterUserConnection!
  """
  Returns the current authenticated user. Only available to the authenticated user.
  """
  hn_me: hn_MyUser!
  """Returns tag details by its slug."""
  hn_tag(
    """The slug of the tag to retrieve."""
    slug: String!
  ): hn_Tag
  """
  Returns the publication with the given ID or host.
  User can pass anyone of them.
  """
  hn_publication(
    """The ID of the publication."""
    id: hn_ObjectId
    """The host of the publication."""
    host: String
  ): hn_Publication
  """
  Returns a paginated list of posts based on the provided filter.
  Used in Hashnode home feed.
  """
  hn_feed(
    """The number of items to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """Filters to be applied to the feed."""
    filter: hn_FeedFilter
  ): hn_FeedPostConnection!
  """
  Returns a paginated list of posts based on search query for a particular publication id.
  """
  hn_searchPostsOfPublication(
    """The number of items to be returned per page."""
    first: Int!
    """A cursor to the last item of the previous page."""
    after: String
    """The filter to be applied to the search."""
    filter: hn_SearchPostsOfPublicationFilter!
  ): hn_SearchPostConnection!
  """
  Returns a draft by ID.
  Draft is a post that is not published yet.
  """
  hn_draft(
    """The ID of the draft to retrieve."""
    id: hn_ObjectId!
  ): hn_Draft
  """Get a scheduled post by ID."""
  hn_scheduledPost(
    """The ID of the scheduled post to get."""
    id: hn_ObjectId
  ): hn_ScheduledPost
}

type HashnodeMutation {
  """
  Update the follow state for the user that is provided via id or username.
  If the authenticated user does not follow the user, the mutation will follow the user.
  If the authenticated user already follows the user, the mutation will un-follow the user.
  Only available to the authenticated user.
  """
  hn_toggleFollowUser(id: ID, username: String): hn_ToggleFollowUserPayload!
  hn_subscribeToNewsletter(input: hn_SubscribeToNewsletterInput!): hn_SubscribeToNewsletterPayload!
  hn_unsubscribeFromNewsletter(input: hn_UnsubscribeFromNewsletterInput!): hn_UnsubscribeFromNewsletterPayload!
  """Creates a new post."""
  hn_publishPost(
    """Information about the post to be published."""
    input: hn_PublishPostInput!
  ): hn_PublishPostPayload!
  """Adds a post to a series."""
  hn_addPostToSeries(input: hn_AddPostToSeriesInput!): hn_AddPostToSeriesPayload!
  hn_updatePost(input: hn_UpdatePostInput!): hn_UpdatePostPayload!
  """Reschedule a post."""
  hn_reschedulePost(input: hn_ReschedulePostInput!): hn_ScheduledPostPayload
}